/**
 * Shop API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ShopApi) {
      root.ShopApi = {};
    }
    root.ShopApi.TextQuery = factory(root.ShopApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The TextQuery model module.
   * @module model/TextQuery
   * @version 20.4
   */

  /**
   * Constructs a new <code>TextQuery</code>.
   * A text query is used to match some text (i.e. a search phrase possibly consisting of multiple terms) against one or  multiple fields. In case multiple fields are provided, the phrase conceptually forms a logical OR over the fields. In  this case, the terms of the phrase basically have to match within the text, that would result in concatenating all  given fields.  
   * @alias module:model/TextQuery
   * @class
   * @param fields {Array.<String>} The document fields the search phrase has to match against.
   * @param searchPhrase {String} A search phrase, which may consist of multiple terms.
   */
  var exports = function(fields, searchPhrase) {
    var _this = this;

    _this['fields'] = fields;
    _this['search_phrase'] = searchPhrase;
  };

  /**
   * Constructs a <code>TextQuery</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TextQuery} obj Optional instance to populate.
   * @return {module:model/TextQuery} The populated <code>TextQuery</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('fields')) {
        obj['fields'] = ApiClient.convertToType(data['fields'], ['String']);
      }
      if (data.hasOwnProperty('search_phrase')) {
        obj['search_phrase'] = ApiClient.convertToType(data['search_phrase'], 'String');
      }
    }
    return obj;
  }

  /**
   * The document fields the search phrase has to match against.
   * @member {Array.<String>} fields
   */
  exports.prototype['fields'] = undefined;
  /**
   * A search phrase, which may consist of multiple terms.
   * @member {String} search_phrase
   */
  exports.prototype['search_phrase'] = undefined;



  return exports;
}));


