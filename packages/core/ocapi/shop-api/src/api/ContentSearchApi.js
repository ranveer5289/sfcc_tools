/**
 * Shop API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ContentSearchResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ContentSearchResult'));
  } else {
    // Browser globals (root is window)
    if (!root.ShopApi) {
      root.ShopApi = {};
    }
    root.ShopApi.ContentSearchApi = factory(root.ShopApi.ApiClient, root.ShopApi.ContentSearchResult);
  }
}(this, function(ApiClient, ContentSearchResult) {
  'use strict';

  /**
   * ContentSearch service.
   * @module api/ContentSearchApi
   * @version 20.4
   */

  /**
   * Constructs a new ContentSearchApi. 
   * @alias module:api/ContentSearchApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Provides keyword and refinement search functionality for content assets. The search result contains only content  that is online and assigned to a folder.
     * @param {Object} opts Optional parameters
     * @param {String} opts.q The query phrase to search for.
     * @param {Array.<String>} opts.refine Parameter that represents a refinement attribute/value(s) pair. Refinement attribute id and                      value(s) are separated by '='. Multiple values are supported by a sub-set of refinement attributes and                      can be provided by separating them using a pipe (URL                      encoded = \"|\"). Value ranges can be specified like this: refine=foo=(100..500) Multiple refine                      parameters can be provided by adding an underscore in combination with an integer counter right behind                      the parameter name and a counter range 1..9. I.e. refine_1=c_refinementType=type1|type2|type3. The                      following system refinement attribute ids are supported:                                            fdid: Allows to refine per single content folder id. Multiple folder ids are not supported.                      
     * @param {Array.<String>} opts.sort Parameter that represents a sorting attribute/value(s) pair. Sorting attribute id and value are                      separated by '='. The value describes the sort direction. Possible values are 'asc' and 'desc', for                      ascending or descending sort direction. I.e. sort=c_myAttribute=desc. Precondition: You have to select                      your sorting attributes in Business Manager > YourSite > Search Indexes > Content Index > Sorting                      Attributes.
     * @param {Number} opts.start The result set index to return the first instance for. Default value is 0.
     * @param {Number} opts.count The maximum number of instances per request. Default value is 25.
     * @param {String} opts.locale The locale context.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentSearchResult} and HTTP response
     */
    this.getContentSearchWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'q': opts['q'],
        'start': opts['start'],
        'count': opts['count'],
        'locale': opts['locale'],
      };
      var collectionQueryParams = {
        'refine': {
          value: opts['refine'],
          collectionFormat: 'csv'
        },
        'sort': {
          value: opts['sort'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ContentSearchResult;
      return this.apiClient.callApi(
        '/content_search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides keyword and refinement search functionality for content assets. The search result contains only content  that is online and assigned to a folder.
     * @param {Object} opts Optional parameters
     * @param {String} opts.q The query phrase to search for.
     * @param {Array.<String>} opts.refine Parameter that represents a refinement attribute/value(s) pair. Refinement attribute id and                      value(s) are separated by '='. Multiple values are supported by a sub-set of refinement attributes and                      can be provided by separating them using a pipe (URL                      encoded = \"|\"). Value ranges can be specified like this: refine=foo=(100..500) Multiple refine                      parameters can be provided by adding an underscore in combination with an integer counter right behind                      the parameter name and a counter range 1..9. I.e. refine_1=c_refinementType=type1|type2|type3. The                      following system refinement attribute ids are supported:                                            fdid: Allows to refine per single content folder id. Multiple folder ids are not supported.                      
     * @param {Array.<String>} opts.sort Parameter that represents a sorting attribute/value(s) pair. Sorting attribute id and value are                      separated by '='. The value describes the sort direction. Possible values are 'asc' and 'desc', for                      ascending or descending sort direction. I.e. sort=c_myAttribute=desc. Precondition: You have to select                      your sorting attributes in Business Manager > YourSite > Search Indexes > Content Index > Sorting                      Attributes.
     * @param {Number} opts.start The result set index to return the first instance for. Default value is 0.
     * @param {Number} opts.count The maximum number of instances per request. Default value is 25.
     * @param {String} opts.locale The locale context.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentSearchResult}
     */
    this.getContentSearch = function(opts) {
      return this.getContentSearchWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
