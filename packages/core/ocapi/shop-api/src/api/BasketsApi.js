/**
 * Shop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ApproachingDiscountResult from '../models/ApproachingDiscountResult';
import Basket from '../models/Basket';
import BasketPaymentInstrumentRequest from '../models/BasketPaymentInstrumentRequest';
import BasketReference from '../models/BasketReference';
import CouponItem from '../models/CouponItem';
import CustomerInfo from '../models/CustomerInfo';
import GiftCertificateItem from '../models/GiftCertificateItem';
import Note from '../models/Note';
import NotesResult from '../models/NotesResult';
import OrderAddress from '../models/OrderAddress';
import PaymentMethodResult from '../models/PaymentMethodResult';
import PriceAdjustment from '../models/PriceAdjustment';
import PriceAdjustmentRequest from '../models/PriceAdjustmentRequest';
import ProductItem from '../models/ProductItem';
import Shipment from '../models/Shipment';
import ShippingMethod from '../models/ShippingMethod';
import ShippingMethodResult from '../models/ShippingMethodResult';

/**
* Baskets service.
* @module api/BasketsApi
* @version 20.8
*/
export default class BasketsApi {

    /**
    * Constructs a new BasketsApi. 
    * @alias module:api/BasketsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Removes a basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteBasketsByIDWithHttpInfo(basketId) {
      let postBody = null;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/baskets/{basket_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteBasketsByID(basketId) {
      return this.deleteBasketsByIDWithHttpInfo(basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a coupon from the basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    deleteBasketsByIDCouponsByIDWithHttpInfo(basketId, couponItemId) {
      let postBody = null;

      let pathParams = {
        'basket_id': basketId,
        'coupon_item_id': couponItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/coupons/{coupon_item_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a coupon from the basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    deleteBasketsByIDCouponsByID(basketId, couponItemId) {
      return this.deleteBasketsByIDCouponsByIDWithHttpInfo(basketId, couponItemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a gift certificate item from an existing basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    deleteBasketsByIDGiftCertificateItemsByIDWithHttpInfo(basketId, giftCertificateItemId) {
      let postBody = null;

      let pathParams = {
        'basket_id': basketId,
        'gift_certificate_item_id': giftCertificateItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/gift_certificate_items/{gift_certificate_item_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes a gift certificate item from an existing basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    deleteBasketsByIDGiftCertificateItemsByID(basketId, giftCertificateItemId) {
      return this.deleteBasketsByIDGiftCertificateItemsByIDWithHttpInfo(basketId, giftCertificateItemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a product item from the basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    deleteBasketsByIDItemsByIDWithHttpInfo(basketId, itemId) {
      let postBody = null;

      let pathParams = {
        'basket_id': basketId,
        'item_id': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/items/{item_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a product item from the basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    deleteBasketsByIDItemsByID(basketId, itemId) {
      return this.deleteBasketsByIDItemsByIDWithHttpInfo(basketId, itemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a basket note.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    deleteBasketsByIDNotesByIDWithHttpInfo(basketId, noteId) {
      let postBody = null;

      let pathParams = {
        'basket_id': basketId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/notes/{note_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a basket note.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    deleteBasketsByIDNotesByID(basketId, noteId) {
      return this.deleteBasketsByIDNotesByIDWithHttpInfo(basketId, noteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a payment instrument of a basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    deleteBasketsByIDPaymentInstrumentsByIDWithHttpInfo(basketId, paymentInstrumentId) {
      let postBody = null;

      let pathParams = {
        'basket_id': basketId,
        'payment_instrument_id': paymentInstrumentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/payment_instruments/{payment_instrument_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a payment instrument of a basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    deleteBasketsByIDPaymentInstrumentsByID(basketId, paymentInstrumentId) {
      return this.deleteBasketsByIDPaymentInstrumentsByIDWithHttpInfo(basketId, paymentInstrumentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a custom manual price adjustment from the basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    deleteBasketsByIDPriceAdjustmentsByIDWithHttpInfo(basketId, priceAdjustmentId) {
      let postBody = null;

      let pathParams = {
        'basket_id': basketId,
        'price_adjustment_id': priceAdjustmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/price_adjustments/{price_adjustment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a custom manual price adjustment from the basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    deleteBasketsByIDPriceAdjustmentsByID(basketId, priceAdjustmentId) {
      return this.deleteBasketsByIDPriceAdjustmentsByIDWithHttpInfo(basketId, priceAdjustmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a specified shipment and all associated product, gift certificate,  shipping and price adjustment line items from a basket.  It is not permissible to remove the default shipment.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    deleteBasketsByIDShipmentsByIDWithHttpInfo(basketId, shipmentId) {
      let postBody = null;

      let pathParams = {
        'basket_id': basketId,
        'shipment_id': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/shipments/{shipment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a specified shipment and all associated product, gift certificate,  shipping and price adjustment line items from a basket.  It is not permissible to remove the default shipment.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    deleteBasketsByIDShipmentsByID(basketId, shipmentId) {
      return this.deleteBasketsByIDShipmentsByIDWithHttpInfo(basketId, shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    getBasketsByIDWithHttpInfo(basketId) {
      let postBody = null;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets a basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    getBasketsByID(basketId) {
      return this.getBasketsByIDWithHttpInfo(basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the approaching discounts of a basket
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ApproachingDiscountResult} and HTTP response
     */
    getBasketsByIDApproachingDiscountsWithHttpInfo(basketId) {
      let postBody = null;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ApproachingDiscountResult;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/approaching_discounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets the approaching discounts of a basket
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ApproachingDiscountResult}
     */
    getBasketsByIDApproachingDiscounts(basketId) {
      return this.getBasketsByIDApproachingDiscountsWithHttpInfo(basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves notes for a basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/NotesResult} and HTTP response
     */
    getBasketsByIDNotesWithHttpInfo(basketId) {
      let postBody = null;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = NotesResult;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves notes for a basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/NotesResult}
     */
    getBasketsByIDNotes(basketId) {
      return this.getBasketsByIDNotesWithHttpInfo(basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets applicable payment methods for an existing basket considering the open payment amount only.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/PaymentMethodResult} and HTTP response
     */
    getBasketsByIDPaymentMethodsWithHttpInfo(basketId) {
      let postBody = null;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = PaymentMethodResult;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/payment_methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets applicable payment methods for an existing basket considering the open payment amount only.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/PaymentMethodResult}
     */
    getBasketsByIDPaymentMethods(basketId) {
      return this.getBasketsByIDPaymentMethodsWithHttpInfo(basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the applicable shipping methods for a certain shipment of a  basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ShippingMethodResult} and HTTP response
     */
    getBasketsByIDShipmentsByIDShippingMethodsWithHttpInfo(basketId, shipmentId) {
      let postBody = null;

      let pathParams = {
        'basket_id': basketId,
        'shipment_id': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ShippingMethodResult;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/shipments/{shipment_id}/shipping_methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets the applicable shipping methods for a certain shipment of a  basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ShippingMethodResult}
     */
    getBasketsByIDShipmentsByIDShippingMethods(basketId, shipmentId) {
      return this.getBasketsByIDShipmentsByIDShippingMethodsWithHttpInfo(basketId, shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a basket. Only the currency of the basket, source code, and the custom  properties of the basket and of the shipping items will be considered.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    patchBasketsByIDWithHttpInfo(body, basketId) {
      let postBody = body;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates a basket. Only the currency of the basket, source code, and the custom  properties of the basket and of the shipping items will be considered.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    patchBasketsByID(body, basketId) {
      return this.patchBasketsByIDWithHttpInfo(body, basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a gift certificate item of an existing basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    patchBasketsByIDGiftCertificateItemsByIDWithHttpInfo(body, basketId, giftCertificateItemId) {
      let postBody = body;

      let pathParams = {
        'basket_id': basketId,
        'gift_certificate_item_id': giftCertificateItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/gift_certificate_items/{gift_certificate_item_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates a gift certificate item of an existing basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    patchBasketsByIDGiftCertificateItemsByID(body, basketId, giftCertificateItemId) {
      return this.patchBasketsByIDGiftCertificateItemsByIDWithHttpInfo(body, basketId, giftCertificateItemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates an item in a basket.  The  following values in the request body are considered by the server:    product_id: a valid product id. The purpose of this  value is to exchange a variation of a variation product.  shipment_id: a valid shipment id. The purpose of  this value is to move a product item to another shipment.  quantity: a number between 0 and 999. The purpose of  this value is to change quantity of the product item. If quantity is 0,  the product item is removed.  option_items/option_value_id: a valid option value  id. The purpose of this value is to exchange an option value for an  option item of an option product.   This is only possible if the product item is an option product. To change  option values a collection of option items to be changed need to be  provided in property option_items. Those  option_items need to contain option_id  and option_value_id. The provided values must be valid  for the option product that this product item represents. Otherwise  InvalidProductOptionItemException or  InvalidProductOptionValueItemException will be thrown.  custom properties c_&lt;CUSTOM_NAME&gt;: a  value corresponding to the type defined for custom attribute  &lt;CUSTOM_NAME&gt; of ProductLineItem. The purpose of this value is to  add or change the value of a custom attribute defined for  ProductLineItem.  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    patchBasketsByIDItemsByIDWithHttpInfo(body, basketId, itemId) {
      let postBody = body;

      let pathParams = {
        'basket_id': basketId,
        'item_id': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/items/{item_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates an item in a basket.  The  following values in the request body are considered by the server:    product_id: a valid product id. The purpose of this  value is to exchange a variation of a variation product.  shipment_id: a valid shipment id. The purpose of  this value is to move a product item to another shipment.  quantity: a number between 0 and 999. The purpose of  this value is to change quantity of the product item. If quantity is 0,  the product item is removed.  option_items/option_value_id: a valid option value  id. The purpose of this value is to exchange an option value for an  option item of an option product.   This is only possible if the product item is an option product. To change  option values a collection of option items to be changed need to be  provided in property option_items. Those  option_items need to contain option_id  and option_value_id. The provided values must be valid  for the option product that this product item represents. Otherwise  InvalidProductOptionItemException or  InvalidProductOptionValueItemException will be thrown.  custom properties c_&lt;CUSTOM_NAME&gt;: a  value corresponding to the type defined for custom attribute  &lt;CUSTOM_NAME&gt; of ProductLineItem. The purpose of this value is to  add or change the value of a custom attribute defined for  ProductLineItem.  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    patchBasketsByIDItemsByID(body, basketId, itemId) {
      return this.patchBasketsByIDItemsByIDWithHttpInfo(body, basketId, itemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a payment instrument of a basket.    Payment instruments are usually authorized after order creation, for example in a custom hook. The default  payment authorization process executes an authorization when a payment instrument is added to an order or  updated. See POST /orders/{order_no}/payment_instruments and PATCH  /orders/{order_no}/payment_instruments/{payment_instrument_id}  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    patchBasketsByIDPaymentInstrumentsByIDWithHttpInfo(body, basketId, paymentInstrumentId) {
      let postBody = body;

      let pathParams = {
        'basket_id': basketId,
        'payment_instrument_id': paymentInstrumentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/payment_instruments/{payment_instrument_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates a payment instrument of a basket.    Payment instruments are usually authorized after order creation, for example in a custom hook. The default  payment authorization process executes an authorization when a payment instrument is added to an order or  updated. See POST /orders/{order_no}/payment_instruments and PATCH  /orders/{order_no}/payment_instruments/{payment_instrument_id}  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    patchBasketsByIDPaymentInstrumentsByID(body, basketId, paymentInstrumentId) {
      return this.patchBasketsByIDPaymentInstrumentsByIDWithHttpInfo(body, basketId, paymentInstrumentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a custom manual price adjustment on the basket. Only the following PATH values are considered for the  update: discount, item_text, reason_code and custom properties; all other attributes are ignored. The discount  type of a price adjustment cannot be updated and therefore, the value of the existing type must be passed. For an  adjustment of type PERCENTAGE, the &#x27;percentage&#x27; attribute is mandatory. For adjustments of type AMOUNT and  FIXED_PRICE, the &#x27;amount&#x27; attribute is mandatory.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    patchBasketsByIDPriceAdjustmentsByIDWithHttpInfo(body, basketId, priceAdjustmentId) {
      let postBody = body;

      let pathParams = {
        'basket_id': basketId,
        'price_adjustment_id': priceAdjustmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/price_adjustments/{price_adjustment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates a custom manual price adjustment on the basket. Only the following PATH values are considered for the  update: discount, item_text, reason_code and custom properties; all other attributes are ignored. The discount  type of a price adjustment cannot be updated and therefore, the value of the existing type must be passed. For an  adjustment of type PERCENTAGE, the &#x27;percentage&#x27; attribute is mandatory. For adjustments of type AMOUNT and  FIXED_PRICE, the &#x27;amount&#x27; attribute is mandatory.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    patchBasketsByIDPriceAdjustmentsByID(body, basketId, priceAdjustmentId) {
      return this.patchBasketsByIDPriceAdjustmentsByIDWithHttpInfo(body, basketId, priceAdjustmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a shipment for a basket.    The shipment is initialized with values provided in the body  document and can be updated with further data API calls. Considered from  the body are the following properties if specified    the id  the shipping address  the shipping method  gift boolean flag  gift message  custom properties  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    patchBasketsByIDShipmentsByIDWithHttpInfo(body, basketId, shipmentId) {
      let postBody = body;

      let pathParams = {
        'basket_id': basketId,
        'shipment_id': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/shipments/{shipment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates a shipment for a basket.    The shipment is initialized with values provided in the body  document and can be updated with further data API calls. Considered from  the body are the following properties if specified    the id  the shipping address  the shipping method  gift boolean flag  gift message  custom properties  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    patchBasketsByIDShipmentsByID(body, basketId, shipmentId) {
      return this.patchBasketsByIDShipmentsByIDWithHttpInfo(body, basketId, shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new basket. The created basket is initialized with default values. Data provided in the body document  will be populated into the created basket. It can be updated with further Shop API calls.   Considered values from the request body are:    customer information: PUT /baskets/{basket_id}/customer  billing address: PUT /baskets/{basket_id}/billing_address  shipments including shipping address and shipping method: POST /baskets/{basket_id}/shipments  product items: POST /baskets/{basket_id}/items  coupon items: POST /baskets/{basket_id}/coupons  gift certificate items: POST /baskets/{basket_id}/gift_certificates  payment method and card type: POST /baskets/{basket_id}/payment_instruments  custom properties: PATCH /baskets/{basket_id}    Related resource means with which resource you can specify the same data after the basket creation.   Identify the basket using the basket_id property, which  should be integrated into the path of an update request, for example a POST to  /baskets/{basket_id}/items.  The resource supports JWT or  OAuth tokens for authentication:    A customer must provide a JWT, which specifies exactly one customer (it may be a guest or a registered  customer). In this case the resource creates a basket for this customer.  An agent must provide an OAuth token. The agent can use this resource to create a basket for a new created  guest customer, and can later update the customer if desired.     The number of baskets which can be created per customer is limited. When a  basket is created it is said to be open. It remains open until either an order is created from it  using a POST to resource /orders or it is deleted using a DELETE to resource  /baskets/{basket_id}. The number of open baskets allowed depends on the authentication  method used:    When using JWT each customer can have just one open basket  When using OAuth each customer can have up to 4 open baskets (this is a quota setting which can be  updated by support)    Custom properties in the form c_&lt;CUSTOM_NAME&gt; are supported. A custom property must correspond to a custom  attribute (&lt;CUSTOM_NAME&gt;) defined for the Basket system object, and its value must be valid for that custom  attribute. Other basket properties like the channel type or source code cannot be set with this resource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    postBasketsWithHttpInfo(opts) {
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new basket. The created basket is initialized with default values. Data provided in the body document  will be populated into the created basket. It can be updated with further Shop API calls.   Considered values from the request body are:    customer information: PUT /baskets/{basket_id}/customer  billing address: PUT /baskets/{basket_id}/billing_address  shipments including shipping address and shipping method: POST /baskets/{basket_id}/shipments  product items: POST /baskets/{basket_id}/items  coupon items: POST /baskets/{basket_id}/coupons  gift certificate items: POST /baskets/{basket_id}/gift_certificates  payment method and card type: POST /baskets/{basket_id}/payment_instruments  custom properties: PATCH /baskets/{basket_id}    Related resource means with which resource you can specify the same data after the basket creation.   Identify the basket using the basket_id property, which  should be integrated into the path of an update request, for example a POST to  /baskets/{basket_id}/items.  The resource supports JWT or  OAuth tokens for authentication:    A customer must provide a JWT, which specifies exactly one customer (it may be a guest or a registered  customer). In this case the resource creates a basket for this customer.  An agent must provide an OAuth token. The agent can use this resource to create a basket for a new created  guest customer, and can later update the customer if desired.     The number of baskets which can be created per customer is limited. When a  basket is created it is said to be open. It remains open until either an order is created from it  using a POST to resource /orders or it is deleted using a DELETE to resource  /baskets/{basket_id}. The number of open baskets allowed depends on the authentication  method used:    When using JWT each customer can have just one open basket  When using OAuth each customer can have up to 4 open baskets (this is a quota setting which can be  updated by support)    Custom properties in the form c_&lt;CUSTOM_NAME&gt; are supported. A custom property must correspond to a custom  attribute (&lt;CUSTOM_NAME&gt;) defined for the Basket system object, and its value must be valid for that custom  attribute. Other basket properties like the channel type or source code cannot be set with this resource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    postBaskets(opts) {
      return this.postBasketsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds a coupon to an existing basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    postBasketsByIDCouponsWithHttpInfo(body, basketId) {
      let postBody = body;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/coupons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds a coupon to an existing basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    postBasketsByIDCoupons(body, basketId) {
      return this.postBasketsByIDCouponsWithHttpInfo(body, basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds a gift certificate item to an existing basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    postBasketsByIDGiftCertificateItemsWithHttpInfo(body, basketId) {
      let postBody = body;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/gift_certificate_items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds a gift certificate item to an existing basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    postBasketsByIDGiftCertificateItems(body, basketId) {
      return this.postBasketsByIDGiftCertificateItemsWithHttpInfo(body, basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds new items to a basket.  The added items are associated with the  specified shipment. If no shipment id is specified, the added items are associated with the default shipment.   Considered values from the request body, for each item are:    product_id: a valid product id. This is the id of the product to be added to the basket. If the  product is already in the basket, the API either increments the quantity of the existing product line item or  creates a new product line item, based on the site preference &#x27;Add Product Behavior&#x27;. For option products and  product bundles containing variation masters, the API creates a new product line item regardless of the site  preference.  shipment_id: a valid shipment id (optional). This is the id of the shipment in which the product item  is created.  quantity: a number between 0.01 and 999. This is the quantity of the product to order.  inventory_id: a valid inventory id (optional). This is the id of the inventory from which the item is  allocated.  bonus_discount_line_item_id: a valid bonus discount line item id (optional). This is the id of the  bonus discount line item for which the added product is a selected bonus product.  option_items/option_value_id: a valid option value id. This is an option value for an option item of  an option product.  This is only possible if the product item is an option  product. To set option values, you must specify a collection of option items in the option_items  property. These option items must contain option_id and option_value_id. Also,  the values you specify must be valid for the option product that this product item represents. Otherwise, the  server throws an InvalidProductOptionItemException or an  InvalidProductOptionValueItemException.  custom properties in the form c_&lt;CUSTOM_NAME&gt;: the custom property must correspond to a custom  attribute (&lt;CUSTOM_NAME&gt;) defined for ProductLineItem. The value of this property must be valid for the  type of custom attribute defined for ProductLineItem.  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    postBasketsByIDItemsWithHttpInfo(body, basketId) {
      let postBody = body;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds new items to a basket.  The added items are associated with the  specified shipment. If no shipment id is specified, the added items are associated with the default shipment.   Considered values from the request body, for each item are:    product_id: a valid product id. This is the id of the product to be added to the basket. If the  product is already in the basket, the API either increments the quantity of the existing product line item or  creates a new product line item, based on the site preference &#x27;Add Product Behavior&#x27;. For option products and  product bundles containing variation masters, the API creates a new product line item regardless of the site  preference.  shipment_id: a valid shipment id (optional). This is the id of the shipment in which the product item  is created.  quantity: a number between 0.01 and 999. This is the quantity of the product to order.  inventory_id: a valid inventory id (optional). This is the id of the inventory from which the item is  allocated.  bonus_discount_line_item_id: a valid bonus discount line item id (optional). This is the id of the  bonus discount line item for which the added product is a selected bonus product.  option_items/option_value_id: a valid option value id. This is an option value for an option item of  an option product.  This is only possible if the product item is an option  product. To set option values, you must specify a collection of option items in the option_items  property. These option items must contain option_id and option_value_id. Also,  the values you specify must be valid for the option product that this product item represents. Otherwise, the  server throws an InvalidProductOptionItemException or an  InvalidProductOptionValueItemException.  custom properties in the form c_&lt;CUSTOM_NAME&gt;: the custom property must correspond to a custom  attribute (&lt;CUSTOM_NAME&gt;) defined for ProductLineItem. The value of this property must be valid for the  type of custom attribute defined for ProductLineItem.  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    postBasketsByIDItems(body, basketId) {
      return this.postBasketsByIDItemsWithHttpInfo(body, basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds a note to an existing basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    postBasketsByIDNotesWithHttpInfo(body, basketId) {
      let postBody = body;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/notes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds a note to an existing basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    postBasketsByIDNotes(body, basketId) {
      return this.postBasketsByIDNotesWithHttpInfo(body, basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds a payment instrument to a basket.    Payment instruments are usually authorized after order creation, for example in a custom hook. The default  payment authorization process executes an authorization when a payment instrument is added to an order or  updated. See POST /orders/{order_no}/payment_instruments and PATCH  /orders/{order_no}/payment_instruments/{payment_instrument_id}.  NOTE: If CREDIT_CARD is selected as the payment_method_id, it is mandatory to provide the property card_type.  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    postBasketsByIDPaymentInstrumentsWithHttpInfo(body, basketId) {
      let postBody = body;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/payment_instruments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds a payment instrument to a basket.    Payment instruments are usually authorized after order creation, for example in a custom hook. The default  payment authorization process executes an authorization when a payment instrument is added to an order or  updated. See POST /orders/{order_no}/payment_instruments and PATCH  /orders/{order_no}/payment_instruments/{payment_instrument_id}.  NOTE: If CREDIT_CARD is selected as the payment_method_id, it is mandatory to provide the property card_type.  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    postBasketsByIDPaymentInstruments(body, basketId) {
      return this.postBasketsByIDPaymentInstrumentsWithHttpInfo(body, basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds a custom manual price adjustment to the basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    postBasketsByIDPriceAdjustmentsWithHttpInfo(body, basketId) {
      let postBody = body;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/price_adjustments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds a custom manual price adjustment to the basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    postBasketsByIDPriceAdjustments(body, basketId) {
      return this.postBasketsByIDPriceAdjustmentsWithHttpInfo(body, basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new shipment for a basket.    The created shipment is initialized with values provided in the body  document and can be updated with further data API calls. Considered from  the body are the following properties if specified:    the id  the shipping address  the shipping method  gift boolean flag  gift message  custom properties  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    postBasketsByIDShipmentsWithHttpInfo(body, basketId) {
      let postBody = body;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/shipments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new shipment for a basket.    The created shipment is initialized with values provided in the body  document and can be updated with further data API calls. Considered from  the body are the following properties if specified:    the id  the shipping address  the shipping method  gift boolean flag  gift message  custom properties  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    postBasketsByIDShipments(body, basketId) {
      return this.postBasketsByIDShipmentsWithHttpInfo(body, basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new basket based on a basket reference.    The returned basket will be a copy of the basket in the reference. The basket in the reference must be a basket  of an anonymous customer and the provided customer_id in the reference must match the anonymous customer in the  basket. In case customer_id not matching a BasketNotFoundException will be returned as fault. All personal data  like payment instruments and coupons will not be copied over to the new basket.  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    postBasketsReferenceWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/reference', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new basket based on a basket reference.    The returned basket will be a copy of the basket in the reference. The basket in the reference must be a basket  of an anonymous customer and the provided customer_id in the reference must match the anonymous customer in the  basket. In case customer_id not matching a BasketNotFoundException will be returned as fault. All personal data  like payment instruments and coupons will not be copied over to the new basket.  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    postBasketsReference(body) {
      return this.postBasketsReferenceWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Marks a basket as an agent basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    putBasketsByIDAgentWithHttpInfo(basketId) {
      let postBody = null;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/agent', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Marks a basket as an agent basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    putBasketsByIDAgent(basketId) {
      return this.putBasketsByIDAgentWithHttpInfo(basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets the billing address of a basket.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    putBasketsByIDBillingAddressWithHttpInfo(basketId, opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
        'use_as_shipping': opts['useAsShipping'],
        'customer_address_id': opts['customerAddressId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/billing_address', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sets the billing address of a basket.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    putBasketsByIDBillingAddress(basketId, opts) {
      return this.putBasketsByIDBillingAddressWithHttpInfo(basketId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets customer information for an existing basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    putBasketsByIDCustomerWithHttpInfo(body, basketId) {
      let postBody = body;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/customer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sets customer information for an existing basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    putBasketsByIDCustomer(body, basketId) {
      return this.putBasketsByIDCustomerWithHttpInfo(body, basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets a shipping address of a specific shipment of a basket.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    putBasketsByIDShipmentsByIDShippingAddressWithHttpInfo(body, basketId, shipmentId, opts) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'basket_id': basketId,
        'shipment_id': shipmentId
      };
      let queryParams = {
        'use_as_billing': opts['useAsBilling'],
        'customer_address_id': opts['customerAddressId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/shipments/{shipment_id}/shipping_address', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sets a shipping address of a specific shipment of a basket.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    putBasketsByIDShipmentsByIDShippingAddress(body, basketId, shipmentId, opts) {
      return this.putBasketsByIDShipmentsByIDShippingAddressWithHttpInfo(body, basketId, shipmentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets a shipping method to a specific shipment of a basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    putBasketsByIDShipmentsByIDShippingMethodWithHttpInfo(body, basketId, shipmentId) {
      let postBody = body;

      let pathParams = {
        'basket_id': basketId,
        'shipment_id': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/shipments/{shipment_id}/shipping_method', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sets a shipping method to a specific shipment of a basket.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    putBasketsByIDShipmentsByIDShippingMethod(body, basketId, shipmentId) {
      return this.putBasketsByIDShipmentsByIDShippingMethodWithHttpInfo(body, basketId, shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Marks a basket as storefront basket.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Basket} and HTTP response
     */
    putBasketsByIDStorefrontWithHttpInfo(basketId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'basket_id': basketId
      };
      let queryParams = {
        'exchange': opts['exchange']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/storefront', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Marks a basket as storefront basket.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Basket}
     */
    putBasketsByIDStorefront(basketId, opts) {
      return this.putBasketsByIDStorefrontWithHttpInfo(basketId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
