/**
 * Shop API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Promotion', 'model/PromotionResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Promotion'), require('../model/PromotionResult'));
  } else {
    // Browser globals (root is window)
    if (!root.ShopApi) {
      root.ShopApi = {};
    }
    root.ShopApi.PromotionsApi = factory(root.ShopApi.ApiClient, root.ShopApi.Promotion, root.ShopApi.PromotionResult);
  }
}(this, function(ApiClient, Promotion, PromotionResult) {
  'use strict';

  /**
   * Promotions service.
   * @module api/PromotionsApi
   * @version 20.8
   */

  /**
   * Constructs a new PromotionsApi. 
   * @alias module:api/PromotionsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Handles get promotion by filter criteria Returns an array of enabled promotions matching specified filter  criteria. In the request URL, you must provide a campaign_id parameter, and you can optionally specify a date  range by providing start_date and end_date parameters. Both parameters are required to specify a date range:  omitting one causes the server to return a MissingParameterException fault. Each request returns only enabled  promotions; the server does not consider promotion qualifiers or schedules.
     * @param {String} campaignId Find the promotions assigned to this campaign (mandatory)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate The start date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
     * @param {String} opts.endDate The end date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
     * @param {String} opts.currency The currency mnemonic specified for price
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromotionResult} and HTTP response
     */
    this.getPromotionsWithHttpInfo = function(campaignId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getPromotions");
      }

      var pathParams = {
      };
      var queryParams = {
        'campaign_id': campaignId,
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = PromotionResult;
      return this.apiClient.callApi(
        '/promotions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Handles get promotion by filter criteria Returns an array of enabled promotions matching specified filter  criteria. In the request URL, you must provide a campaign_id parameter, and you can optionally specify a date  range by providing start_date and end_date parameters. Both parameters are required to specify a date range:  omitting one causes the server to return a MissingParameterException fault. Each request returns only enabled  promotions; the server does not consider promotion qualifiers or schedules.
     * @param {String} campaignId Find the promotions assigned to this campaign (mandatory)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate The start date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
     * @param {String} opts.endDate The end date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
     * @param {String} opts.currency The currency mnemonic specified for price
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromotionResult}
     */
    this.getPromotions = function(campaignId, opts) {
      return this.getPromotionsWithHttpInfo(campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns an enabled promotion using a specified id. Each request returns a response only for an enabled promotion;  the server does not consider promotion qualifiers or schedules.
     * @param {String} id The id of the requested promotion.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Promotion} and HTTP response
     */
    this.getPromotionsByIDWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPromotionsByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'locale': opts['locale'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Promotion;
      return this.apiClient.callApi(
        '/promotions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns an enabled promotion using a specified id. Each request returns a response only for an enabled promotion;  the server does not consider promotion qualifiers or schedules.
     * @param {String} id The id of the requested promotion.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Promotion}
     */
    this.getPromotionsByID = function(id, opts) {
      return this.getPromotionsByIDWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Array.<String>} ids 
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromotionResult} and HTTP response
     */
    this.getPromotionsByIDsWithHttpInfo = function(ids, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getPromotionsByIDs");
      }

      var pathParams = {
        'ids': ids
      };
      var queryParams = {
        'locale': opts['locale'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = PromotionResult;
      return this.apiClient.callApi(
        '/promotions/({ids})', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Array.<String>} ids 
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromotionResult}
     */
    this.getPromotionsByIDs = function(ids, opts) {
      return this.getPromotionsByIDsWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
