/**
 * Shop API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuthRequest', 'model/BasketsResult', 'model/Customer', 'model/CustomerAddress', 'model/CustomerAddressResult', 'model/CustomerOrderResult', 'model/CustomerPaymentInstrument', 'model/CustomerPaymentInstrumentRequest', 'model/CustomerPaymentInstrumentResult', 'model/CustomerProductList', 'model/CustomerProductListItem', 'model/CustomerProductListItemPurchase', 'model/CustomerProductListItemPurchaseResult', 'model/CustomerProductListItemResult', 'model/CustomerProductListResult', 'model/CustomerRegistration', 'model/PasswordChangeRequest', 'model/PasswordReset', 'model/ResetPasswordRequest', 'model/ResetPasswordTokenRequest', 'model/ResetPasswordTokenResult', 'model/TrustedSystemAuthRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AuthRequest'), require('../model/BasketsResult'), require('../model/Customer'), require('../model/CustomerAddress'), require('../model/CustomerAddressResult'), require('../model/CustomerOrderResult'), require('../model/CustomerPaymentInstrument'), require('../model/CustomerPaymentInstrumentRequest'), require('../model/CustomerPaymentInstrumentResult'), require('../model/CustomerProductList'), require('../model/CustomerProductListItem'), require('../model/CustomerProductListItemPurchase'), require('../model/CustomerProductListItemPurchaseResult'), require('../model/CustomerProductListItemResult'), require('../model/CustomerProductListResult'), require('../model/CustomerRegistration'), require('../model/PasswordChangeRequest'), require('../model/PasswordReset'), require('../model/ResetPasswordRequest'), require('../model/ResetPasswordTokenRequest'), require('../model/ResetPasswordTokenResult'), require('../model/TrustedSystemAuthRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.ShopApi) {
      root.ShopApi = {};
    }
    root.ShopApi.CustomersApi = factory(root.ShopApi.ApiClient, root.ShopApi.AuthRequest, root.ShopApi.BasketsResult, root.ShopApi.Customer, root.ShopApi.CustomerAddress, root.ShopApi.CustomerAddressResult, root.ShopApi.CustomerOrderResult, root.ShopApi.CustomerPaymentInstrument, root.ShopApi.CustomerPaymentInstrumentRequest, root.ShopApi.CustomerPaymentInstrumentResult, root.ShopApi.CustomerProductList, root.ShopApi.CustomerProductListItem, root.ShopApi.CustomerProductListItemPurchase, root.ShopApi.CustomerProductListItemPurchaseResult, root.ShopApi.CustomerProductListItemResult, root.ShopApi.CustomerProductListResult, root.ShopApi.CustomerRegistration, root.ShopApi.PasswordChangeRequest, root.ShopApi.PasswordReset, root.ShopApi.ResetPasswordRequest, root.ShopApi.ResetPasswordTokenRequest, root.ShopApi.ResetPasswordTokenResult, root.ShopApi.TrustedSystemAuthRequest);
  }
}(this, function(ApiClient, AuthRequest, BasketsResult, Customer, CustomerAddress, CustomerAddressResult, CustomerOrderResult, CustomerPaymentInstrument, CustomerPaymentInstrumentRequest, CustomerPaymentInstrumentResult, CustomerProductList, CustomerProductListItem, CustomerProductListItemPurchase, CustomerProductListItemPurchaseResult, CustomerProductListItemResult, CustomerProductListResult, CustomerRegistration, PasswordChangeRequest, PasswordReset, ResetPasswordRequest, ResetPasswordTokenRequest, ResetPasswordTokenResult, TrustedSystemAuthRequest) {
  'use strict';

  /**
   * Customers service.
   * @module api/CustomersApi
   * @version 20.4
   */

  /**
   * Constructs a new CustomersApi. 
   * @alias module:api/CustomersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Invalidates the JWT provided in the header.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization the JWT
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCustomersAuthWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/customers/auth', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Invalidates the JWT provided in the header.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization the JWT
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCustomersAuth = function(opts) {
      return this.deleteCustomersAuthWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a customer's address by address name.
     * @param {String} customerId the id of the customer to delete the address for
     * @param {String} addressName the name of the address to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCustomersByIDAddressesByIDWithHttpInfo = function(customerId, addressName) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomersByIDAddressesByID");
      }
      // verify the required parameter 'addressName' is set
      if (addressName === undefined || addressName === null) {
        throw new Error("Missing the required parameter 'addressName' when calling deleteCustomersByIDAddressesByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'address_name': addressName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/customers/{customer_id}/addresses/{address_name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a customer's address by address name.
     * @param {String} customerId the id of the customer to delete the address for
     * @param {String} addressName the name of the address to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCustomersByIDAddressesByID = function(customerId, addressName) {
      return this.deleteCustomersByIDAddressesByIDWithHttpInfo(customerId, addressName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a customer's payment instrument.
     * @param {String} customerId the id of the customer to delete the payment instrument for
     * @param {String} paymentInstrumentId the id of the payment instrument to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCustomersByIDPaymentInstrumentsByIDWithHttpInfo = function(customerId, paymentInstrumentId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomersByIDPaymentInstrumentsByID");
      }
      // verify the required parameter 'paymentInstrumentId' is set
      if (paymentInstrumentId === undefined || paymentInstrumentId === null) {
        throw new Error("Missing the required parameter 'paymentInstrumentId' when calling deleteCustomersByIDPaymentInstrumentsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'payment_instrument_id': paymentInstrumentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/customers/{customer_id}/payment_instruments/{payment_instrument_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a customer's payment instrument.
     * @param {String} customerId the id of the customer to delete the payment instrument for
     * @param {String} paymentInstrumentId the id of the payment instrument to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCustomersByIDPaymentInstrumentsByID = function(customerId, paymentInstrumentId) {
      return this.deleteCustomersByIDPaymentInstrumentsByIDWithHttpInfo(customerId, paymentInstrumentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a customer product list.
     * @param {String} customerId The customer id.
     * @param {String} listId The product list id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCustomersByIDProductListsByIDWithHttpInfo = function(customerId, listId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomersByIDProductListsByID");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling deleteCustomersByIDProductListsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/customers/{customer_id}/product_lists/{list_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a customer product list.
     * @param {String} customerId The customer id.
     * @param {String} listId The product list id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCustomersByIDProductListsByID = function(customerId, listId) {
      return this.deleteCustomersByIDProductListsByIDWithHttpInfo(customerId, listId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes an item from a customer product list.
     * @param {String} customerId The id of the owner of the product list
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCustomersByIDProductListsByIDItemsByIDWithHttpInfo = function(customerId, listId, itemId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomersByIDProductListsByIDItemsByID");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling deleteCustomersByIDProductListsByIDItemsByID");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteCustomersByIDProductListsByIDItemsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/customers/{customer_id}/product_lists/{list_id}/items/{item_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Removes an item from a customer product list.
     * @param {String} customerId The id of the owner of the product list
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCustomersByIDProductListsByIDItemsByID = function(customerId, listId, itemId) {
      return this.deleteCustomersByIDProductListsByIDItemsByIDWithHttpInfo(customerId, listId, itemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a customer.
     * @param {String} customerId The customer id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.getCustomersByIDWithHttpInfo = function(customerId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByID");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Customer;
      return this.apiClient.callApi(
        '/customers/{customer_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a customer.
     * @param {String} customerId The customer id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.getCustomersByID = function(customerId, opts) {
      return this.getCustomersByIDWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a sorted pageable list of all customer addresses in the address book. The default page size is 10  customer addresses. The addresses are sorted so that the preferred address is always sorted first. The remaining  addresses are sorted alphabetically by ID.    When the customer cannot be found CustomerNotFoundException  is thrown in a case of an agent but an empty result list is returned in a case of JWT.
     * @param {String} customerId The customer uuid
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerAddressResult} and HTTP response
     */
    this.getCustomersByIDAddressesWithHttpInfo = function(customerId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDAddresses");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerAddressResult;
      return this.apiClient.callApi(
        '/customers/{customer_id}/addresses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a sorted pageable list of all customer addresses in the address book. The default page size is 10  customer addresses. The addresses are sorted so that the preferred address is always sorted first. The remaining  addresses are sorted alphabetically by ID.    When the customer cannot be found CustomerNotFoundException  is thrown in a case of an agent but an empty result list is returned in a case of JWT.
     * @param {String} customerId The customer uuid
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerAddressResult}
     */
    this.getCustomersByIDAddresses = function(customerId, opts) {
      return this.getCustomersByIDAddressesWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a customer's address by address name.
     * @param {String} customerId the id of the customer to retrieve the address for
     * @param {String} addressName the name of the address to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerAddress} and HTTP response
     */
    this.getCustomersByIDAddressesByIDWithHttpInfo = function(customerId, addressName) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDAddressesByID");
      }
      // verify the required parameter 'addressName' is set
      if (addressName === undefined || addressName === null) {
        throw new Error("Missing the required parameter 'addressName' when calling getCustomersByIDAddressesByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'address_name': addressName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerAddress;
      return this.apiClient.callApi(
        '/customers/{customer_id}/addresses/{address_name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a customer's address by address name.
     * @param {String} customerId the id of the customer to retrieve the address for
     * @param {String} addressName the name of the address to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerAddress}
     */
    this.getCustomersByIDAddressesByID = function(customerId, addressName) {
      return this.getCustomersByIDAddressesByIDWithHttpInfo(customerId, addressName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the baskets of a customer.
     * @param {String} customerId the id of the customer to retrieve the baskets for
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BasketsResult} and HTTP response
     */
    this.getCustomersByIDBasketsWithHttpInfo = function(customerId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDBaskets");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = BasketsResult;
      return this.apiClient.callApi(
        '/customers/{customer_id}/baskets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets the baskets of a customer.
     * @param {String} customerId the id of the customer to retrieve the baskets for
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BasketsResult}
     */
    this.getCustomersByIDBaskets = function(customerId) {
      return this.getCustomersByIDBasketsWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a pageable list of all customer's orders. The default page size is 10.
     * @param {String} customerId the customer uuid
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {Boolean} opts.crossSites 
     * @param {String} opts.from 
     * @param {String} opts.until 
     * @param {String} opts.status 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerOrderResult} and HTTP response
     */
    this.getCustomersByIDOrdersWithHttpInfo = function(customerId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDOrders");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'cross-sites': opts['crossSites'],
        'from': opts['from'],
        'until': opts['until'],
        'status': opts['status'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerOrderResult;
      return this.apiClient.callApi(
        '/customers/{customer_id}/orders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a pageable list of all customer's orders. The default page size is 10.
     * @param {String} customerId the customer uuid
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {Boolean} opts.crossSites 
     * @param {String} opts.from 
     * @param {String} opts.until 
     * @param {String} opts.status 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerOrderResult}
     */
    this.getCustomersByIDOrders = function(customerId, opts) {
      return this.getCustomersByIDOrdersWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets customer payment instruments for an customer.  Can be limited to a specific payment  method by providing query parameter payment_method_id.    When the customer cannot be found CustomerNotFoundException  is thrown in a case of an agent but an empty result list is returned in a case of JWT.
     * @param {String} customerId the id of the customer to retrieve the payment instruments for
     * @param {Object} opts Optional parameters
     * @param {String} opts.paymentMethodId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerPaymentInstrumentResult} and HTTP response
     */
    this.getCustomersByIDPaymentInstrumentsWithHttpInfo = function(customerId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDPaymentInstruments");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'payment_method_id': opts['paymentMethodId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerPaymentInstrumentResult;
      return this.apiClient.callApi(
        '/customers/{customer_id}/payment_instruments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets customer payment instruments for an customer.  Can be limited to a specific payment  method by providing query parameter payment_method_id.    When the customer cannot be found CustomerNotFoundException  is thrown in a case of an agent but an empty result list is returned in a case of JWT.
     * @param {String} customerId the id of the customer to retrieve the payment instruments for
     * @param {Object} opts Optional parameters
     * @param {String} opts.paymentMethodId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerPaymentInstrumentResult}
     */
    this.getCustomersByIDPaymentInstruments = function(customerId, opts) {
      return this.getCustomersByIDPaymentInstrumentsWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a customer's payment instrument by its id.
     * @param {String} customerId the id of the customer to retrieve the payment instrument for
     * @param {String} paymentInstrumentId the id of the payment instrument to be retrievedCustomer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerPaymentInstrument} and HTTP response
     */
    this.getCustomersByIDPaymentInstrumentsByIDWithHttpInfo = function(customerId, paymentInstrumentId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDPaymentInstrumentsByID");
      }
      // verify the required parameter 'paymentInstrumentId' is set
      if (paymentInstrumentId === undefined || paymentInstrumentId === null) {
        throw new Error("Missing the required parameter 'paymentInstrumentId' when calling getCustomersByIDPaymentInstrumentsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'payment_instrument_id': paymentInstrumentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerPaymentInstrument;
      return this.apiClient.callApi(
        '/customers/{customer_id}/payment_instruments/{payment_instrument_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a customer's payment instrument by its id.
     * @param {String} customerId the id of the customer to retrieve the payment instrument for
     * @param {String} paymentInstrumentId the id of the payment instrument to be retrievedCustomer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerPaymentInstrument}
     */
    this.getCustomersByIDPaymentInstrumentsByID = function(customerId, paymentInstrumentId) {
      return this.getCustomersByIDPaymentInstrumentsByIDWithHttpInfo(customerId, paymentInstrumentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all customer product lists.
     * @param {String} customerId The customer id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerProductListResult} and HTTP response
     */
    this.getCustomersByIDProductListsWithHttpInfo = function(customerId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductLists");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListResult;
      return this.apiClient.callApi(
        '/customers/{customer_id}/product_lists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns all customer product lists.
     * @param {String} customerId The customer id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerProductListResult}
     */
    this.getCustomersByIDProductLists = function(customerId, opts) {
      return this.getCustomersByIDProductListsWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a customer product list of the given customer.
     * @param {String} customerId The customer id.
     * @param {String} listId The product list id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerProductList} and HTTP response
     */
    this.getCustomersByIDProductListsByIDWithHttpInfo = function(customerId, listId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductListsByID");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomersByIDProductListsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductList;
      return this.apiClient.callApi(
        '/customers/{customer_id}/product_lists/{list_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a customer product list of the given customer.
     * @param {String} customerId The customer id.
     * @param {String} listId The product list id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerProductList}
     */
    this.getCustomersByIDProductListsByID = function(customerId, listId, opts) {
      return this.getCustomersByIDProductListsByIDWithHttpInfo(customerId, listId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a pageable list of all items of a customer's product list. The default page size is 10.
     * @param {String} customerId The id of the customer to retrieve the product list items for.
     * @param {String} listId The id of the product list.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerProductListItemResult} and HTTP response
     */
    this.getCustomersByIDProductListsByIDItemsWithHttpInfo = function(customerId, listId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductListsByIDItems");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomersByIDProductListsByIDItems");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItemResult;
      return this.apiClient.callApi(
        '/customers/{customer_id}/product_lists/{list_id}/items', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a pageable list of all items of a customer's product list. The default page size is 10.
     * @param {String} customerId The id of the customer to retrieve the product list items for.
     * @param {String} listId The id of the product list.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerProductListItemResult}
     */
    this.getCustomersByIDProductListsByIDItems = function(customerId, listId, opts) {
      return this.getCustomersByIDProductListsByIDItemsWithHttpInfo(customerId, listId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns an item of a customer product list.
     * @param {String} customerId The id of the customer to retrieve the product list items for.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to retrieve.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerProductListItem} and HTTP response
     */
    this.getCustomersByIDProductListsByIDItemsByIDWithHttpInfo = function(customerId, listId, itemId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductListsByIDItemsByID");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomersByIDProductListsByIDItemsByID");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getCustomersByIDProductListsByIDItemsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItem;
      return this.apiClient.callApi(
        '/customers/{customer_id}/product_lists/{list_id}/items/{item_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns an item of a customer product list.
     * @param {String} customerId The id of the customer to retrieve the product list items for.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to retrieve.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerProductListItem}
     */
    this.getCustomersByIDProductListsByIDItemsByID = function(customerId, listId, itemId, opts) {
      return this.getCustomersByIDProductListsByIDItemsByIDWithHttpInfo(customerId, listId, itemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of all purchases of an item from a customer's product list.
     * @param {String} customerId The id of the customer to retrieve the product list item purchases for.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to retrieve from.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerProductListItemPurchaseResult} and HTTP response
     */
    this.getCustomersByIDProductListsByIDItemsByIDPurchasesWithHttpInfo = function(customerId, listId, itemId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductListsByIDItemsByIDPurchases");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomersByIDProductListsByIDItemsByIDPurchases");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getCustomersByIDProductListsByIDItemsByIDPurchases");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItemPurchaseResult;
      return this.apiClient.callApi(
        '/customers/{customer_id}/product_lists/{list_id}/items/{item_id}/purchases', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a list of all purchases of an item from a customer's product list.
     * @param {String} customerId The id of the customer to retrieve the product list item purchases for.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to retrieve from.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerProductListItemPurchaseResult}
     */
    this.getCustomersByIDProductListsByIDItemsByIDPurchases = function(customerId, listId, itemId) {
      return this.getCustomersByIDProductListsByIDItemsByIDPurchasesWithHttpInfo(customerId, listId, itemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a purchase of an item from a customer's product list.
     * @param {String} customerId The id of the customer to retrieve the product list items for.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to retrieve.
     * @param {String} purchaseId The id of the product list item purchase to retrieve.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerProductListItemPurchase} and HTTP response
     */
    this.getCustomersByIDProductListsByIDItemsByIDPurchasesByIDWithHttpInfo = function(customerId, listId, itemId, purchaseId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }
      // verify the required parameter 'purchaseId' is set
      if (purchaseId === undefined || purchaseId === null) {
        throw new Error("Missing the required parameter 'purchaseId' when calling getCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId,
        'purchase_id': purchaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItemPurchase;
      return this.apiClient.callApi(
        '/customers/{customer_id}/product_lists/{list_id}/items/{item_id}/purchases/{purchase_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a purchase of an item from a customer's product list.
     * @param {String} customerId The id of the customer to retrieve the product list items for.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to retrieve.
     * @param {String} purchaseId The id of the product list item purchase to retrieve.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerProductListItemPurchase}
     */
    this.getCustomersByIDProductListsByIDItemsByIDPurchasesByID = function(customerId, listId, itemId, purchaseId) {
      return this.getCustomersByIDProductListsByIDItemsByIDPurchasesByIDWithHttpInfo(customerId, listId, itemId, purchaseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a customer.
     * @param {String} customerId the customer id
     * @param {module:model/Customer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.patchCustomersByIDWithHttpInfo = function(customerId, body) {
      var postBody = body;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling patchCustomersByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomersByID");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Customer;
      return this.apiClient.callApi(
        '/customers/{customer_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a customer.
     * @param {String} customerId the customer id
     * @param {module:model/Customer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.patchCustomersByID = function(customerId, body) {
      return this.patchCustomersByIDWithHttpInfo(customerId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a customer's address by address name.
     * @param {String} customerId the id of the customer to update the address for
     * @param {String} addressName the name of the address to update
     * @param {module:model/CustomerAddress} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerAddress} and HTTP response
     */
    this.patchCustomersByIDAddressesByIDWithHttpInfo = function(customerId, addressName, body) {
      var postBody = body;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling patchCustomersByIDAddressesByID");
      }
      // verify the required parameter 'addressName' is set
      if (addressName === undefined || addressName === null) {
        throw new Error("Missing the required parameter 'addressName' when calling patchCustomersByIDAddressesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomersByIDAddressesByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'address_name': addressName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerAddress;
      return this.apiClient.callApi(
        '/customers/{customer_id}/addresses/{address_name}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a customer's address by address name.
     * @param {String} customerId the id of the customer to update the address for
     * @param {String} addressName the name of the address to update
     * @param {module:model/CustomerAddress} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerAddress}
     */
    this.patchCustomersByIDAddressesByID = function(customerId, addressName, body) {
      return this.patchCustomersByIDAddressesByIDWithHttpInfo(customerId, addressName, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Changes a product list. Changeable properties are the name, description and if the list is public.
     * @param {String} customerId The customer id.
     * @param {String} listId The product list id.
     * @param {module:model/CustomerProductList} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerProductList} and HTTP response
     */
    this.patchCustomersByIDProductListsByIDWithHttpInfo = function(customerId, listId, body) {
      var postBody = body;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling patchCustomersByIDProductListsByID");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling patchCustomersByIDProductListsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomersByIDProductListsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductList;
      return this.apiClient.callApi(
        '/customers/{customer_id}/product_lists/{list_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Changes a product list. Changeable properties are the name, description and if the list is public.
     * @param {String} customerId The customer id.
     * @param {String} listId The product list id.
     * @param {module:model/CustomerProductList} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerProductList}
     */
    this.patchCustomersByIDProductListsByID = function(customerId, listId, body) {
      return this.patchCustomersByIDProductListsByIDWithHttpInfo(customerId, listId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates an item of a customer's product list.  Considered values from the request body are:    priority: This is the priority of the customer's product list item.  public: This is the flag whether the customer's product list item is public.  quantity: used for product item type only. This is the quantity of  the customer's product list item.  custom properties in the form c_<CUSTOM_NAME>: the custom property  must correspond to a custom attribute (<CUSTOM_NAME>) defined for ProductListItem.  The value of this property must be valid for the type of custom attribute defined for ProductListItem.  
     * @param {String} customerId The id of the owner of the product list.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to update.
     * @param {module:model/CustomerProductListItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerProductListItem} and HTTP response
     */
    this.patchCustomersByIDProductListsByIDItemsByIDWithHttpInfo = function(customerId, listId, itemId, body) {
      var postBody = body;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling patchCustomersByIDProductListsByIDItemsByID");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling patchCustomersByIDProductListsByIDItemsByID");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling patchCustomersByIDProductListsByIDItemsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomersByIDProductListsByIDItemsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItem;
      return this.apiClient.callApi(
        '/customers/{customer_id}/product_lists/{list_id}/items/{item_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates an item of a customer's product list.  Considered values from the request body are:    priority: This is the priority of the customer's product list item.  public: This is the flag whether the customer's product list item is public.  quantity: used for product item type only. This is the quantity of  the customer's product list item.  custom properties in the form c_<CUSTOM_NAME>: the custom property  must correspond to a custom attribute (<CUSTOM_NAME>) defined for ProductListItem.  The value of this property must be valid for the type of custom attribute defined for ProductListItem.  
     * @param {String} customerId The id of the owner of the product list.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to update.
     * @param {module:model/CustomerProductListItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerProductListItem}
     */
    this.patchCustomersByIDProductListsByIDItemsByID = function(customerId, listId, itemId, body) {
      return this.patchCustomersByIDProductListsByIDItemsByIDWithHttpInfo(customerId, listId, itemId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a purchase of an item from a customer's product list.  Considered values from the request body are:    custom properties in the form c_<CUSTOM_NAME>: the custom property  must correspond to a custom attribute (<CUSTOM_NAME>) defined for ProductListItemPurchase.  The value of this property must be valid for the type of custom attribute defined for ProductListItemPurchase.  
     * @param {String} customerId The id of the customer to retrieve the product list item purchases for.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to retrieve.
     * @param {String} purchaseId The id of the product list item purchase to retrieve.
     * @param {module:model/CustomerProductListItemPurchase} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerProductListItemPurchase} and HTTP response
     */
    this.patchCustomersByIDProductListsByIDItemsByIDPurchasesByIDWithHttpInfo = function(customerId, listId, itemId, purchaseId, body) {
      var postBody = body;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling patchCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling patchCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling patchCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }
      // verify the required parameter 'purchaseId' is set
      if (purchaseId === undefined || purchaseId === null) {
        throw new Error("Missing the required parameter 'purchaseId' when calling patchCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId,
        'purchase_id': purchaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItemPurchase;
      return this.apiClient.callApi(
        '/customers/{customer_id}/product_lists/{list_id}/items/{item_id}/purchases/{purchase_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a purchase of an item from a customer's product list.  Considered values from the request body are:    custom properties in the form c_<CUSTOM_NAME>: the custom property  must correspond to a custom attribute (<CUSTOM_NAME>) defined for ProductListItemPurchase.  The value of this property must be valid for the type of custom attribute defined for ProductListItemPurchase.  
     * @param {String} customerId The id of the customer to retrieve the product list item purchases for.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to retrieve.
     * @param {String} purchaseId The id of the product list item purchase to retrieve.
     * @param {module:model/CustomerProductListItemPurchase} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerProductListItemPurchase}
     */
    this.patchCustomersByIDProductListsByIDItemsByIDPurchasesByID = function(customerId, listId, itemId, purchaseId, body) {
      return this.patchCustomersByIDProductListsByIDItemsByIDPurchasesByIDWithHttpInfo(customerId, listId, itemId, purchaseId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Registers a customer.  The mandatory data are the credentials and profile last name and email.  When using OAuth the password in the request must not be set, otherwise an InvalidPasswordException will be thrown.  When using JWT the password is required.
     * @param {module:model/CustomerRegistration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.postCustomersWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomers");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Customer;
      return this.apiClient.callApi(
        '/customers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Registers a customer.  The mandatory data are the credentials and profile last name and email.  When using OAuth the password in the request must not be set, otherwise an InvalidPasswordException will be thrown.  When using JWT the password is required.
     * @param {module:model/CustomerRegistration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.postCustomers = function(body) {
      return this.postCustomersWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Obtains a new JWT (JSON Web Token) for a guest or registered  customer. Tokens are returned as a HTTP Authorization:Bearer response  header entry. These kinds of request are supported, as specified by the  type:    Type guest - creates a new guest (non-authenticated) customer  and returns a token for the customer.  Type credentials - authenticates credentials passed in the  HTTP Authorization:Basic request header, returning a token for a  successfully authenticated customer, otherwise it throws an  AuthenticationFailedException.  Type session - authenticates the customer (anonymous or registered)  based on the dwsid and dwsecuretoken cookies. It returns a token for a  successfully authenticated customer, otherwise it throws an  AuthenticationFailedException.  Type refresh - examines the token passed in the HTTP  Authorization:Bearer request header and when valid returns a new token  with an updated expiry time.     For a request of type credentials:    Updates profile attributes for the customer (for example,  \"last-visited\").  Handles the maximum number of failed login attempts.    For a request of type session:    The session and corresponding dwsecuretoken must be active and valid. An expired session can't be  used. The dwsecuretoken cookie must have been used for at least one  previous HTTPS request with the same dwsid cookie.  Does not touch profile attributes for the registered customer (for example,  \"last-visited\"), since this is not a real login.  Returns different tokens for multiple requests with the same session id. Means, there should be  only one call per session.      About JWT The token contains 3 sections:    the header section (specifies token type and algorithm used)  the payload section (contains customer information, client id,  issue and expiration time)  finally the signature section records the token signature.    A token is created and returned to the client whenever a registered  customer logs in (type \"credentials\") or a guest customer requests it (type  \"guest\"). The token is returned in the response header as   Authorization: Bearer --token--    The client has to include the token in the request header as   Authorization: Bearer --token--   in any follow up request. The server declines any follow up requests  without a token or which cannot be verified based on the token signature  or expiration time. A token nearing its expiration time should be  exchanged for a new one (type \"refresh\").    See \"API Usage > JWT\" for more details on using JWT as an authentication  mechanism.
     * @param {module:model/AuthRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization              Authorization:Basic for type credentials             Authorization:Bearer for type refresh             
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.postCustomersAuthWithHttpInfo = function(body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersAuth");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Customer;
      return this.apiClient.callApi(
        '/customers/auth', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Obtains a new JWT (JSON Web Token) for a guest or registered  customer. Tokens are returned as a HTTP Authorization:Bearer response  header entry. These kinds of request are supported, as specified by the  type:    Type guest - creates a new guest (non-authenticated) customer  and returns a token for the customer.  Type credentials - authenticates credentials passed in the  HTTP Authorization:Basic request header, returning a token for a  successfully authenticated customer, otherwise it throws an  AuthenticationFailedException.  Type session - authenticates the customer (anonymous or registered)  based on the dwsid and dwsecuretoken cookies. It returns a token for a  successfully authenticated customer, otherwise it throws an  AuthenticationFailedException.  Type refresh - examines the token passed in the HTTP  Authorization:Bearer request header and when valid returns a new token  with an updated expiry time.     For a request of type credentials:    Updates profile attributes for the customer (for example,  \"last-visited\").  Handles the maximum number of failed login attempts.    For a request of type session:    The session and corresponding dwsecuretoken must be active and valid. An expired session can't be  used. The dwsecuretoken cookie must have been used for at least one  previous HTTPS request with the same dwsid cookie.  Does not touch profile attributes for the registered customer (for example,  \"last-visited\"), since this is not a real login.  Returns different tokens for multiple requests with the same session id. Means, there should be  only one call per session.      About JWT The token contains 3 sections:    the header section (specifies token type and algorithm used)  the payload section (contains customer information, client id,  issue and expiration time)  finally the signature section records the token signature.    A token is created and returned to the client whenever a registered  customer logs in (type \"credentials\") or a guest customer requests it (type  \"guest\"). The token is returned in the response header as   Authorization: Bearer --token--    The client has to include the token in the request header as   Authorization: Bearer --token--   in any follow up request. The server declines any follow up requests  without a token or which cannot be verified based on the token signature  or expiration time. A token nearing its expiration time should be  exchanged for a new one (type \"refresh\").    See \"API Usage > JWT\" for more details on using JWT as an authentication  mechanism.
     * @param {module:model/AuthRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization              Authorization:Basic for type credentials             Authorization:Bearer for type refresh             
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.postCustomersAuth = function(body, opts) {
      return this.postCustomersAuthWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Obtain the JWTs for registered customers whose credentials are stored using a third party system.              Accepts login_id and client_id      Returns a customer object in the response body, and the JWT generated against the client_id in the response header.      
     * @param {module:model/TrustedSystemAuthRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.postCustomersAuthTrustedsystemWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersAuthTrustedsystem");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Customer;
      return this.apiClient.callApi(
        '/customers/auth/trustedsystem', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Obtain the JWTs for registered customers whose credentials are stored using a third party system.              Accepts login_id and client_id      Returns a customer object in the response body, and the JWT generated against the client_id in the response header.      
     * @param {module:model/TrustedSystemAuthRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.postCustomersAuthTrustedsystem = function(body) {
      return this.postCustomersAuthTrustedsystemWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new address with the given name for the given customer.
     * @param {String} customerId the id of the customer to create the address for
     * @param {module:model/CustomerAddress} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerAddress} and HTTP response
     */
    this.postCustomersByIDAddressesWithHttpInfo = function(customerId, body) {
      var postBody = body;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDAddresses");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersByIDAddresses");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerAddress;
      return this.apiClient.callApi(
        '/customers/{customer_id}/addresses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new address with the given name for the given customer.
     * @param {String} customerId the id of the customer to create the address for
     * @param {module:model/CustomerAddress} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerAddress}
     */
    this.postCustomersByIDAddresses = function(customerId, body) {
      return this.postCustomersByIDAddressesWithHttpInfo(customerId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     *   Obtains a new agent on behalf token for a registered customer. Token is returned as a HTTP Authorization:Bearer  response header entry.      A token is created and returned to the client whenever an agent with Create_Order_On_Behalf_Of  permission calls the resource for a registered customer.      The token is returned in the response header as Authorization: Bearer --token--.      The client has to include the token in the request header as Authorization: Bearer --token--    in any follow up request, the agent will do on behalf of the customer.    About the order on behalf token      The token contains 3 sections:      the header section (specifies token type and algorithm used)  the payload section (contains customer information, client id, issue and expiration time)  finally the signature section records the token signature.      A token nearing its expiration time should be exchanged for a new one by calling this resource once more.  
     * @param {String} customerId specifies the customer to act on behalf of
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.postCustomersByIDAuthWithHttpInfo = function(customerId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDAuth");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Customer;
      return this.apiClient.callApi(
        '/customers/{customer_id}/auth', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     *   Obtains a new agent on behalf token for a registered customer. Token is returned as a HTTP Authorization:Bearer  response header entry.      A token is created and returned to the client whenever an agent with Create_Order_On_Behalf_Of  permission calls the resource for a registered customer.      The token is returned in the response header as Authorization: Bearer --token--.      The client has to include the token in the request header as Authorization: Bearer --token--    in any follow up request, the agent will do on behalf of the customer.    About the order on behalf token      The token contains 3 sections:      the header section (specifies token type and algorithm used)  the payload section (contains customer information, client id, issue and expiration time)  finally the signature section records the token signature.      A token nearing its expiration time should be exchanged for a new one by calling this resource once more.  
     * @param {String} customerId specifies the customer to act on behalf of
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.postCustomersByIDAuth = function(customerId) {
      return this.postCustomersByIDAuthWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Starts a password reset process. A password reset token is generated and passed together with the customer  resolved by the id provided as path parameter to a afterPOST hook. The hook  dw.ocapi.shop.customer.password_reset.afterPOST can utilize the provided reset token, for example to send a reset email.
     * @param {String} customerId the id of the customer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.postCustomersByIDPasswordResetWithHttpInfo = function(customerId) {
      var postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDPasswordReset");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/customers/{customer_id}/password_reset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Starts a password reset process. A password reset token is generated and passed together with the customer  resolved by the id provided as path parameter to a afterPOST hook. The hook  dw.ocapi.shop.customer.password_reset.afterPOST can utilize the provided reset token, for example to send a reset email.
     * @param {String} customerId the id of the customer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.postCustomersByIDPasswordReset = function(customerId) {
      return this.postCustomersByIDPasswordResetWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds a payment instrument to a customer information.
     * @param {String} customerId the id of the customer
     * @param {module:model/CustomerPaymentInstrumentRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerPaymentInstrument} and HTTP response
     */
    this.postCustomersByIDPaymentInstrumentsWithHttpInfo = function(customerId, body) {
      var postBody = body;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDPaymentInstruments");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersByIDPaymentInstruments");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerPaymentInstrument;
      return this.apiClient.callApi(
        '/customers/{customer_id}/payment_instruments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Adds a payment instrument to a customer information.
     * @param {String} customerId the id of the customer
     * @param {module:model/CustomerPaymentInstrumentRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerPaymentInstrument}
     */
    this.postCustomersByIDPaymentInstruments = function(customerId, body) {
      return this.postCustomersByIDPaymentInstrumentsWithHttpInfo(customerId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a customer product list.
     * @param {String} customerId The customer id.
     * @param {module:model/CustomerProductList} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerProductList} and HTTP response
     */
    this.postCustomersByIDProductListsWithHttpInfo = function(customerId, body) {
      var postBody = body;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDProductLists");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersByIDProductLists");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductList;
      return this.apiClient.callApi(
        '/customers/{customer_id}/product_lists', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a customer product list.
     * @param {String} customerId The customer id.
     * @param {module:model/CustomerProductList} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerProductList}
     */
    this.postCustomersByIDProductLists = function(customerId, body) {
      return this.postCustomersByIDProductListsWithHttpInfo(customerId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds an item to the customer's product list. Considered values from the request body are:    type: a valid type, mandatory. This is the type of the item to be added to the customer's product  list.  priority: This is the priority of the item to be added to the customer's product list.  public: This is the flag whether the item to be added to the customer's product list is public.  product_id: a valid product id, used for product item type only. This is the id (sku)  of the product related to the item to be added to the customer's product list. It is mandatory for  product item type and it must be a valid product id, otherwise  ProductListProductIdMissingException or ProductListProductNotFoundException  will be thrown.  quantity: used for product item type only. This is the quantity of the item to be  added to the customer's product list.  custom properties in the form c_<CUSTOM_NAME>: the custom property must correspond to a custom  attribute (<CUSTOM_NAME>) defined for ProductListItem. The value of this property must be valid for the  type of custom attribute defined for ProductListItem.  
     * @param {String} customerId The id of the customer - owner of the product list.
     * @param {String} listId The id of the product list
     * @param {module:model/CustomerProductListItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerProductListItem} and HTTP response
     */
    this.postCustomersByIDProductListsByIDItemsWithHttpInfo = function(customerId, listId, body) {
      var postBody = body;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDProductListsByIDItems");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling postCustomersByIDProductListsByIDItems");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersByIDProductListsByIDItems");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItem;
      return this.apiClient.callApi(
        '/customers/{customer_id}/product_lists/{list_id}/items', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Adds an item to the customer's product list. Considered values from the request body are:    type: a valid type, mandatory. This is the type of the item to be added to the customer's product  list.  priority: This is the priority of the item to be added to the customer's product list.  public: This is the flag whether the item to be added to the customer's product list is public.  product_id: a valid product id, used for product item type only. This is the id (sku)  of the product related to the item to be added to the customer's product list. It is mandatory for  product item type and it must be a valid product id, otherwise  ProductListProductIdMissingException or ProductListProductNotFoundException  will be thrown.  quantity: used for product item type only. This is the quantity of the item to be  added to the customer's product list.  custom properties in the form c_<CUSTOM_NAME>: the custom property must correspond to a custom  attribute (<CUSTOM_NAME>) defined for ProductListItem. The value of this property must be valid for the  type of custom attribute defined for ProductListItem.  
     * @param {String} customerId The id of the customer - owner of the product list.
     * @param {String} listId The id of the product list
     * @param {module:model/CustomerProductListItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerProductListItem}
     */
    this.postCustomersByIDProductListsByIDItems = function(customerId, listId, body) {
      return this.postCustomersByIDProductListsByIDItemsWithHttpInfo(customerId, listId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds a purchase to an item in the customer's product list. Considered values from the request body are:    purchaser_name: name of the purchaser, mandatory. This is the full name of the purchaser of this product  list item.  quantity: amount purchased, mandatory. This is the quantity of the items purchased from  the product list.  custom properties in the form c_<CUSTOM_NAME>: the custom property must correspond to a custom  attribute (<CUSTOM_NAME>) defined for ProductListItemPurchase. The value of this property must be valid for the  type of custom attribute defined for ProductListItemPurchase.  
     * @param {String} customerId The id of the customer - owner of the product list.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item where to add the purchase.
     * @param {module:model/CustomerProductListItemPurchase} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerProductListItemPurchase} and HTTP response
     */
    this.postCustomersByIDProductListsByIDItemsByIDPurchasesWithHttpInfo = function(customerId, listId, itemId, body) {
      var postBody = body;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDProductListsByIDItemsByIDPurchases");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling postCustomersByIDProductListsByIDItemsByIDPurchases");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling postCustomersByIDProductListsByIDItemsByIDPurchases");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersByIDProductListsByIDItemsByIDPurchases");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItemPurchase;
      return this.apiClient.callApi(
        '/customers/{customer_id}/product_lists/{list_id}/items/{item_id}/purchases', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Adds a purchase to an item in the customer's product list. Considered values from the request body are:    purchaser_name: name of the purchaser, mandatory. This is the full name of the purchaser of this product  list item.  quantity: amount purchased, mandatory. This is the quantity of the items purchased from  the product list.  custom properties in the form c_<CUSTOM_NAME>: the custom property must correspond to a custom  attribute (<CUSTOM_NAME>) defined for ProductListItemPurchase. The value of this property must be valid for the  type of custom attribute defined for ProductListItemPurchase.  
     * @param {String} customerId The id of the customer - owner of the product list.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item where to add the purchase.
     * @param {module:model/CustomerProductListItemPurchase} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerProductListItemPurchase}
     */
    this.postCustomersByIDProductListsByIDItemsByIDPurchases = function(customerId, listId, itemId, body) {
      return this.postCustomersByIDProductListsByIDItemsByIDPurchasesWithHttpInfo(customerId, listId, itemId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a reset password token for the passed in customer's login that will be used   with the customers/reset_password endpoint to change the customer's password.    This differs from the customers/password_reset endpoint as it does not require or allow before or after hook processing.
     * @param {module:model/ResetPasswordTokenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResetPasswordTokenResult} and HTTP response
     */
    this.postCustomersPasswordActionsCreateResetTokenWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersPasswordActionsCreateResetToken");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ResetPasswordTokenResult;
      return this.apiClient.callApi(
        '/customers/password/actions/create_reset_token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a reset password token for the passed in customer's login that will be used   with the customers/reset_password endpoint to change the customer's password.    This differs from the customers/password_reset endpoint as it does not require or allow before or after hook processing.
     * @param {module:model/ResetPasswordTokenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResetPasswordTokenResult}
     */
    this.postCustomersPasswordActionsCreateResetToken = function(body) {
      return this.postCustomersPasswordActionsCreateResetTokenWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Changes the customer's password to the new password value in the call using the reset   password token that was returned from the customers/reset_password_token endpoint.    This differs from the customers/password_reset endpoint as it does not require or allow before or after hook processing.
     * @param {module:model/ResetPasswordRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.postCustomersPasswordActionsResetWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersPasswordActionsReset");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/customers/password/actions/reset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Changes the customer's password to the new password value in the call using the reset   password token that was returned from the customers/reset_password_token endpoint.    This differs from the customers/password_reset endpoint as it does not require or allow before or after hook processing.
     * @param {module:model/ResetPasswordRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.postCustomersPasswordActionsReset = function(body) {
      return this.postCustomersPasswordActionsResetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * First the beforePOST hook is called. After that the validation of the   customer information provided in the the password reset document is performed.   Then a password reset token is generated and together with the resolved   customer is passed to a afterPOST hook. The customer resolution is based   on the password reset request type. Both hooks are performed in a single  transaction.  Currently the resolution can be done by email or login. In case of  an email the password reset hook is only executed if one and only one  customer has been identified for that email. In the case that more than  one customers have been identified for the provided email the resource  does nothing.
     * @param {module:model/PasswordReset} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.postCustomersPasswordResetWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersPasswordReset");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/customers/password_reset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * First the beforePOST hook is called. After that the validation of the   customer information provided in the the password reset document is performed.   Then a password reset token is generated and together with the resolved   customer is passed to a afterPOST hook. The customer resolution is based   on the password reset request type. Both hooks are performed in a single  transaction.  Currently the resolution can be done by email or login. In case of  an email the password reset hook is only executed if one and only one  customer has been identified for that email. In the case that more than  one customers have been identified for the provided email the resource  does nothing.
     * @param {module:model/PasswordReset} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.postCustomersPasswordReset = function(body) {
      return this.postCustomersPasswordResetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the customer's password.
     * @param {String} customerId the customer id
     * @param {module:model/PasswordChangeRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putCustomersByIDPasswordWithHttpInfo = function(customerId, body) {
      var postBody = body;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling putCustomersByIDPassword");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCustomersByIDPassword");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/customers/{customer_id}/password', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the customer's password.
     * @param {String} customerId the customer id
     * @param {module:model/PasswordChangeRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putCustomersByIDPassword = function(customerId, body) {
      return this.putCustomersByIDPasswordWithHttpInfo(customerId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
