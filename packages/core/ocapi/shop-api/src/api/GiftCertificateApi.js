/**
 * Shop API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GiftCertificate', 'model/GiftCertificateRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GiftCertificate'), require('../model/GiftCertificateRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.ShopApi) {
      root.ShopApi = {};
    }
    root.ShopApi.GiftCertificateApi = factory(root.ShopApi.ApiClient, root.ShopApi.GiftCertificate, root.ShopApi.GiftCertificateRequest);
  }
}(this, function(ApiClient, GiftCertificate, GiftCertificateRequest) {
  'use strict';

  /**
   * GiftCertificate service.
   * @module api/GiftCertificateApi
   * @version 20.8
   */

  /**
   * Constructs a new GiftCertificateApi. 
   * @alias module:api/GiftCertificateApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Action to retrieve an existing gift certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/GiftCertificateRequest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GiftCertificate} and HTTP response
     */
    this.postGiftCertificateWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['body'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id', 'customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = GiftCertificate;
      return this.apiClient.callApi(
        '/gift_certificate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to retrieve an existing gift certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/GiftCertificateRequest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GiftCertificate}
     */
    this.postGiftCertificate = function(opts) {
      return this.postGiftCertificateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
