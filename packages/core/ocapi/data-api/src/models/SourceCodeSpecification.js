/**
 * Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
* The SourceCodeSpecification model module.
* @module models/SourceCodeSpecification
* @version 20.8
*/
export default class SourceCodeSpecification {
    /**
    * Constructs a new <code>SourceCodeSpecification</code>.
    * Document representing a source code specification
    * @alias module:models/SourceCodeSpecification
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>SourceCodeSpecification</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:models/SourceCodeSpecification} obj Optional instance to populate.
    * @return {module:models/SourceCodeSpecification} The populated <code>SourceCodeSpecification</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceCodeSpecification();
                        
            
            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
        }
        return obj;
    }

    /**
    * Expression is a value for the \"Source Code Specification\" may be a literal source code, or it may contain wildcards.  A literal code is simply the literal code. Valid characters are letters and numbers (no spaces).  A wildcard allows a single source code specification to match multiple source codes. The following wildcards are supported:  ? - Matches any single alpha-numeric character. For example: the source code specification 'ABC?' would match 'ABCD' or 'ABC3', but not 'ABCDE'.  * - Matches any sequence of alpha-numeric characters. For example: the source code specification 'ABC*' would match 'ABCD', 'ABCDE', or 'ABC123'.  [n1..n2] - Matches any number from n1 through and including n2.  For example: the source code specification 'ABC[3..22]' would match 'ABC3', 'ABC4' or 'ABC22', but not 'ABC33' or 'ABCD'.
    * @member {String} expression
    */
    expression = undefined;




}
