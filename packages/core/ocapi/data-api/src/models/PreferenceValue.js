/**
 * Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjectAttributeDefinition from './ObjectAttributeDefinition';

/**
* The PreferenceValue model module.
* @module models/PreferenceValue
* @version 20.8
*/
export default class PreferenceValue {
    /**
    * Constructs a new <code>PreferenceValue</code>.
    * Represents a single preference value
    * @alias module:models/PreferenceValue
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>PreferenceValue</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:models/PreferenceValue} obj Optional instance to populate.
    * @return {module:models/PreferenceValue} The populated <code>PreferenceValue</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PreferenceValue();
                        
            
            if (data.hasOwnProperty('attribute_definition')) {
                obj['attribute_definition'] = ObjectAttributeDefinition.constructFromObject(data['attribute_definition']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], {'String': 'String'});
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], {'String': 'String'});
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('site_values')) {
                obj['site_values'] = ApiClient.convertToType(data['site_values'], {'String': Object});
            }
            if (data.hasOwnProperty('value_type')) {
                obj['value_type'] = ApiClient.convertToType(data['value_type'], 'String');
            }
        }
        return obj;
    }

    /**
    * @member {module:models/ObjectAttributeDefinition} attribute_definition
    */
    attribute_definition = undefined;
    /**
    * Description of the attribute
    * @member {Object.<String, String>} description
    */
    description = undefined;
    /**
    * Display name for the attribute
    * @member {Object.<String, String>} display_name
    */
    display_name = undefined;
    /**
    * The id of the attribute
    * @member {String} id
    */
    id = undefined;
    /**
    * The value of this attribute
    * @member {Object.<String, Object>} site_values
    */
    site_values = undefined;
    /**
    * The type of this attribute.
    * @member {module:models/PreferenceValue.ValueTypeEnum} value_type
    */
    value_type = undefined;



    /**
    * Allowed values for the <code>value_type</code> property.
    * @enum {String}
    * @readonly
    */
    static ValueTypeEnum = {
        /**
         * value: "string"
         * @const
         */
        "string": "string",
        /**
         * value: "int"
         * @const
         */
        "int": "int",
        /**
         * value: "double"
         * @const
         */
        "double": "double",
        /**
         * value: "text"
         * @const
         */
        "text": "text",
        /**
         * value: "html"
         * @const
         */
        "html": "html",
        /**
         * value: "date"
         * @const
         */
        "date": "date",
        /**
         * value: "image"
         * @const
         */
        "image": "image",
        /**
         * value: "boolean"
         * @const
         */
        "boolean": "boolean",
        /**
         * value: "money"
         * @const
         */
        "money": "money",
        /**
         * value: "quantity"
         * @const
         */
        "quantity": "quantity",
        /**
         * value: "datetime"
         * @const
         */
        "datetime": "datetime",
        /**
         * value: "email"
         * @const
         */
        "email": "email",
        /**
         * value: "password"
         * @const
         */
        "password": "password",
        /**
         * value: "set_of_string"
         * @const
         */
        "set_of_string": "set_of_string",
        /**
         * value: "set_of_int"
         * @const
         */
        "set_of_int": "set_of_int",
        /**
         * value: "set_of_double"
         * @const
         */
        "set_of_double": "set_of_double",
        /**
         * value: "enum_of_string"
         * @const
         */
        "enum_of_string": "enum_of_string",
        /**
         * value: "enum_of_int"
         * @const
         */
        "enum_of_int": "enum_of_int",
        /**
         * value: "unknown"
         * @const
         */
        "unknown": "unknown"    };

}
