/**
 * Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbTestGroup from './AbTestGroup';
import AbTestSegment from './AbTestSegment';
import AbTestTrigger from './AbTestTrigger';

/**
* The AbTest model module.
* @module models/AbTest
* @version 20.8
*/
export default class AbTest {
    /**
    * Constructs a new <code>AbTest</code>.
    * The id of the A/B Test
    * @alias module:models/AbTest
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>AbTest</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:models/AbTest} obj Optional instance to populate.
    * @return {module:models/AbTest} The populated <code>AbTest</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AbTest();
                        
            
            if (data.hasOwnProperty('customer_groups')) {
                obj['customer_groups'] = ApiClient.convertToType(data['customer_groups'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('email_addresses')) {
                obj['email_addresses'] = ApiClient.convertToType(data['email_addresses'], ['String']);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('end_date')) {
                obj['end_date'] = ApiClient.convertToType(data['end_date'], 'Date');
            }
            if (data.hasOwnProperty('expiration_type')) {
                obj['expiration_type'] = ApiClient.convertToType(data['expiration_type'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('key_metric_id')) {
                obj['key_metric_id'] = ApiClient.convertToType(data['key_metric_id'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('paused')) {
                obj['paused'] = ApiClient.convertToType(data['paused'], 'Boolean');
            }
            if (data.hasOwnProperty('segment_count')) {
                obj['segment_count'] = ApiClient.convertToType(data['segment_count'], 'Number');
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('test_groups')) {
                obj['test_groups'] = ApiClient.convertToType(data['test_groups'], [AbTestGroup]);
            }
            if (data.hasOwnProperty('test_segments')) {
                obj['test_segments'] = ApiClient.convertToType(data['test_segments'], [AbTestSegment]);
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = AbTestTrigger.constructFromObject(data['trigger']);
            }
        }
        return obj;
    }

    /**
    * The list of customer group ids assigned to the A/B Test. Defaults to 'Everyone' if not specified on create
    * @member {Array.<String>} customer_groups
    */
    customer_groups = undefined;
    /**
    * The optional description of the A/B Test
    * @member {String} description
    */
    description = undefined;
    /**
    * The optional list of email addresses to send A/B Test results
    * @member {Array.<String>} email_addresses
    */
    email_addresses = undefined;
    /**
    * The flag representing the enabled state of the A/B Test. Defaults to false if not specified on create
    * @member {Boolean} enabled
    */
    enabled = undefined;
    /**
    * The date that the A/B Test ends. Defaults to two weeks from creation date if both start and end dates are not specified on create
    * @member {Date} end_date
    */
    end_date = undefined;
    /**
    * The participant expiration type of the A/B Test. Defaults to 'never' if not specified on create
    * @member {module:models/AbTest.ExpirationTypeEnum} expiration_type
    */
    expiration_type = undefined;
    /**
    * The id of the A/B Test
    * @member {String} id
    */
    id = undefined;
    /**
    * The key metric that is most important to the A/B Test, among the metrics collected. Defaults to 'Revenue' if not specified from test participant activity
    * @member {String} key_metric_id
    */
    key_metric_id = undefined;
    /**
    * The URL to get the A/B test. This is a computed attribute and cannot be modified
    * @member {String} link
    */
    link = undefined;
    /**
    * The flag representing the paused state of the A/B Test. Defaults to false if not specified on create
    * @member {Boolean} paused
    */
    paused = undefined;
    /**
    * Segment count of A/B test. This is a computed attribute and cannot be modified
    * @member {Number} segment_count
    */
    segment_count = undefined;
    /**
    * The date that the A/B Test begins. Defaults to a week from creation date if both start and end dates are not specified on create
    * @member {Date} start_date
    */
    start_date = undefined;
    /**
    * Status of A/B test. This is a computed attribute and cannot be modified
    * @member {module:models/AbTest.StatusEnum} status
    */
    status = undefined;
    /**
    * The optional list of tags to group similar A/B Tests so that they can be searched easily.
    * @member {Array.<String>} tags
    */
    tags = undefined;
    /**
    * Test Groups created for an A/B Test. This is a read only attribute for now.
    * @member {Array.<module:models/AbTestGroup>} test_groups
    */
    test_groups = undefined;
    /**
    * Test Segments created for an A/B Test. This is a read only attribute for now
    * @member {Array.<module:models/AbTestSegment>} test_segments
    */
    test_segments = undefined;
    /**
    * @member {module:models/AbTestTrigger} trigger
    */
    trigger = undefined;



    /**
    * Allowed values for the <code>expiration_type</code> property.
    * @enum {String}
    * @readonly
    */
    static ExpirationTypeEnum = {
        /**
         * value: "session"
         * @const
         */
        "session": "session",
        /**
         * value: "never"
         * @const
         */
        "never": "never"    };
    /**
    * Allowed values for the <code>status</code> property.
    * @enum {String}
    * @readonly
    */
    static StatusEnum = {
        /**
         * value: "ended"
         * @const
         */
        "ended": "ended",
        /**
         * value: "planned"
         * @const
         */
        "planned": "planned",
        /**
         * value: "running"
         * @const
         */
        "running": "running"    };

}
