/**
 * Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Query from './Query';
import RolePermissions from './RolePermissions';
import Sort from './Sort';

/**
* The RoleSearchRequest model module.
* @module models/RoleSearchRequest
* @version 20.8
*/
export default class RoleSearchRequest {
    /**
    * Constructs a new <code>RoleSearchRequest</code>.
    * Document representing an role search.   Note that only either an user ID or a permission can be provided (or none), but not both. When one of them is provided,  the further query elements will filter the respective role set (meaning the user ID / permission is AND-connected to the query definition).   When a permission definition is using a site scope, it can contain only one site.   When optional fields in the permission definitions are not provided, they will be treated as &#x27;don&#x27;t care&#x27; (so its e.g. possible so search for  permission to site-specific BM modules without providing a site, and the search will return all roles having that permission for any site).
    * @alias module:models/RoleSearchRequest
    * @class
    * @param query {module:models/Query} 
    */

    constructor(query) {
        
        
        this['query'] = query;
        
    }

    /**
    * Constructs a <code>RoleSearchRequest</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:models/RoleSearchRequest} obj Optional instance to populate.
    * @return {module:models/RoleSearchRequest} The populated <code>RoleSearchRequest</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoleSearchRequest();
                        
            
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('db_start_record_')) {
                obj['db_start_record_'] = ApiClient.convertToType(data['db_start_record_'], 'Number');
            }
            if (data.hasOwnProperty('expand')) {
                obj['expand'] = ApiClient.convertToType(data['expand'], ['String']);
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = RolePermissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = Query.constructFromObject(data['query']);
            }
            if (data.hasOwnProperty('select')) {
                obj['select'] = ApiClient.convertToType(data['select'], 'String');
            }
            if (data.hasOwnProperty('sorts')) {
                obj['sorts'] = ApiClient.convertToType(data['sorts'], [Sort]);
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
    * The number of returned documents
    * @member {Number} count
    */
    count = undefined;
    /**
    * The zero-based index of the record that we want to start with, used to optimize special handling
    * @member {Number} db_start_record_
    */
    db_start_record_ = undefined;
    /**
    * List of expansions to be applied to each search results. Expands are optional
    * @member {Array.<String>} expand
    */
    expand = undefined;
    /**
    * @member {module:models/RolePermissions} permissions
    */
    permissions = undefined;
    /**
    * @member {module:models/Query} query
    */
    query = undefined;
    /**
    * The field to be selected.
    * @member {String} select
    */
    select = undefined;
    /**
    * The list of sort clauses configured for the search request. Sort clauses are optional.
    * @member {Array.<module:models/Sort>} sorts
    */
    sorts = undefined;
    /**
    * The zero-based index of the first search hit to include in the result.
    * @member {Number} start
    */
    start = undefined;
    /**
    * The id of the user whose roles are to be searched.
    * @member {String} user_id
    */
    user_id = undefined;




}
