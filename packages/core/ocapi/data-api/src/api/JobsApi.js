/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/JobExecution', 'model/JobExecutionRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/JobExecution'), require('../model/JobExecutionRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.JobsApi = factory(root.DataApi.ApiClient, root.DataApi.JobExecution, root.DataApi.JobExecutionRequest);
  }
}(this, function(ApiClient, JobExecution, JobExecutionRequest) {
  'use strict';

  /**
   * Jobs service.
   * @module api/JobsApi
   * @version 20.4
   */

  /**
   * Constructs a new JobsApi. 
   * @alias module:api/JobsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Deletes job execution information using the specified ID for the job having the specified job ID.
     * @param {String} jobId the ID of the job.
     * @param {String} id the ID of the job execution
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteJobsByIDExecutionsByIDWithHttpInfo = function(jobId, id) {
      var postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling deleteJobsByIDExecutionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteJobsByIDExecutionsByID");
      }

      var pathParams = {
        'job_id': jobId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/jobs/{job_id}/executions/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes job execution information using the specified ID for the job having the specified job ID.
     * @param {String} jobId the ID of the job.
     * @param {String} id the ID of the job execution
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteJobsByIDExecutionsByID = function(jobId, id) {
      return this.deleteJobsByIDExecutionsByIDWithHttpInfo(jobId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns job execution information using the specified ID for the job having the specified job ID.
     * @param {String} jobId the ID of the job.
     * @param {String} id the ID of the job execution
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobExecution} and HTTP response
     */
    this.getJobsByIDExecutionsByIDWithHttpInfo = function(jobId, id) {
      var postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getJobsByIDExecutionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getJobsByIDExecutionsByID");
      }

      var pathParams = {
        'job_id': jobId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = JobExecution;
      return this.apiClient.callApi(
        '/jobs/{job_id}/executions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns job execution information using the specified ID for the job having the specified job ID.
     * @param {String} jobId the ID of the job.
     * @param {String} id the ID of the job execution
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JobExecution}
     */
    this.getJobsByIDExecutionsByID = function(jobId, id) {
      return this.getJobsByIDExecutionsByIDWithHttpInfo(jobId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Executes the job with the given job ID by creating and returning a job execution for it. The job might still be  executed when the job execution is returned. Note that this resource is also intended for running system jobs.    See Global Jobs for information on available system jobs.
     * @param {String} jobId The ID of the job to execute.
     * @param {Object} opts Optional parameters
     * @param {module:model/JobExecutionRequest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobExecution} and HTTP response
     */
    this.postJobsByIDExecutionsWithHttpInfo = function(jobId, opts) {
      opts = opts || {};
      var postBody = opts['body'];
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling postJobsByIDExecutions");
      }

      var pathParams = {
        'job_id': jobId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = JobExecution;
      return this.apiClient.callApi(
        '/jobs/{job_id}/executions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Executes the job with the given job ID by creating and returning a job execution for it. The job might still be  executed when the job execution is returned. Note that this resource is also intended for running system jobs.    See Global Jobs for information on available system jobs.
     * @param {String} jobId The ID of the job to execute.
     * @param {Object} opts Optional parameters
     * @param {module:model/JobExecutionRequest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JobExecution}
     */
    this.postJobsByIDExecutions = function(jobId, opts) {
      return this.postJobsByIDExecutionsWithHttpInfo(jobId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
