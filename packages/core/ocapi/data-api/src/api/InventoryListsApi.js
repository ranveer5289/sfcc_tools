/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InventoryList', 'model/InventoryLists', 'model/ProductInventoryRecord', 'model/ProductInventoryRecords'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InventoryList'), require('../model/InventoryLists'), require('../model/ProductInventoryRecord'), require('../model/ProductInventoryRecords'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.InventoryListsApi = factory(root.DataApi.ApiClient, root.DataApi.InventoryList, root.DataApi.InventoryLists, root.DataApi.ProductInventoryRecord, root.DataApi.ProductInventoryRecords);
  }
}(this, function(ApiClient, InventoryList, InventoryLists, ProductInventoryRecord, ProductInventoryRecords) {
  'use strict';

  /**
   * InventoryLists service.
   * @module api/InventoryListsApi
   * @version 20.8
   */

  /**
   * Constructs a new InventoryListsApi. 
   * @alias module:api/InventoryListsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Deletes the inventory list by ID
     * @param {String} id One inventory list id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteInventoryListsByIDWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInventoryListsByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/inventory_lists/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the inventory list by ID
     * @param {String} id One inventory list id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteInventoryListsByID = function(id) {
      return this.deleteInventoryListsByIDWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a product inventory record by ID.
     * @param {String} inventoryListId The inventory list ID
     * @param {String} productId The product ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteInventoryListsByIDProductInventoryRecordsByIDWithHttpInfo = function(inventoryListId, productId) {
      var postBody = null;
      // verify the required parameter 'inventoryListId' is set
      if (inventoryListId === undefined || inventoryListId === null) {
        throw new Error("Missing the required parameter 'inventoryListId' when calling deleteInventoryListsByIDProductInventoryRecordsByID");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteInventoryListsByIDProductInventoryRecordsByID");
      }

      var pathParams = {
        'inventory_list_id': inventoryListId,
        'product_id': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/inventory_lists/{inventory_list_id}/product_inventory_records/{product_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a product inventory record by ID.
     * @param {String} inventoryListId The inventory list ID
     * @param {String} productId The product ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteInventoryListsByIDProductInventoryRecordsByID = function(inventoryListId, productId) {
      return this.deleteInventoryListsByIDProductInventoryRecordsByIDWithHttpInfo(inventoryListId, productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the inventory lists with no filtering.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Optional start index for retrieving the items from a given index (default 0).
     * @param {Number} opts.count Optional count for retrieving only a subset of the items (default is 25).
     * @param {String} opts.select The property selector.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InventoryLists} and HTTP response
     */
    this.getInventoryListsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = InventoryLists;
      return this.apiClient.callApi(
        '/inventory_lists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the inventory lists with no filtering.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Optional start index for retrieving the items from a given index (default 0).
     * @param {Number} opts.count Optional count for retrieving only a subset of the items (default is 25).
     * @param {String} opts.select The property selector.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InventoryLists}
     */
    this.getInventoryLists = function(opts) {
      return this.getInventoryListsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get inventory list information.
     * @param {String} id The id of the requested inventory list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InventoryList} and HTTP response
     */
    this.getInventoryListsByIDWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInventoryListsByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = InventoryList;
      return this.apiClient.callApi(
        '/inventory_lists/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get inventory list information.
     * @param {String} id The id of the requested inventory list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InventoryList}
     */
    this.getInventoryListsByID = function(id) {
      return this.getInventoryListsByIDWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets all product inventory records for an inventory list.
     * @param {String} inventoryListId The inventory list ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductInventoryRecords} and HTTP response
     */
    this.getInventoryListsByIDProductInventoryRecordsWithHttpInfo = function(inventoryListId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'inventoryListId' is set
      if (inventoryListId === undefined || inventoryListId === null) {
        throw new Error("Missing the required parameter 'inventoryListId' when calling getInventoryListsByIDProductInventoryRecords");
      }

      var pathParams = {
        'inventory_list_id': inventoryListId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductInventoryRecords;
      return this.apiClient.callApi(
        '/inventory_lists/{inventory_list_id}/product_inventory_records', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets all product inventory records for an inventory list.
     * @param {String} inventoryListId The inventory list ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductInventoryRecords}
     */
    this.getInventoryListsByIDProductInventoryRecords = function(inventoryListId, opts) {
      return this.getInventoryListsByIDProductInventoryRecordsWithHttpInfo(inventoryListId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a product inventory record.
     * @param {String} inventoryListId The inventory list ID
     * @param {String} productId The product ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductInventoryRecord} and HTTP response
     */
    this.getInventoryListsByIDProductInventoryRecordsByIDWithHttpInfo = function(inventoryListId, productId) {
      var postBody = null;
      // verify the required parameter 'inventoryListId' is set
      if (inventoryListId === undefined || inventoryListId === null) {
        throw new Error("Missing the required parameter 'inventoryListId' when calling getInventoryListsByIDProductInventoryRecordsByID");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getInventoryListsByIDProductInventoryRecordsByID");
      }

      var pathParams = {
        'inventory_list_id': inventoryListId,
        'product_id': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductInventoryRecord;
      return this.apiClient.callApi(
        '/inventory_lists/{inventory_list_id}/product_inventory_records/{product_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a product inventory record.
     * @param {String} inventoryListId The inventory list ID
     * @param {String} productId The product ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductInventoryRecord}
     */
    this.getInventoryListsByIDProductInventoryRecordsByID = function(inventoryListId, productId) {
      return this.getInventoryListsByIDProductInventoryRecordsByIDWithHttpInfo(inventoryListId, productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the inventory list with the specified information.
     * @param {String} id The id of the requested inventory list.
     * @param {module:model/InventoryList} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InventoryList} and HTTP response
     */
    this.patchInventoryListsByIDWithHttpInfo = function(id, body) {
      var postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchInventoryListsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchInventoryListsByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = InventoryList;
      return this.apiClient.callApi(
        '/inventory_lists/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the inventory list with the specified information.
     * @param {String} id The id of the requested inventory list.
     * @param {module:model/InventoryList} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InventoryList}
     */
    this.patchInventoryListsByID = function(id, body) {
      return this.patchInventoryListsByIDWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the product inventory record with the specified information.
     * @param {String} inventoryListId The inventory list ID
     * @param {String} productId The product ID
     * @param {module:model/ProductInventoryRecord} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductInventoryRecord} and HTTP response
     */
    this.patchInventoryListsByIDProductInventoryRecordsByIDWithHttpInfo = function(inventoryListId, productId, body) {
      var postBody = body;
      // verify the required parameter 'inventoryListId' is set
      if (inventoryListId === undefined || inventoryListId === null) {
        throw new Error("Missing the required parameter 'inventoryListId' when calling patchInventoryListsByIDProductInventoryRecordsByID");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling patchInventoryListsByIDProductInventoryRecordsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchInventoryListsByIDProductInventoryRecordsByID");
      }

      var pathParams = {
        'inventory_list_id': inventoryListId,
        'product_id': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductInventoryRecord;
      return this.apiClient.callApi(
        '/inventory_lists/{inventory_list_id}/product_inventory_records/{product_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the product inventory record with the specified information.
     * @param {String} inventoryListId The inventory list ID
     * @param {String} productId The product ID
     * @param {module:model/ProductInventoryRecord} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductInventoryRecord}
     */
    this.patchInventoryListsByIDProductInventoryRecordsByID = function(inventoryListId, productId, body) {
      return this.patchInventoryListsByIDProductInventoryRecordsByIDWithHttpInfo(inventoryListId, productId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates an inventory list using the information provided.
     * @param {String} id The id of the inventory list to create.
     * @param {module:model/InventoryList} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InventoryList} and HTTP response
     */
    this.putInventoryListsByIDWithHttpInfo = function(id, body) {
      var postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putInventoryListsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventoryListsByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = InventoryList;
      return this.apiClient.callApi(
        '/inventory_lists/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates an inventory list using the information provided.
     * @param {String} id The id of the inventory list to create.
     * @param {module:model/InventoryList} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InventoryList}
     */
    this.putInventoryListsByID = function(id, body) {
      return this.putInventoryListsByIDWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a product inventory record using the information provided.
     * @param {String} inventoryListId The inventory list ID
     * @param {String} productId The product ID
     * @param {module:model/ProductInventoryRecord} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductInventoryRecord} and HTTP response
     */
    this.putInventoryListsByIDProductInventoryRecordsByIDWithHttpInfo = function(inventoryListId, productId, body) {
      var postBody = body;
      // verify the required parameter 'inventoryListId' is set
      if (inventoryListId === undefined || inventoryListId === null) {
        throw new Error("Missing the required parameter 'inventoryListId' when calling putInventoryListsByIDProductInventoryRecordsByID");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling putInventoryListsByIDProductInventoryRecordsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventoryListsByIDProductInventoryRecordsByID");
      }

      var pathParams = {
        'inventory_list_id': inventoryListId,
        'product_id': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductInventoryRecord;
      return this.apiClient.callApi(
        '/inventory_lists/{inventory_list_id}/product_inventory_records/{product_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a product inventory record using the information provided.
     * @param {String} inventoryListId The inventory list ID
     * @param {String} productId The product ID
     * @param {module:model/ProductInventoryRecord} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductInventoryRecord}
     */
    this.putInventoryListsByIDProductInventoryRecordsByID = function(inventoryListId, productId, body) {
      return this.putInventoryListsByIDProductInventoryRecordsByIDWithHttpInfo(inventoryListId, productId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
