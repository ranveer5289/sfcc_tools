/**
 * Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ProductSearchResult from '../models/ProductSearchResult';
import SearchRequest from '../models/SearchRequest';

/**
* ProductSearch service.
* @module api/ProductSearchApi
* @version 20.8
*/
export default class ProductSearchApi {

    /**
    * Constructs a new ProductSearchApi. 
    * @alias module:api/ProductSearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Searches for products.   The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:       id - String     name - String     online - SiteSpecific Boolean     searchable - SiteSpecific Boolean      valid_from - SiteSpefic DateTime      valid_to - SiteSpecfic DateTime      type - ProductType      creation_date - DateTime    Catalog:       catalog_id - String    Category:       category_id - String    Special:       type - {\&quot;item\&quot;, \&quot;set, \&quot;bundle\&quot;, \&quot;master\&quot;, \&quot;part_of_product_set\&quot;, \&quot;bundled\&quot;, \&quot;variant\&quot;, \&quot;variation_group\&quot;, \&quot;option\&quot;, \&quot;retail_set\&quot;, \&quot;part_of_retail_set\&quot;}     The sortable properties are:    id - String  name - String  creation_date - DateTime     Note that catalog_id is the id of the catalog to which products are assigned to.   Only attributes in the same bucket can be joined using a disjunction (OR).  For instance, when joining id and catalog_id above, only a conjunction is allowed (AND), whereas id  and searchable can be joined using a disjunction because they are in the same bucket.  If an attribute  is used in a disjunction (OR) that violates this rule, an exception will be thrown.   The product search retrieves additional properties of the product when expansions are used.  The available expand attribute values are:            &#x27;all&#x27; will retrieve all the product properties.           &#x27;availability&#x27; will retrieve the following properties:             ats             in_stock             online                  &#x27;categories&#x27; will retrieve the following properties:             assigned_categories               &#x27;images&#x27; will retrieve the following properties:             image        &#x27;all_images&#x27; used with images will retrieve the following properties:             image             image_groups               &#x27;prices&#x27; will retrieve the following properties:             price             price_currency               &#x27;sets&#x27; will retrieve the following properties:             set_products             product_sets               &#x27;bundles&#x27; will retrieve the following properties:             product_bundles             bundled_products                    
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductSearchResult} and HTTP response
     */
    postProductSearchWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'site_id': opts['siteId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductSearchResult;

      return this.apiClient.callApi(
        '/product_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for products.   The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:       id - String     name - String     online - SiteSpecific Boolean     searchable - SiteSpecific Boolean      valid_from - SiteSpefic DateTime      valid_to - SiteSpecfic DateTime      type - ProductType      creation_date - DateTime    Catalog:       catalog_id - String    Category:       category_id - String    Special:       type - {\&quot;item\&quot;, \&quot;set, \&quot;bundle\&quot;, \&quot;master\&quot;, \&quot;part_of_product_set\&quot;, \&quot;bundled\&quot;, \&quot;variant\&quot;, \&quot;variation_group\&quot;, \&quot;option\&quot;, \&quot;retail_set\&quot;, \&quot;part_of_retail_set\&quot;}     The sortable properties are:    id - String  name - String  creation_date - DateTime     Note that catalog_id is the id of the catalog to which products are assigned to.   Only attributes in the same bucket can be joined using a disjunction (OR).  For instance, when joining id and catalog_id above, only a conjunction is allowed (AND), whereas id  and searchable can be joined using a disjunction because they are in the same bucket.  If an attribute  is used in a disjunction (OR) that violates this rule, an exception will be thrown.   The product search retrieves additional properties of the product when expansions are used.  The available expand attribute values are:            &#x27;all&#x27; will retrieve all the product properties.           &#x27;availability&#x27; will retrieve the following properties:             ats             in_stock             online                  &#x27;categories&#x27; will retrieve the following properties:             assigned_categories               &#x27;images&#x27; will retrieve the following properties:             image        &#x27;all_images&#x27; used with images will retrieve the following properties:             image             image_groups               &#x27;prices&#x27; will retrieve the following properties:             price             price_currency               &#x27;sets&#x27; will retrieve the following properties:             set_products             product_sets               &#x27;bundles&#x27; will retrieve the following properties:             product_bundles             bundled_products                    
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductSearchResult}
     */
    postProductSearch(opts) {
      return this.postProductSearchWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
