/**
 * Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ApplicationPermissions from '../models/ApplicationPermissions';
import Bmpermissions from '../models/Bmpermissions';
import Cscpermissions from '../models/Cscpermissions';
import FunctionalPermissions from '../models/FunctionalPermissions';
import LocalePermissions from '../models/LocalePermissions';
import ModulePermissions from '../models/ModulePermissions';
import WebdavPermissions from '../models/WebdavPermissions';

/**
* Permissions service.
* @module api/PermissionsApi
* @version 20.8
*/
export default class PermissionsApi {

    /**
    * Constructs a new PermissionsApi. 
    * @alias module:api/PermissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get application specific permissions per type.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ApplicationPermissions} and HTTP response
     */
    getPermissionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ApplicationPermissions;

      return this.apiClient.callApi(
        '/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get application specific permissions per type.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ApplicationPermissions}
     */
    getPermissions(opts) {
      return this.getPermissionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Business Manager permissions per type.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Bmpermissions} and HTTP response
     */
    getPermissionsBmWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Bmpermissions;

      return this.apiClient.callApi(
        '/permissions/bm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Business Manager permissions per type.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Bmpermissions}
     */
    getPermissionsBm(opts) {
      return this.getPermissionsBmWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get functional permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FunctionalPermissions} and HTTP response
     */
    getPermissionsBmFunctionalWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = FunctionalPermissions;

      return this.apiClient.callApi(
        '/permissions/bm/functional', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get functional permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FunctionalPermissions}
     */
    getPermissionsBmFunctional() {
      return this.getPermissionsBmFunctionalWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get locale permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/LocalePermissions} and HTTP response
     */
    getPermissionsBmLocaleWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = LocalePermissions;

      return this.apiClient.callApi(
        '/permissions/bm/locale', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get locale permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/LocalePermissions}
     */
    getPermissionsBmLocale() {
      return this.getPermissionsBmLocaleWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Business Manager module permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ModulePermissions} and HTTP response
     */
    getPermissionsBmModuleWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ModulePermissions;

      return this.apiClient.callApi(
        '/permissions/bm/module', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Business Manager module permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ModulePermissions}
     */
    getPermissionsBmModule() {
      return this.getPermissionsBmModuleWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get WebDAV permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/WebdavPermissions} and HTTP response
     */
    getPermissionsBmWebdavWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = WebdavPermissions;

      return this.apiClient.callApi(
        '/permissions/bm/webdav', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get WebDAV permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/WebdavPermissions}
     */
    getPermissionsBmWebdav() {
      return this.getPermissionsBmWebdavWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get permissions per type.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Cscpermissions} and HTTP response
     */
    getPermissionsCscWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Cscpermissions;

      return this.apiClient.callApi(
        '/permissions/csc', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get permissions per type.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Cscpermissions}
     */
    getPermissionsCsc(opts) {
      return this.getPermissionsCscWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get CSC module permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ModulePermissions} and HTTP response
     */
    getPermissionsCscModuleWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ModulePermissions;

      return this.apiClient.callApi(
        '/permissions/csc/module', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get CSC module permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ModulePermissions}
     */
    getPermissionsCscModule() {
      return this.getPermissionsCscModuleWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
