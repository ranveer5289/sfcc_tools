/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApplicationPermissions', 'model/Bmpermissions', 'model/Cscpermissions', 'model/FunctionalPermissions', 'model/LocalePermissions', 'model/ModulePermissions', 'model/WebdavPermissions'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApplicationPermissions'), require('../model/Bmpermissions'), require('../model/Cscpermissions'), require('../model/FunctionalPermissions'), require('../model/LocalePermissions'), require('../model/ModulePermissions'), require('../model/WebdavPermissions'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.PermissionsApi = factory(root.DataApi.ApiClient, root.DataApi.ApplicationPermissions, root.DataApi.Bmpermissions, root.DataApi.Cscpermissions, root.DataApi.FunctionalPermissions, root.DataApi.LocalePermissions, root.DataApi.ModulePermissions, root.DataApi.WebdavPermissions);
  }
}(this, function(ApiClient, ApplicationPermissions, Bmpermissions, Cscpermissions, FunctionalPermissions, LocalePermissions, ModulePermissions, WebdavPermissions) {
  'use strict';

  /**
   * Permissions service.
   * @module api/PermissionsApi
   * @version 20.8
   */

  /**
   * Constructs a new PermissionsApi. 
   * @alias module:api/PermissionsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get application specific permissions per type.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand The permission expand. A comma separated list with the allowed values (bm, csc).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationPermissions} and HTTP response
     */
    this.getPermissionsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ApplicationPermissions;
      return this.apiClient.callApi(
        '/permissions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get application specific permissions per type.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand The permission expand. A comma separated list with the allowed values (bm, csc).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationPermissions}
     */
    this.getPermissions = function(opts) {
      return this.getPermissionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Business Manager permissions per type.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand The permission expand. A comma separated list with the allowed values   (module, functional, webdav, locale).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Bmpermissions} and HTTP response
     */
    this.getPermissionsBmWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Bmpermissions;
      return this.apiClient.callApi(
        '/permissions/bm', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Business Manager permissions per type.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand The permission expand. A comma separated list with the allowed values   (module, functional, webdav, locale).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Bmpermissions}
     */
    this.getPermissionsBm = function(opts) {
      return this.getPermissionsBmWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get functional permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FunctionalPermissions} and HTTP response
     */
    this.getPermissionsBmFunctionalWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = FunctionalPermissions;
      return this.apiClient.callApi(
        '/permissions/bm/functional', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get functional permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FunctionalPermissions}
     */
    this.getPermissionsBmFunctional = function() {
      return this.getPermissionsBmFunctionalWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get locale permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LocalePermissions} and HTTP response
     */
    this.getPermissionsBmLocaleWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = LocalePermissions;
      return this.apiClient.callApi(
        '/permissions/bm/locale', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get locale permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LocalePermissions}
     */
    this.getPermissionsBmLocale = function() {
      return this.getPermissionsBmLocaleWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Business Manager module permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModulePermissions} and HTTP response
     */
    this.getPermissionsBmModuleWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ModulePermissions;
      return this.apiClient.callApi(
        '/permissions/bm/module', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Business Manager module permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModulePermissions}
     */
    this.getPermissionsBmModule = function() {
      return this.getPermissionsBmModuleWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get WebDAV permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebdavPermissions} and HTTP response
     */
    this.getPermissionsBmWebdavWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = WebdavPermissions;
      return this.apiClient.callApi(
        '/permissions/bm/webdav', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get WebDAV permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebdavPermissions}
     */
    this.getPermissionsBmWebdav = function() {
      return this.getPermissionsBmWebdavWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get permissions per type.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand The permission expand. A comma separated list with the allowed values   (module, functional, webdav, locale).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Cscpermissions} and HTTP response
     */
    this.getPermissionsCscWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Cscpermissions;
      return this.apiClient.callApi(
        '/permissions/csc', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get permissions per type.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand The permission expand. A comma separated list with the allowed values   (module, functional, webdav, locale).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Cscpermissions}
     */
    this.getPermissionsCsc = function(opts) {
      return this.getPermissionsCscWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get CSC module permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModulePermissions} and HTTP response
     */
    this.getPermissionsCscModuleWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ModulePermissions;
      return this.apiClient.callApi(
        '/permissions/csc/module', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get CSC module permissions per scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModulePermissions}
     */
    this.getPermissionsCscModule = function() {
      return this.getPermissionsCscModuleWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
