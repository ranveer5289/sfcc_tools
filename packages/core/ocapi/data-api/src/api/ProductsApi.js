/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Product', 'model/ProductOption', 'model/ProductOptionValue', 'model/ProductOptionValues', 'model/ProductOptions', 'model/SearchRequest', 'model/Variant', 'model/VariantSearchResult', 'model/Variants', 'model/VariationAttribute', 'model/VariationAttributeValue', 'model/VariationAttributeValues', 'model/VariationAttributes', 'model/VariationGroup', 'model/VariationGroups'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Product'), require('../model/ProductOption'), require('../model/ProductOptionValue'), require('../model/ProductOptionValues'), require('../model/ProductOptions'), require('../model/SearchRequest'), require('../model/Variant'), require('../model/VariantSearchResult'), require('../model/Variants'), require('../model/VariationAttribute'), require('../model/VariationAttributeValue'), require('../model/VariationAttributeValues'), require('../model/VariationAttributes'), require('../model/VariationGroup'), require('../model/VariationGroups'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.ProductsApi = factory(root.DataApi.ApiClient, root.DataApi.Product, root.DataApi.ProductOption, root.DataApi.ProductOptionValue, root.DataApi.ProductOptionValues, root.DataApi.ProductOptions, root.DataApi.SearchRequest, root.DataApi.Variant, root.DataApi.VariantSearchResult, root.DataApi.Variants, root.DataApi.VariationAttribute, root.DataApi.VariationAttributeValue, root.DataApi.VariationAttributeValues, root.DataApi.VariationAttributes, root.DataApi.VariationGroup, root.DataApi.VariationGroups);
  }
}(this, function(ApiClient, Product, ProductOption, ProductOptionValue, ProductOptionValues, ProductOptions, SearchRequest, Variant, VariantSearchResult, Variants, VariationAttribute, VariationAttributeValue, VariationAttributeValues, VariationAttributes, VariationGroup, VariationGroups) {
  'use strict';

  /**
   * Products service.
   * @module api/ProductsApi
   * @version 20.8
   */

  /**
   * Constructs a new ProductsApi. 
   * @alias module:api/ProductsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Deletes the product by ID
     * @param {String} id The product ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteProductsByIDWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProductsByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/products/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the product by ID
     * @param {String} id The product ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteProductsByID = function(id) {
      return this.deleteProductsByIDWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a local product option or unbinds a shared product option from the product.
     * @param {String} productId The id of the product.
     * @param {String} id The id of the local or shared product option.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteProductsByIDProductOptionsByIDWithHttpInfo = function(productId, id) {
      var postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductsByIDProductOptionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProductsByIDProductOptionsByID");
      }

      var pathParams = {
        'product_id': productId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a local product option or unbinds a shared product option from the product.
     * @param {String} productId The id of the product.
     * @param {String} id The id of the local or shared product option.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteProductsByIDProductOptionsByID = function(productId, id) {
      return this.deleteProductsByIDProductOptionsByIDWithHttpInfo(productId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a local product option value by ID.
     * @param {String} productId The id of the product.
     * @param {String} optionId The id of the local product option.
     * @param {String} id The id of the local product option value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteProductsByIDProductOptionsByIDValuesByIDWithHttpInfo = function(productId, optionId, id) {
      var postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductsByIDProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling deleteProductsByIDProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProductsByIDProductOptionsByIDValuesByID");
      }

      var pathParams = {
        'product_id': productId,
        'option_id': optionId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{option_id}/values/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a local product option value by ID.
     * @param {String} productId The id of the product.
     * @param {String} optionId The id of the local product option.
     * @param {String} id The id of the local product option value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteProductsByIDProductOptionsByIDValuesByID = function(productId, optionId, id) {
      return this.deleteProductsByIDProductOptionsByIDValuesByIDWithHttpInfo(productId, optionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the variation attribute by ID
     * @param {String} productId The id of the product.
     * @param {String} id One variation attribute id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteProductsByIDVariationAttributesByIDWithHttpInfo = function(productId, id) {
      var postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductsByIDVariationAttributesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProductsByIDVariationAttributesByID");
      }

      var pathParams = {
        'product_id': productId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the variation attribute by ID
     * @param {String} productId The id of the product.
     * @param {String} id One variation attribute id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteProductsByIDVariationAttributesByID = function(productId, id) {
      return this.deleteProductsByIDVariationAttributesByIDWithHttpInfo(productId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the variation attribute value of a variation attribute bound to a master product
     * @param {String} productId The id of the product.
     * @param {String} attributeId The id of the variation attribute that contains the value.
     * @param {String} id The id of one value to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo = function(productId, attributeId, id) {
      var postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductsByIDVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling deleteProductsByIDVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProductsByIDVariationAttributesByIDValuesByID");
      }

      var pathParams = {
        'product_id': productId,
        'attribute_id': attributeId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{attribute_id}/values/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the variation attribute value of a variation attribute bound to a master product
     * @param {String} productId The id of the product.
     * @param {String} attributeId The id of the variation attribute that contains the value.
     * @param {String} id The id of one value to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteProductsByIDVariationAttributesByIDValuesByID = function(productId, attributeId, id) {
      return this.deleteProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo(productId, attributeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unassign a variation group product from a product master.  The variation group product is not  deleted: it remains as a normal product after unsassign.
     * @param {String} masterProductId 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteProductsByIDVariationGroupsByIDWithHttpInfo = function(masterProductId, id) {
      var postBody = null;
      // verify the required parameter 'masterProductId' is set
      if (masterProductId === undefined || masterProductId === null) {
        throw new Error("Missing the required parameter 'masterProductId' when calling deleteProductsByIDVariationGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProductsByIDVariationGroupsByID");
      }

      var pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/products/{master_product_id}/variation_groups/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unassign a variation group product from a product master.  The variation group product is not  deleted: it remains as a normal product after unsassign.
     * @param {String} masterProductId 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteProductsByIDVariationGroupsByID = function(masterProductId, id) {
      return this.deleteProductsByIDVariationGroupsByIDWithHttpInfo(masterProductId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unassign a variation product from a product master.  The variation product is not deleted: it remains as a  normal product after unsassign.
     * @param {String} masterProductId 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteProductsByIDVariationsByIDWithHttpInfo = function(masterProductId, id) {
      var postBody = null;
      // verify the required parameter 'masterProductId' is set
      if (masterProductId === undefined || masterProductId === null) {
        throw new Error("Missing the required parameter 'masterProductId' when calling deleteProductsByIDVariationsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProductsByIDVariationsByID");
      }

      var pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/products/{master_product_id}/variations/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unassign a variation product from a product master.  The variation product is not deleted: it remains as a  normal product after unsassign.
     * @param {String} masterProductId 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteProductsByIDVariationsByID = function(masterProductId, id) {
      return this.deleteProductsByIDVariationsByIDWithHttpInfo(masterProductId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get product information.
     * @param {String} id The product ID.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Product} and HTTP response
     */
    this.getProductsByIDWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'site_id': opts['siteId'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Product;
      return this.apiClient.callApi(
        '/products/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get product information.
     * @param {String} id The product ID.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Product}
     */
    this.getProductsByID = function(id, opts) {
      return this.getProductsByIDWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read local and shared product options of a product.
     * @param {String} productId The id of the product.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {String} opts.currency 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOptions} and HTTP response
     */
    this.getProductsByIDProductOptionsWithHttpInfo = function(productId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductsByIDProductOptions");
      }

      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOptions;
      return this.apiClient.callApi(
        '/products/{product_id}/product_options', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Read local and shared product options of a product.
     * @param {String} productId The id of the product.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {String} opts.currency 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOptions}
     */
    this.getProductsByIDProductOptions = function(productId, opts) {
      return this.getProductsByIDProductOptionsWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a local or shared product option of a product.
     * @param {String} productId The id of the product.
     * @param {String} id The id of the local or shared product option.
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOption} and HTTP response
     */
    this.getProductsByIDProductOptionsByIDWithHttpInfo = function(productId, id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductsByIDProductOptionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDProductOptionsByID");
      }

      var pathParams = {
        'product_id': productId,
        'id': id
      };
      var queryParams = {
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOption;
      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Read a local or shared product option of a product.
     * @param {String} productId The id of the product.
     * @param {String} id The id of the local or shared product option.
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOption}
     */
    this.getProductsByIDProductOptionsByID = function(productId, id, opts) {
      return this.getProductsByIDProductOptionsByIDWithHttpInfo(productId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read local product option values of a local product option in a product.
     * @param {String} productId The id of the product.
     * @param {String} optionId The id of the local product option.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOptionValues} and HTTP response
     */
    this.getProductsByIDProductOptionsByIDValuesWithHttpInfo = function(productId, optionId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductsByIDProductOptionsByIDValues");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling getProductsByIDProductOptionsByIDValues");
      }

      var pathParams = {
        'product_id': productId,
        'option_id': optionId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOptionValues;
      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{option_id}/values', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Read local product option values of a local product option in a product.
     * @param {String} productId The id of the product.
     * @param {String} optionId The id of the local product option.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOptionValues}
     */
    this.getProductsByIDProductOptionsByIDValues = function(productId, optionId, opts) {
      return this.getProductsByIDProductOptionsByIDValuesWithHttpInfo(productId, optionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a local product option value of a local product option in a product.
     * @param {String} productId The id of the product.
     * @param {String} optionId The id of the local product option.
     * @param {String} id the id of local product option value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOptionValue} and HTTP response
     */
    this.getProductsByIDProductOptionsByIDValuesByIDWithHttpInfo = function(productId, optionId, id) {
      var postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductsByIDProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling getProductsByIDProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDProductOptionsByIDValuesByID");
      }

      var pathParams = {
        'product_id': productId,
        'option_id': optionId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOptionValue;
      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{option_id}/values/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Read a local product option value of a local product option in a product.
     * @param {String} productId The id of the product.
     * @param {String} optionId The id of the local product option.
     * @param {String} id the id of local product option value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOptionValue}
     */
    this.getProductsByIDProductOptionsByIDValuesByID = function(productId, optionId, id) {
      return this.getProductsByIDProductOptionsByIDValuesByIDWithHttpInfo(productId, optionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reads variation attributes of a product of type variant or variation master or variation group.
     * @param {String} productId The product ID of a variant or a variation master or a variation group.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttributes} and HTTP response
     */
    this.getProductsByIDVariationAttributesWithHttpInfo = function(productId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductsByIDVariationAttributes");
      }

      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttributes;
      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reads variation attributes of a product of type variant or variation master or variation group.
     * @param {String} productId The product ID of a variant or a variation master or a variation group.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttributes}
     */
    this.getProductsByIDVariationAttributes = function(productId, opts) {
      return this.getProductsByIDVariationAttributesWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get variation attribute information only for master product.
     * @param {String} productId The product ID of a variant or a variation master or a variation group.
     * @param {String} id The id of the requested variation attribute.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttribute} and HTTP response
     */
    this.getProductsByIDVariationAttributesByIDWithHttpInfo = function(productId, id) {
      var postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductsByIDVariationAttributesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDVariationAttributesByID");
      }

      var pathParams = {
        'product_id': productId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttribute;
      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get variation attribute information only for master product.
     * @param {String} productId The product ID of a variant or a variation master or a variation group.
     * @param {String} id The id of the requested variation attribute.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttribute}
     */
    this.getProductsByIDVariationAttributesByID = function(productId, id) {
      return this.getProductsByIDVariationAttributesByIDWithHttpInfo(productId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reads variation attribute values of a variation attribute bound to a product.
     * @param {String} productId id of the product
     * @param {String} attributeId The variation attribute ID that contains the values.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttributeValues} and HTTP response
     */
    this.getProductsByIDVariationAttributesByIDValuesWithHttpInfo = function(productId, attributeId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductsByIDVariationAttributesByIDValues");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling getProductsByIDVariationAttributesByIDValues");
      }

      var pathParams = {
        'product_id': productId,
        'attribute_id': attributeId
      };
      var queryParams = {
        'site_id': opts['siteId'],
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttributeValues;
      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{attribute_id}/values', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reads variation attribute values of a variation attribute bound to a product.
     * @param {String} productId id of the product
     * @param {String} attributeId The variation attribute ID that contains the values.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttributeValues}
     */
    this.getProductsByIDVariationAttributesByIDValues = function(productId, attributeId, opts) {
      return this.getProductsByIDVariationAttributesByIDValuesWithHttpInfo(productId, attributeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get product variation attribute value information.
     * @param {String} productId The master product ID.
     * @param {String} attributeId The variation attribute custom ID
     * @param {String} id The id of the variation attribute value
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttributeValue} and HTTP response
     */
    this.getProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo = function(productId, attributeId, id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductsByIDVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling getProductsByIDVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDVariationAttributesByIDValuesByID");
      }

      var pathParams = {
        'product_id': productId,
        'attribute_id': attributeId,
        'id': id
      };
      var queryParams = {
        'site_id': opts['siteId'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttributeValue;
      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{attribute_id}/values/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get product variation attribute value information.
     * @param {String} productId The master product ID.
     * @param {String} attributeId The variation attribute custom ID
     * @param {String} id The id of the variation attribute value
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttributeValue}
     */
    this.getProductsByIDVariationAttributesByIDValuesByID = function(productId, attributeId, id, opts) {
      return this.getProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo(productId, attributeId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reads variation groups for a product master.
     * @param {String} masterProductId The id of the master product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationGroups} and HTTP response
     */
    this.getProductsByIDVariationGroupsWithHttpInfo = function(masterProductId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'masterProductId' is set
      if (masterProductId === undefined || masterProductId === null) {
        throw new Error("Missing the required parameter 'masterProductId' when calling getProductsByIDVariationGroups");
      }

      var pathParams = {
        'master_product_id': masterProductId
      };
      var queryParams = {
        'site_id': opts['siteId'],
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationGroups;
      return this.apiClient.callApi(
        '/products/{master_product_id}/variation_groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reads variation groups for a product master.
     * @param {String} masterProductId The id of the master product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationGroups}
     */
    this.getProductsByIDVariationGroups = function(masterProductId, opts) {
      return this.getProductsByIDVariationGroupsWithHttpInfo(masterProductId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a variation group for a product master.
     * @param {String} masterProductId The id of the master product that contains the variation group.
     * @param {String} id The id of the variation group product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationGroup} and HTTP response
     */
    this.getProductsByIDVariationGroupsByIDWithHttpInfo = function(masterProductId, id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'masterProductId' is set
      if (masterProductId === undefined || masterProductId === null) {
        throw new Error("Missing the required parameter 'masterProductId' when calling getProductsByIDVariationGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDVariationGroupsByID");
      }

      var pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      var queryParams = {
        'site_id': opts['siteId'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationGroup;
      return this.apiClient.callApi(
        '/products/{master_product_id}/variation_groups/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Read a variation group for a product master.
     * @param {String} masterProductId The id of the master product that contains the variation group.
     * @param {String} id The id of the variation group product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationGroup}
     */
    this.getProductsByIDVariationGroupsByID = function(masterProductId, id, opts) {
      return this.getProductsByIDVariationGroupsByIDWithHttpInfo(masterProductId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reads variation for a product master.
     * @param {String} masterProductId The id of the master product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Variants} and HTTP response
     */
    this.getProductsByIDVariationsWithHttpInfo = function(masterProductId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'masterProductId' is set
      if (masterProductId === undefined || masterProductId === null) {
        throw new Error("Missing the required parameter 'masterProductId' when calling getProductsByIDVariations");
      }

      var pathParams = {
        'master_product_id': masterProductId
      };
      var queryParams = {
        'site_id': opts['siteId'],
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Variants;
      return this.apiClient.callApi(
        '/products/{master_product_id}/variations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reads variation for a product master.
     * @param {String} masterProductId The id of the master product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Variants}
     */
    this.getProductsByIDVariations = function(masterProductId, opts) {
      return this.getProductsByIDVariationsWithHttpInfo(masterProductId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a variation for a product master.
     * @param {String} masterProductId The id of the master product that contains the variation.
     * @param {String} id The id of the variation product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Variant} and HTTP response
     */
    this.getProductsByIDVariationsByIDWithHttpInfo = function(masterProductId, id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'masterProductId' is set
      if (masterProductId === undefined || masterProductId === null) {
        throw new Error("Missing the required parameter 'masterProductId' when calling getProductsByIDVariationsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDVariationsByID");
      }

      var pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      var queryParams = {
        'site_id': opts['siteId'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Variant;
      return this.apiClient.callApi(
        '/products/{master_product_id}/variations/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Read a variation for a product master.
     * @param {String} masterProductId The id of the master product that contains the variation.
     * @param {String} id The id of the variation product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Variant}
     */
    this.getProductsByIDVariationsByID = function(masterProductId, id, opts) {
      return this.getProductsByIDVariationsByIDWithHttpInfo(masterProductId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a product using the information provided.   Fields that can be updated:  name, page_description, long_descripton, page_title,  page_keywords, brand, ean,upc, manufacture_sku,  manufacture_name, searchable, unit, searchable,  online_flag, default_variant_id.
     * @param {String} id The product ID.
     * @param {module:model/Product} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Product} and HTTP response
     */
    this.patchProductsByIDWithHttpInfo = function(id, body) {
      var postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchProductsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchProductsByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Product;
      return this.apiClient.callApi(
        '/products/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a product using the information provided.   Fields that can be updated:  name, page_description, long_descripton, page_title,  page_keywords, brand, ean,upc, manufacture_sku,  manufacture_name, searchable, unit, searchable,  online_flag, default_variant_id.
     * @param {String} id The product ID.
     * @param {module:model/Product} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Product}
     */
    this.patchProductsByID = function(id, body) {
      return this.patchProductsByIDWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a local product option with the information provided.
     * @param {String} productId The id of the product.
     * @param {String} id The id of the local product option.
     * @param {module:model/ProductOption} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOption} and HTTP response
     */
    this.patchProductsByIDProductOptionsByIDWithHttpInfo = function(productId, id, body) {
      var postBody = body;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling patchProductsByIDProductOptionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchProductsByIDProductOptionsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchProductsByIDProductOptionsByID");
      }

      var pathParams = {
        'product_id': productId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOption;
      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a local product option with the information provided.
     * @param {String} productId The id of the product.
     * @param {String} id The id of the local product option.
     * @param {module:model/ProductOption} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOption}
     */
    this.patchProductsByIDProductOptionsByID = function(productId, id, body) {
      return this.patchProductsByIDProductOptionsByIDWithHttpInfo(productId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a local product option value with the information provided.
     * @param {String} productId The id of the product.
     * @param {String} optionId The id of the local product option.
     * @param {String} id The id of the local product option value.
     * @param {module:model/ProductOptionValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOptionValue} and HTTP response
     */
    this.patchProductsByIDProductOptionsByIDValuesByIDWithHttpInfo = function(productId, optionId, id, body) {
      var postBody = body;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling patchProductsByIDProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling patchProductsByIDProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchProductsByIDProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchProductsByIDProductOptionsByIDValuesByID");
      }

      var pathParams = {
        'product_id': productId,
        'option_id': optionId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOptionValue;
      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{option_id}/values/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a local product option value with the information provided.
     * @param {String} productId The id of the product.
     * @param {String} optionId The id of the local product option.
     * @param {String} id The id of the local product option value.
     * @param {module:model/ProductOptionValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOptionValue}
     */
    this.patchProductsByIDProductOptionsByIDValuesByID = function(productId, optionId, id, body) {
      return this.patchProductsByIDProductOptionsByIDValuesByIDWithHttpInfo(productId, optionId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the variation attribute with the specified information.     name  slicing  
     * @param {String} productId The id of the product.
     * @param {String} id The id of the requested variation attribute.
     * @param {module:model/VariationAttribute} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttribute} and HTTP response
     */
    this.patchProductsByIDVariationAttributesByIDWithHttpInfo = function(productId, id, body) {
      var postBody = body;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling patchProductsByIDVariationAttributesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchProductsByIDVariationAttributesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchProductsByIDVariationAttributesByID");
      }

      var pathParams = {
        'product_id': productId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttribute;
      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the variation attribute with the specified information.     name  slicing  
     * @param {String} productId The id of the product.
     * @param {String} id The id of the requested variation attribute.
     * @param {module:model/VariationAttribute} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttribute}
     */
    this.patchProductsByIDVariationAttributesByID = function(productId, id, body) {
      return this.patchProductsByIDVariationAttributesByIDWithHttpInfo(productId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the variation attribute value of a variation attribute of a master product.
     * @param {String} productId The id of the product.
     * @param {String} attributeId The id of the requested variation attribute.
     * @param {String} id The id of the variation value.
     * @param {module:model/VariationAttributeValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttributeValue} and HTTP response
     */
    this.patchProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo = function(productId, attributeId, id, body) {
      var postBody = body;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling patchProductsByIDVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling patchProductsByIDVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchProductsByIDVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchProductsByIDVariationAttributesByIDValuesByID");
      }

      var pathParams = {
        'product_id': productId,
        'attribute_id': attributeId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttributeValue;
      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{attribute_id}/values/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the variation attribute value of a variation attribute of a master product.
     * @param {String} productId The id of the product.
     * @param {String} attributeId The id of the requested variation attribute.
     * @param {String} id The id of the variation value.
     * @param {module:model/VariationAttributeValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttributeValue}
     */
    this.patchProductsByIDVariationAttributesByIDValuesByID = function(productId, attributeId, id, body) {
      return this.patchProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo(productId, attributeId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a variation group for a product master.
     * @param {String} masterProductId The id of the master product that contains the variation group.
     * @param {String} id The id of the variation group product.
     * @param {module:model/VariationGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationGroup} and HTTP response
     */
    this.patchProductsByIDVariationGroupsByIDWithHttpInfo = function(masterProductId, id, body) {
      var postBody = body;
      // verify the required parameter 'masterProductId' is set
      if (masterProductId === undefined || masterProductId === null) {
        throw new Error("Missing the required parameter 'masterProductId' when calling patchProductsByIDVariationGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchProductsByIDVariationGroupsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchProductsByIDVariationGroupsByID");
      }

      var pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationGroup;
      return this.apiClient.callApi(
        '/products/{master_product_id}/variation_groups/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a variation group for a product master.
     * @param {String} masterProductId The id of the master product that contains the variation group.
     * @param {String} id The id of the variation group product.
     * @param {module:model/VariationGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationGroup}
     */
    this.patchProductsByIDVariationGroupsByID = function(masterProductId, id, body) {
      return this.patchProductsByIDVariationGroupsByIDWithHttpInfo(masterProductId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a variation for a product master.
     * @param {String} masterProductId The id of the master product that contains the variation.
     * @param {String} id The id of the variation product.
     * @param {module:model/Variant} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Variant} and HTTP response
     */
    this.patchProductsByIDVariationsByIDWithHttpInfo = function(masterProductId, id, body) {
      var postBody = body;
      // verify the required parameter 'masterProductId' is set
      if (masterProductId === undefined || masterProductId === null) {
        throw new Error("Missing the required parameter 'masterProductId' when calling patchProductsByIDVariationsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchProductsByIDVariationsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchProductsByIDVariationsByID");
      }

      var pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Variant;
      return this.apiClient.callApi(
        '/products/{master_product_id}/variations/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a variation for a product master.
     * @param {String} masterProductId The id of the master product that contains the variation.
     * @param {String} id The id of the variation product.
     * @param {module:model/Variant} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Variant}
     */
    this.patchProductsByIDVariationsByID = function(masterProductId, id, body) {
      return this.patchProductsByIDVariationsByIDWithHttpInfo(masterProductId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches product variations for master product or variation group product.    The query attribute specifies a complex query that can be used to narrow down the search. This is the list  of searchable attributes:    id - String  product_id - String  name - String  online - SiteSpecific Boolean  in_stock - Boolean   searchable - SiteSpecific Boolean   ats - Actual available quantity to sell - Double   variation_attribute.ATTRIBUTE_ID (Ex:variation_attribute.color) - String    Sortable Fields:    id - String  product_id - String  name - String  online - SiteSpecific Boolean  in_stock - Boolean   searchable - SiteSpecific Boolean   ats - Actual available quantity to sell - Double      Note:  The calculated value of \"online\" and \"searchable\" is used in the search/sort.  A search/sort by the the site specific attributes require the Site ID query parameter to be set.  They are \"online\", \"in_stock\", \"searchable\" and \"ats\".   We assume that every field that starts with variation_attribute. is searchable and dot is followed by ATTRIBUTE_ID\".    The list of expansions to retrieve product information. The expand values available are:           _base - Basic product information is retrieved. This expand is included by default.     all - All product information including the following properties are retrieved:                     image           price - site_id has to be provided to see this property           price_currency - site_id has to be provided to see this property               availability - Information related to the availability of the product variation.  This expand is not included by default.                     ats - site_id has to be provided to see this property           in_stock - site_id has to be provided to see this property           online - site_id has to be provided to see this property           searchable                     variations - Information related to product variation is retrieved. This expand is included by default.     attributes - Information related to product variation attributes is retrieved. This expand is not included by default.      
     * @param {String} id The product id of master product or variation group product
     * @param {module:model/SearchRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariantSearchResult} and HTTP response
     */
    this.postProductsByIDVariantSearchWithHttpInfo = function(id, body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postProductsByIDVariantSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProductsByIDVariantSearch");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'site_id': opts['siteId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariantSearchResult;
      return this.apiClient.callApi(
        '/products/{id}/variant_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches product variations for master product or variation group product.    The query attribute specifies a complex query that can be used to narrow down the search. This is the list  of searchable attributes:    id - String  product_id - String  name - String  online - SiteSpecific Boolean  in_stock - Boolean   searchable - SiteSpecific Boolean   ats - Actual available quantity to sell - Double   variation_attribute.ATTRIBUTE_ID (Ex:variation_attribute.color) - String    Sortable Fields:    id - String  product_id - String  name - String  online - SiteSpecific Boolean  in_stock - Boolean   searchable - SiteSpecific Boolean   ats - Actual available quantity to sell - Double      Note:  The calculated value of \"online\" and \"searchable\" is used in the search/sort.  A search/sort by the the site specific attributes require the Site ID query parameter to be set.  They are \"online\", \"in_stock\", \"searchable\" and \"ats\".   We assume that every field that starts with variation_attribute. is searchable and dot is followed by ATTRIBUTE_ID\".    The list of expansions to retrieve product information. The expand values available are:           _base - Basic product information is retrieved. This expand is included by default.     all - All product information including the following properties are retrieved:                     image           price - site_id has to be provided to see this property           price_currency - site_id has to be provided to see this property               availability - Information related to the availability of the product variation.  This expand is not included by default.                     ats - site_id has to be provided to see this property           in_stock - site_id has to be provided to see this property           online - site_id has to be provided to see this property           searchable                     variations - Information related to product variation is retrieved. This expand is included by default.     attributes - Information related to product variation attributes is retrieved. This expand is not included by default.      
     * @param {String} id The product id of master product or variation group product
     * @param {module:model/SearchRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariantSearchResult}
     */
    this.postProductsByIDVariantSearch = function(id, body, opts) {
      return this.postProductsByIDVariantSearchWithHttpInfo(id, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a product using the information provided. If a product with the same unique identifier, it will be cleaned and overwritten unless the header x-dw-validate-existing=true is passed in with the request.
     * @param {String} id The product ID.
     * @param {module:model/Product} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Product} and HTTP response
     */
    this.putProductsByIDWithHttpInfo = function(id, body) {
      var postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putProductsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProductsByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Product;
      return this.apiClient.callApi(
        '/products/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a product using the information provided. If a product with the same unique identifier, it will be cleaned and overwritten unless the header x-dw-validate-existing=true is passed in with the request.
     * @param {String} id The product ID.
     * @param {module:model/Product} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Product}
     */
    this.putProductsByID = function(id, body) {
      return this.putProductsByIDWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a local product option using the information provided or binds a shared product option to the product.
     * @param {String} productId The id of the product.
     * @param {String} id The id of the local or shared product option.
     * @param {module:model/ProductOption} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOption} and HTTP response
     */
    this.putProductsByIDProductOptionsByIDWithHttpInfo = function(productId, id, body) {
      var postBody = body;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling putProductsByIDProductOptionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putProductsByIDProductOptionsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProductsByIDProductOptionsByID");
      }

      var pathParams = {
        'product_id': productId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOption;
      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a local product option using the information provided or binds a shared product option to the product.
     * @param {String} productId The id of the product.
     * @param {String} id The id of the local or shared product option.
     * @param {module:model/ProductOption} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOption}
     */
    this.putProductsByIDProductOptionsByID = function(productId, id, body) {
      return this.putProductsByIDProductOptionsByIDWithHttpInfo(productId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a local product option value using the information provided.
     * @param {String} productId The id of the product.
     * @param {String} optionId The id of the local product option.
     * @param {String} id The id of the local product option value.
     * @param {module:model/ProductOptionValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOptionValue} and HTTP response
     */
    this.putProductsByIDProductOptionsByIDValuesByIDWithHttpInfo = function(productId, optionId, id, body) {
      var postBody = body;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling putProductsByIDProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling putProductsByIDProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putProductsByIDProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProductsByIDProductOptionsByIDValuesByID");
      }

      var pathParams = {
        'product_id': productId,
        'option_id': optionId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOptionValue;
      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{option_id}/values/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a local product option value using the information provided.
     * @param {String} productId The id of the product.
     * @param {String} optionId The id of the local product option.
     * @param {String} id The id of the local product option value.
     * @param {module:model/ProductOptionValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOptionValue}
     */
    this.putProductsByIDProductOptionsByIDValuesByID = function(productId, optionId, id, body) {
      return this.putProductsByIDProductOptionsByIDValuesByIDWithHttpInfo(productId, optionId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a variation attribute using the information provided.
     * @param {String} productId The id of the product.
     * @param {String} id The id of the variation attribute to create.
     * @param {module:model/VariationAttribute} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttribute} and HTTP response
     */
    this.putProductsByIDVariationAttributesByIDWithHttpInfo = function(productId, id, body) {
      var postBody = body;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling putProductsByIDVariationAttributesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putProductsByIDVariationAttributesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProductsByIDVariationAttributesByID");
      }

      var pathParams = {
        'product_id': productId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttribute;
      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a variation attribute using the information provided.
     * @param {String} productId The id of the product.
     * @param {String} id The id of the variation attribute to create.
     * @param {module:model/VariationAttribute} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttribute}
     */
    this.putProductsByIDVariationAttributesByID = function(productId, id, body) {
      return this.putProductsByIDVariationAttributesByIDWithHttpInfo(productId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to create a product variation attribute value.
     * @param {String} productId The master product ID.
     * @param {String} attributeId The variation attribute ID
     * @param {String} id The id of the variation attribute value
     * @param {module:model/VariationAttributeValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttributeValue} and HTTP response
     */
    this.putProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo = function(productId, attributeId, id, body) {
      var postBody = body;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling putProductsByIDVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling putProductsByIDVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putProductsByIDVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProductsByIDVariationAttributesByIDValuesByID");
      }

      var pathParams = {
        'product_id': productId,
        'attribute_id': attributeId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttributeValue;
      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{attribute_id}/values/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to create a product variation attribute value.
     * @param {String} productId The master product ID.
     * @param {String} attributeId The variation attribute ID
     * @param {String} id The id of the variation attribute value
     * @param {module:model/VariationAttributeValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttributeValue}
     */
    this.putProductsByIDVariationAttributesByIDValuesByID = function(productId, attributeId, id, body) {
      return this.putProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo(productId, attributeId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Assign a variation group for a product master.  If the variation group product does not initially exist,  one is created using the body passed in.
     * @param {String} masterProductId The id of the master product that contains the variation group.
     * @param {String} id The id of the variation group product.
     * @param {module:model/VariationGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationGroup} and HTTP response
     */
    this.putProductsByIDVariationGroupsByIDWithHttpInfo = function(masterProductId, id, body) {
      var postBody = body;
      // verify the required parameter 'masterProductId' is set
      if (masterProductId === undefined || masterProductId === null) {
        throw new Error("Missing the required parameter 'masterProductId' when calling putProductsByIDVariationGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putProductsByIDVariationGroupsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProductsByIDVariationGroupsByID");
      }

      var pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationGroup;
      return this.apiClient.callApi(
        '/products/{master_product_id}/variation_groups/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Assign a variation group for a product master.  If the variation group product does not initially exist,  one is created using the body passed in.
     * @param {String} masterProductId The id of the master product that contains the variation group.
     * @param {String} id The id of the variation group product.
     * @param {module:model/VariationGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationGroup}
     */
    this.putProductsByIDVariationGroupsByID = function(masterProductId, id, body) {
      return this.putProductsByIDVariationGroupsByIDWithHttpInfo(masterProductId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Assign a variation for a product master.  If the variation product does not initially exist,  one is created using the body passed in.
     * @param {String} masterProductId The id of the master product that contains the variation.
     * @param {String} id The id of the variation product.
     * @param {module:model/Variant} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Variant} and HTTP response
     */
    this.putProductsByIDVariationsByIDWithHttpInfo = function(masterProductId, id, body) {
      var postBody = body;
      // verify the required parameter 'masterProductId' is set
      if (masterProductId === undefined || masterProductId === null) {
        throw new Error("Missing the required parameter 'masterProductId' when calling putProductsByIDVariationsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putProductsByIDVariationsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProductsByIDVariationsByID");
      }

      var pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Variant;
      return this.apiClient.callApi(
        '/products/{master_product_id}/variations/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Assign a variation for a product master.  If the variation product does not initially exist,  one is created using the body passed in.
     * @param {String} masterProductId The id of the master product that contains the variation.
     * @param {String} id The id of the variation product.
     * @param {module:model/Variant} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Variant}
     */
    this.putProductsByIDVariationsByID = function(masterProductId, id, body) {
      return this.putProductsByIDVariationsByIDWithHttpInfo(masterProductId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
