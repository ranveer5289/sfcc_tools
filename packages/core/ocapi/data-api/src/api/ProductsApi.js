/**
 * Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Product from '../models/Product';
import ProductOption from '../models/ProductOption';
import ProductOptionValue from '../models/ProductOptionValue';
import ProductOptionValues from '../models/ProductOptionValues';
import ProductOptions from '../models/ProductOptions';
import SearchRequest from '../models/SearchRequest';
import Variant from '../models/Variant';
import VariantSearchResult from '../models/VariantSearchResult';
import Variants from '../models/Variants';
import VariationAttribute from '../models/VariationAttribute';
import VariationAttributeValue from '../models/VariationAttributeValue';
import VariationAttributeValues from '../models/VariationAttributeValues';
import VariationAttributes from '../models/VariationAttributes';
import VariationGroup from '../models/VariationGroup';
import VariationGroups from '../models/VariationGroups';

/**
* Products service.
* @module api/ProductsApi
* @version 20.8
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Deletes the product by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductsByIDWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/products/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the product by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductsByID(id) {
      return this.deleteProductsByIDWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a local product option or unbinds a shared product option from the product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductsByIDProductOptionsByIDWithHttpInfo(productId, id) {
      let postBody = null;

      let pathParams = {
        'product_id': productId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes a local product option or unbinds a shared product option from the product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductsByIDProductOptionsByID(productId, id) {
      return this.deleteProductsByIDProductOptionsByIDWithHttpInfo(productId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a local product option value by ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductsByIDProductOptionsByIDValuesByIDWithHttpInfo(productId, optionId, id) {
      let postBody = null;

      let pathParams = {
        'product_id': productId,
        'option_id': optionId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{option_id}/values/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes a local product option value by ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductsByIDProductOptionsByIDValuesByID(productId, optionId, id) {
      return this.deleteProductsByIDProductOptionsByIDValuesByIDWithHttpInfo(productId, optionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the variation attribute by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductsByIDVariationAttributesByIDWithHttpInfo(productId, id) {
      let postBody = null;

      let pathParams = {
        'product_id': productId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the variation attribute by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductsByIDVariationAttributesByID(productId, id) {
      return this.deleteProductsByIDVariationAttributesByIDWithHttpInfo(productId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the variation attribute value of a variation attribute bound to a master product
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo(productId, attributeId, id) {
      let postBody = null;

      let pathParams = {
        'product_id': productId,
        'attribute_id': attributeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{attribute_id}/values/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the variation attribute value of a variation attribute bound to a master product
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductsByIDVariationAttributesByIDValuesByID(productId, attributeId, id) {
      return this.deleteProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo(productId, attributeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unassign a variation group product from a product master.  The variation group product is not  deleted: it remains as a normal product after unsassign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductsByIDVariationGroupsByIDWithHttpInfo(masterProductId, id) {
      let postBody = null;

      let pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/products/{master_product_id}/variation_groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Unassign a variation group product from a product master.  The variation group product is not  deleted: it remains as a normal product after unsassign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductsByIDVariationGroupsByID(masterProductId, id) {
      return this.deleteProductsByIDVariationGroupsByIDWithHttpInfo(masterProductId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unassign a variation product from a product master.  The variation product is not deleted: it remains as a  normal product after unsassign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductsByIDVariationsByIDWithHttpInfo(masterProductId, id) {
      let postBody = null;

      let pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/products/{master_product_id}/variations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Unassign a variation product from a product master.  The variation product is not deleted: it remains as a  normal product after unsassign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductsByIDVariationsByID(masterProductId, id) {
      return this.deleteProductsByIDVariationsByIDWithHttpInfo(masterProductId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get product information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Product} and HTTP response
     */
    getProductsByIDWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'site_id': opts['siteId'],
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Product;

      return this.apiClient.callApi(
        '/products/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get product information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Product}
     */
    getProductsByID(id, opts) {
      return this.getProductsByIDWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read local and shared product options of a product.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOptions} and HTTP response
     */
    getProductsByIDProductOptionsWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
        'currency': opts['currency']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOptions;

      return this.apiClient.callApi(
        '/products/{product_id}/product_options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read local and shared product options of a product.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOptions}
     */
    getProductsByIDProductOptions(productId, opts) {
      return this.getProductsByIDProductOptionsWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a local or shared product option of a product.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOption} and HTTP response
     */
    getProductsByIDProductOptionsByIDWithHttpInfo(productId, id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'product_id': productId,
        'id': id
      };
      let queryParams = {
        'currency': opts['currency']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOption;

      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read a local or shared product option of a product.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOption}
     */
    getProductsByIDProductOptionsByID(productId, id, opts) {
      return this.getProductsByIDProductOptionsByIDWithHttpInfo(productId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read local product option values of a local product option in a product.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOptionValues} and HTTP response
     */
    getProductsByIDProductOptionsByIDValuesWithHttpInfo(productId, optionId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'product_id': productId,
        'option_id': optionId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOptionValues;

      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{option_id}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read local product option values of a local product option in a product.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOptionValues}
     */
    getProductsByIDProductOptionsByIDValues(productId, optionId, opts) {
      return this.getProductsByIDProductOptionsByIDValuesWithHttpInfo(productId, optionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a local product option value of a local product option in a product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOptionValue} and HTTP response
     */
    getProductsByIDProductOptionsByIDValuesByIDWithHttpInfo(productId, optionId, id) {
      let postBody = null;

      let pathParams = {
        'product_id': productId,
        'option_id': optionId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOptionValue;

      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{option_id}/values/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read a local product option value of a local product option in a product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOptionValue}
     */
    getProductsByIDProductOptionsByIDValuesByID(productId, optionId, id) {
      return this.getProductsByIDProductOptionsByIDValuesByIDWithHttpInfo(productId, optionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reads variation attributes of a product of type variant or variation master or variation group.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttributes} and HTTP response
     */
    getProductsByIDVariationAttributesWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttributes;

      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reads variation attributes of a product of type variant or variation master or variation group.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttributes}
     */
    getProductsByIDVariationAttributes(productId, opts) {
      return this.getProductsByIDVariationAttributesWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get variation attribute information only for master product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttribute} and HTTP response
     */
    getProductsByIDVariationAttributesByIDWithHttpInfo(productId, id) {
      let postBody = null;

      let pathParams = {
        'product_id': productId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttribute;

      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get variation attribute information only for master product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttribute}
     */
    getProductsByIDVariationAttributesByID(productId, id) {
      return this.getProductsByIDVariationAttributesByIDWithHttpInfo(productId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reads variation attribute values of a variation attribute bound to a product.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttributeValues} and HTTP response
     */
    getProductsByIDVariationAttributesByIDValuesWithHttpInfo(productId, attributeId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'product_id': productId,
        'attribute_id': attributeId
      };
      let queryParams = {
        'site_id': opts['siteId'],
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttributeValues;

      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{attribute_id}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reads variation attribute values of a variation attribute bound to a product.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttributeValues}
     */
    getProductsByIDVariationAttributesByIDValues(productId, attributeId, opts) {
      return this.getProductsByIDVariationAttributesByIDValuesWithHttpInfo(productId, attributeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get product variation attribute value information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttributeValue} and HTTP response
     */
    getProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo(productId, attributeId, id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'product_id': productId,
        'attribute_id': attributeId,
        'id': id
      };
      let queryParams = {
        'site_id': opts['siteId'],
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttributeValue;

      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{attribute_id}/values/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get product variation attribute value information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttributeValue}
     */
    getProductsByIDVariationAttributesByIDValuesByID(productId, attributeId, id, opts) {
      return this.getProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo(productId, attributeId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reads variation groups for a product master.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationGroups} and HTTP response
     */
    getProductsByIDVariationGroupsWithHttpInfo(masterProductId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'master_product_id': masterProductId
      };
      let queryParams = {
        'site_id': opts['siteId'],
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationGroups;

      return this.apiClient.callApi(
        '/products/{master_product_id}/variation_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reads variation groups for a product master.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationGroups}
     */
    getProductsByIDVariationGroups(masterProductId, opts) {
      return this.getProductsByIDVariationGroupsWithHttpInfo(masterProductId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a variation group for a product master.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationGroup} and HTTP response
     */
    getProductsByIDVariationGroupsByIDWithHttpInfo(masterProductId, id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      let queryParams = {
        'site_id': opts['siteId'],
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationGroup;

      return this.apiClient.callApi(
        '/products/{master_product_id}/variation_groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read a variation group for a product master.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationGroup}
     */
    getProductsByIDVariationGroupsByID(masterProductId, id, opts) {
      return this.getProductsByIDVariationGroupsByIDWithHttpInfo(masterProductId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reads variation for a product master.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Variants} and HTTP response
     */
    getProductsByIDVariationsWithHttpInfo(masterProductId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'master_product_id': masterProductId
      };
      let queryParams = {
        'site_id': opts['siteId'],
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Variants;

      return this.apiClient.callApi(
        '/products/{master_product_id}/variations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reads variation for a product master.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Variants}
     */
    getProductsByIDVariations(masterProductId, opts) {
      return this.getProductsByIDVariationsWithHttpInfo(masterProductId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a variation for a product master.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Variant} and HTTP response
     */
    getProductsByIDVariationsByIDWithHttpInfo(masterProductId, id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      let queryParams = {
        'site_id': opts['siteId'],
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Variant;

      return this.apiClient.callApi(
        '/products/{master_product_id}/variations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read a variation for a product master.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Variant}
     */
    getProductsByIDVariationsByID(masterProductId, id, opts) {
      return this.getProductsByIDVariationsByIDWithHttpInfo(masterProductId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a product using the information provided.   Fields that can be updated:  name, page_description, long_descripton, page_title,  page_keywords, brand, ean,upc, manufacture_sku,  manufacture_name, searchable, unit, searchable,  online_flag, default_variant_id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Product} and HTTP response
     */
    patchProductsByIDWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Product;

      return this.apiClient.callApi(
        '/products/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a product using the information provided.   Fields that can be updated:  name, page_description, long_descripton, page_title,  page_keywords, brand, ean,upc, manufacture_sku,  manufacture_name, searchable, unit, searchable,  online_flag, default_variant_id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Product}
     */
    patchProductsByID(body, id) {
      return this.patchProductsByIDWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a local product option with the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOption} and HTTP response
     */
    patchProductsByIDProductOptionsByIDWithHttpInfo(body, productId, id) {
      let postBody = body;

      let pathParams = {
        'product_id': productId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOption;

      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates a local product option with the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOption}
     */
    patchProductsByIDProductOptionsByID(body, productId, id) {
      return this.patchProductsByIDProductOptionsByIDWithHttpInfo(body, productId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a local product option value with the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOptionValue} and HTTP response
     */
    patchProductsByIDProductOptionsByIDValuesByIDWithHttpInfo(body, productId, optionId, id) {
      let postBody = body;

      let pathParams = {
        'product_id': productId,
        'option_id': optionId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOptionValue;

      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{option_id}/values/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates a local product option value with the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOptionValue}
     */
    patchProductsByIDProductOptionsByIDValuesByID(body, productId, optionId, id) {
      return this.patchProductsByIDProductOptionsByIDValuesByIDWithHttpInfo(body, productId, optionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the variation attribute with the specified information.     name  slicing  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttribute} and HTTP response
     */
    patchProductsByIDVariationAttributesByIDWithHttpInfo(body, productId, id) {
      let postBody = body;

      let pathParams = {
        'product_id': productId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttribute;

      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the variation attribute with the specified information.     name  slicing  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttribute}
     */
    patchProductsByIDVariationAttributesByID(body, productId, id) {
      return this.patchProductsByIDVariationAttributesByIDWithHttpInfo(body, productId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the variation attribute value of a variation attribute of a master product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttributeValue} and HTTP response
     */
    patchProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo(body, productId, attributeId, id) {
      let postBody = body;

      let pathParams = {
        'product_id': productId,
        'attribute_id': attributeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttributeValue;

      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{attribute_id}/values/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the variation attribute value of a variation attribute of a master product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttributeValue}
     */
    patchProductsByIDVariationAttributesByIDValuesByID(body, productId, attributeId, id) {
      return this.patchProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo(body, productId, attributeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a variation group for a product master.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationGroup} and HTTP response
     */
    patchProductsByIDVariationGroupsByIDWithHttpInfo(body, masterProductId, id) {
      let postBody = body;

      let pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationGroup;

      return this.apiClient.callApi(
        '/products/{master_product_id}/variation_groups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a variation group for a product master.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationGroup}
     */
    patchProductsByIDVariationGroupsByID(body, masterProductId, id) {
      return this.patchProductsByIDVariationGroupsByIDWithHttpInfo(body, masterProductId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a variation for a product master.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Variant} and HTTP response
     */
    patchProductsByIDVariationsByIDWithHttpInfo(body, masterProductId, id) {
      let postBody = body;

      let pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Variant;

      return this.apiClient.callApi(
        '/products/{master_product_id}/variations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a variation for a product master.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Variant}
     */
    patchProductsByIDVariationsByID(body, masterProductId, id) {
      return this.patchProductsByIDVariationsByIDWithHttpInfo(body, masterProductId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches product variations for master product or variation group product.    The query attribute specifies a complex query that can be used to narrow down the search. This is the list  of searchable attributes:    id - String  product_id - String  name - String  online - SiteSpecific Boolean  in_stock - Boolean   searchable - SiteSpecific Boolean   ats - Actual available quantity to sell - Double   variation_attribute.ATTRIBUTE_ID (Ex:variation_attribute.color) - String    Sortable Fields:    id - String  product_id - String  name - String  online - SiteSpecific Boolean  in_stock - Boolean   searchable - SiteSpecific Boolean   ats - Actual available quantity to sell - Double      Note:  The calculated value of \&quot;online\&quot; and \&quot;searchable\&quot; is used in the search/sort.  A search/sort by the the site specific attributes require the Site ID query parameter to be set.  They are \&quot;online\&quot;, \&quot;in_stock\&quot;, \&quot;searchable\&quot; and \&quot;ats\&quot;.   We assume that every field that starts with variation_attribute. is searchable and dot is followed by ATTRIBUTE_ID\&quot;.    The list of expansions to retrieve product information. The expand values available are:           _base - Basic product information is retrieved. This expand is included by default.     all - All product information including the following properties are retrieved:                     image           price - site_id has to be provided to see this property           price_currency - site_id has to be provided to see this property               availability - Information related to the availability of the product variation.  This expand is not included by default.                     ats - site_id has to be provided to see this property           in_stock - site_id has to be provided to see this property           online - site_id has to be provided to see this property           searchable                     variations - Information related to product variation is retrieved. This expand is included by default.     attributes - Information related to product variation attributes is retrieved. This expand is not included by default.      
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariantSearchResult} and HTTP response
     */
    postProductsByIDVariantSearchWithHttpInfo(body, id, opts) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'site_id': opts['siteId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariantSearchResult;

      return this.apiClient.callApi(
        '/products/{id}/variant_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches product variations for master product or variation group product.    The query attribute specifies a complex query that can be used to narrow down the search. This is the list  of searchable attributes:    id - String  product_id - String  name - String  online - SiteSpecific Boolean  in_stock - Boolean   searchable - SiteSpecific Boolean   ats - Actual available quantity to sell - Double   variation_attribute.ATTRIBUTE_ID (Ex:variation_attribute.color) - String    Sortable Fields:    id - String  product_id - String  name - String  online - SiteSpecific Boolean  in_stock - Boolean   searchable - SiteSpecific Boolean   ats - Actual available quantity to sell - Double      Note:  The calculated value of \&quot;online\&quot; and \&quot;searchable\&quot; is used in the search/sort.  A search/sort by the the site specific attributes require the Site ID query parameter to be set.  They are \&quot;online\&quot;, \&quot;in_stock\&quot;, \&quot;searchable\&quot; and \&quot;ats\&quot;.   We assume that every field that starts with variation_attribute. is searchable and dot is followed by ATTRIBUTE_ID\&quot;.    The list of expansions to retrieve product information. The expand values available are:           _base - Basic product information is retrieved. This expand is included by default.     all - All product information including the following properties are retrieved:                     image           price - site_id has to be provided to see this property           price_currency - site_id has to be provided to see this property               availability - Information related to the availability of the product variation.  This expand is not included by default.                     ats - site_id has to be provided to see this property           in_stock - site_id has to be provided to see this property           online - site_id has to be provided to see this property           searchable                     variations - Information related to product variation is retrieved. This expand is included by default.     attributes - Information related to product variation attributes is retrieved. This expand is not included by default.      
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariantSearchResult}
     */
    postProductsByIDVariantSearch(body, id, opts) {
      return this.postProductsByIDVariantSearchWithHttpInfo(body, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a product using the information provided. If a product with the same unique identifier, it will be cleaned and overwritten unless the header x-dw-validate-existing&#x3D;true is passed in with the request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Product} and HTTP response
     */
    putProductsByIDWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Product;

      return this.apiClient.callApi(
        '/products/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a product using the information provided. If a product with the same unique identifier, it will be cleaned and overwritten unless the header x-dw-validate-existing&#x3D;true is passed in with the request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Product}
     */
    putProductsByID(body, id) {
      return this.putProductsByIDWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a local product option using the information provided or binds a shared product option to the product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOption} and HTTP response
     */
    putProductsByIDProductOptionsByIDWithHttpInfo(body, productId, id) {
      let postBody = body;

      let pathParams = {
        'product_id': productId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOption;

      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a local product option using the information provided or binds a shared product option to the product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOption}
     */
    putProductsByIDProductOptionsByID(body, productId, id) {
      return this.putProductsByIDProductOptionsByIDWithHttpInfo(body, productId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a local product option value using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOptionValue} and HTTP response
     */
    putProductsByIDProductOptionsByIDValuesByIDWithHttpInfo(body, productId, optionId, id) {
      let postBody = body;

      let pathParams = {
        'product_id': productId,
        'option_id': optionId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOptionValue;

      return this.apiClient.callApi(
        '/products/{product_id}/product_options/{option_id}/values/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a local product option value using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOptionValue}
     */
    putProductsByIDProductOptionsByIDValuesByID(body, productId, optionId, id) {
      return this.putProductsByIDProductOptionsByIDValuesByIDWithHttpInfo(body, productId, optionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a variation attribute using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttribute} and HTTP response
     */
    putProductsByIDVariationAttributesByIDWithHttpInfo(body, productId, id) {
      let postBody = body;

      let pathParams = {
        'product_id': productId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttribute;

      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a variation attribute using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttribute}
     */
    putProductsByIDVariationAttributesByID(body, productId, id) {
      return this.putProductsByIDVariationAttributesByIDWithHttpInfo(body, productId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to create a product variation attribute value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttributeValue} and HTTP response
     */
    putProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo(body, productId, attributeId, id) {
      let postBody = body;

      let pathParams = {
        'product_id': productId,
        'attribute_id': attributeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttributeValue;

      return this.apiClient.callApi(
        '/products/{product_id}/variation_attributes/{attribute_id}/values/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to create a product variation attribute value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttributeValue}
     */
    putProductsByIDVariationAttributesByIDValuesByID(body, productId, attributeId, id) {
      return this.putProductsByIDVariationAttributesByIDValuesByIDWithHttpInfo(body, productId, attributeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Assign a variation group for a product master.  If the variation group product does not initially exist,  one is created using the body passed in.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationGroup} and HTTP response
     */
    putProductsByIDVariationGroupsByIDWithHttpInfo(body, masterProductId, id) {
      let postBody = body;

      let pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationGroup;

      return this.apiClient.callApi(
        '/products/{master_product_id}/variation_groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Assign a variation group for a product master.  If the variation group product does not initially exist,  one is created using the body passed in.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationGroup}
     */
    putProductsByIDVariationGroupsByID(body, masterProductId, id) {
      return this.putProductsByIDVariationGroupsByIDWithHttpInfo(body, masterProductId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Assign a variation for a product master.  If the variation product does not initially exist,  one is created using the body passed in.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Variant} and HTTP response
     */
    putProductsByIDVariationsByIDWithHttpInfo(body, masterProductId, id) {
      let postBody = body;

      let pathParams = {
        'master_product_id': masterProductId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Variant;

      return this.apiClient.callApi(
        '/products/{master_product_id}/variations/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Assign a variation for a product master.  If the variation product does not initially exist,  one is created using the body passed in.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Variant}
     */
    putProductsByIDVariationsByID(body, masterProductId, id) {
      return this.putProductsByIDVariationsByIDWithHttpInfo(body, masterProductId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
