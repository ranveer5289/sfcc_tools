/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Customer', 'model/CustomerAddress', 'model/CustomerAddressResult', 'model/CustomerList', 'model/CustomerSearchResult', 'model/SearchRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Customer'), require('../model/CustomerAddress'), require('../model/CustomerAddressResult'), require('../model/CustomerList'), require('../model/CustomerSearchResult'), require('../model/SearchRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.CustomerListsApi = factory(root.DataApi.ApiClient, root.DataApi.Customer, root.DataApi.CustomerAddress, root.DataApi.CustomerAddressResult, root.DataApi.CustomerList, root.DataApi.CustomerSearchResult, root.DataApi.SearchRequest);
  }
}(this, function(ApiClient, Customer, CustomerAddress, CustomerAddressResult, CustomerList, CustomerSearchResult, SearchRequest) {
  'use strict';

  /**
   * CustomerLists service.
   * @module api/CustomerListsApi
   * @version 20.4
   */

  /**
   * Constructs a new CustomerListsApi. 
   * @alias module:api/CustomerListsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Deletes the customer including all related information like the customer addresses.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCustomerListsByIDCustomersByIDWithHttpInfo = function(listId, customerNo) {
      var postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling deleteCustomerListsByIDCustomersByID");
      }
      // verify the required parameter 'customerNo' is set
      if (customerNo === undefined || customerNo === null) {
        throw new Error("Missing the required parameter 'customerNo' when calling deleteCustomerListsByIDCustomersByID");
      }

      var pathParams = {
        'list_id': listId,
        'customer_no': customerNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/customer_lists/{list_id}/customers/{customer_no}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the customer including all related information like the customer addresses.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCustomerListsByIDCustomersByID = function(listId, customerNo) {
      return this.deleteCustomerListsByIDCustomersByIDWithHttpInfo(listId, customerNo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action which deletes a customer address.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @param {String} addressId The address id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCustomerListsByIDCustomersByIDAddressesByIDWithHttpInfo = function(listId, customerNo, addressId) {
      var postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling deleteCustomerListsByIDCustomersByIDAddressesByID");
      }
      // verify the required parameter 'customerNo' is set
      if (customerNo === undefined || customerNo === null) {
        throw new Error("Missing the required parameter 'customerNo' when calling deleteCustomerListsByIDCustomersByIDAddressesByID");
      }
      // verify the required parameter 'addressId' is set
      if (addressId === undefined || addressId === null) {
        throw new Error("Missing the required parameter 'addressId' when calling deleteCustomerListsByIDCustomersByIDAddressesByID");
      }

      var pathParams = {
        'list_id': listId,
        'customer_no': customerNo,
        'address_id': addressId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/customer_lists/{list_id}/customers/{customer_no}/addresses/{address_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action which deletes a customer address.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @param {String} addressId The address id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCustomerListsByIDCustomersByIDAddressesByID = function(listId, customerNo, addressId) {
      return this.deleteCustomerListsByIDCustomersByIDAddressesByIDWithHttpInfo(listId, customerNo, addressId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to read an existing customerlist.
     * @param {String} listId the id of the customerlist
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerList} and HTTP response
     */
    this.getCustomerListsByIDWithHttpInfo = function(listId) {
      var postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomerListsByID");
      }

      var pathParams = {
        'list_id': listId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerList;
      return this.apiClient.callApi(
        '/customer_lists/{list_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to read an existing customerlist.
     * @param {String} listId the id of the customerlist
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerList}
     */
    this.getCustomerListsByID = function(listId) {
      return this.getCustomerListsByIDWithHttpInfo(listId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get customer information.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.getCustomerListsByIDCustomersByIDWithHttpInfo = function(listId, customerNo) {
      var postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomerListsByIDCustomersByID");
      }
      // verify the required parameter 'customerNo' is set
      if (customerNo === undefined || customerNo === null) {
        throw new Error("Missing the required parameter 'customerNo' when calling getCustomerListsByIDCustomersByID");
      }

      var pathParams = {
        'list_id': listId,
        'customer_no': customerNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Customer;
      return this.apiClient.callApi(
        '/customer_lists/{list_id}/customers/{customer_no}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get customer information.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.getCustomerListsByIDCustomersByID = function(listId, customerNo) {
      return this.getCustomerListsByIDCustomersByIDWithHttpInfo(listId, customerNo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action that returns a pageable list of all customer addresses. The  default page size is 10 customer addresses.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerAddressResult} and HTTP response
     */
    this.getCustomerListsByIDCustomersByIDAddressesWithHttpInfo = function(listId, customerNo, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomerListsByIDCustomersByIDAddresses");
      }
      // verify the required parameter 'customerNo' is set
      if (customerNo === undefined || customerNo === null) {
        throw new Error("Missing the required parameter 'customerNo' when calling getCustomerListsByIDCustomersByIDAddresses");
      }

      var pathParams = {
        'list_id': listId,
        'customer_no': customerNo
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerAddressResult;
      return this.apiClient.callApi(
        '/customer_lists/{list_id}/customers/{customer_no}/addresses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action that returns a pageable list of all customer addresses. The  default page size is 10 customer addresses.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerAddressResult}
     */
    this.getCustomerListsByIDCustomersByIDAddresses = function(listId, customerNo, opts) {
      return this.getCustomerListsByIDCustomersByIDAddressesWithHttpInfo(listId, customerNo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action which returns an address of a customer.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @param {String} addressId The address id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerAddress} and HTTP response
     */
    this.getCustomerListsByIDCustomersByIDAddressesByIDWithHttpInfo = function(listId, customerNo, addressId) {
      var postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomerListsByIDCustomersByIDAddressesByID");
      }
      // verify the required parameter 'customerNo' is set
      if (customerNo === undefined || customerNo === null) {
        throw new Error("Missing the required parameter 'customerNo' when calling getCustomerListsByIDCustomersByIDAddressesByID");
      }
      // verify the required parameter 'addressId' is set
      if (addressId === undefined || addressId === null) {
        throw new Error("Missing the required parameter 'addressId' when calling getCustomerListsByIDCustomersByIDAddressesByID");
      }

      var pathParams = {
        'list_id': listId,
        'customer_no': customerNo,
        'address_id': addressId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerAddress;
      return this.apiClient.callApi(
        '/customer_lists/{list_id}/customers/{customer_no}/addresses/{address_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action which returns an address of a customer.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @param {String} addressId The address id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerAddress}
     */
    this.getCustomerListsByIDCustomersByIDAddressesByID = function(listId, customerNo, addressId) {
      return this.getCustomerListsByIDCustomersByIDAddressesByIDWithHttpInfo(listId, customerNo, addressId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the customer with the specified information. The customer number is allowed to be updated but will result in a  CustomerNumberAlreadyInUseException if there is already another customer with the same customer number existing.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @param {module:model/Customer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.patchCustomerListsByIDCustomersByIDWithHttpInfo = function(listId, customerNo, body) {
      var postBody = body;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling patchCustomerListsByIDCustomersByID");
      }
      // verify the required parameter 'customerNo' is set
      if (customerNo === undefined || customerNo === null) {
        throw new Error("Missing the required parameter 'customerNo' when calling patchCustomerListsByIDCustomersByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomerListsByIDCustomersByID");
      }

      var pathParams = {
        'list_id': listId,
        'customer_no': customerNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Customer;
      return this.apiClient.callApi(
        '/customer_lists/{list_id}/customers/{customer_no}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the customer with the specified information. The customer number is allowed to be updated but will result in a  CustomerNumberAlreadyInUseException if there is already another customer with the same customer number existing.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @param {module:model/Customer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.patchCustomerListsByIDCustomersByID = function(listId, customerNo, body) {
      return this.patchCustomerListsByIDCustomersByIDWithHttpInfo(listId, customerNo, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action which updates an address of a customer with the given address information.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @param {String} addressId The address id
     * @param {module:model/CustomerAddress} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerAddress} and HTTP response
     */
    this.patchCustomerListsByIDCustomersByIDAddressesByIDWithHttpInfo = function(listId, customerNo, addressId, body) {
      var postBody = body;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling patchCustomerListsByIDCustomersByIDAddressesByID");
      }
      // verify the required parameter 'customerNo' is set
      if (customerNo === undefined || customerNo === null) {
        throw new Error("Missing the required parameter 'customerNo' when calling patchCustomerListsByIDCustomersByIDAddressesByID");
      }
      // verify the required parameter 'addressId' is set
      if (addressId === undefined || addressId === null) {
        throw new Error("Missing the required parameter 'addressId' when calling patchCustomerListsByIDCustomersByIDAddressesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomerListsByIDCustomersByIDAddressesByID");
      }

      var pathParams = {
        'list_id': listId,
        'customer_no': customerNo,
        'address_id': addressId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerAddress;
      return this.apiClient.callApi(
        '/customer_lists/{list_id}/customers/{customer_no}/addresses/{address_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action which updates an address of a customer with the given address information.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @param {String} addressId The address id
     * @param {module:model/CustomerAddress} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerAddress}
     */
    this.patchCustomerListsByIDCustomersByIDAddressesByID = function(listId, customerNo, addressId, body) {
      return this.patchCustomerListsByIDCustomersByIDAddressesByIDWithHttpInfo(listId, customerNo, addressId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to search for customers in a customer list.   The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    customer_no - String  first_name - String  second_name - String  last_name - String  suffix - String  salutation - String  title - String  fax - String  phone_home - String  phone_business - String  phone_mobile - String  email - String  gender - Integer  company_name - String  credentials.login - String  credentials.enabled - boolean  
     * @param {String} customerListId The customer list id to search in
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerSearchResult} and HTTP response
     */
    this.postCustomerListsByIDCustomerSearchWithHttpInfo = function(customerListId, body) {
      var postBody = body;
      // verify the required parameter 'customerListId' is set
      if (customerListId === undefined || customerListId === null) {
        throw new Error("Missing the required parameter 'customerListId' when calling postCustomerListsByIDCustomerSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomerListsByIDCustomerSearch");
      }

      var pathParams = {
        'customer_list_id': customerListId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerSearchResult;
      return this.apiClient.callApi(
        '/customer_lists/{customer_list_id}/customer_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to search for customers in a customer list.   The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    customer_no - String  first_name - String  second_name - String  last_name - String  suffix - String  salutation - String  title - String  fax - String  phone_home - String  phone_business - String  phone_mobile - String  email - String  gender - Integer  company_name - String  credentials.login - String  credentials.enabled - boolean  
     * @param {String} customerListId The customer list id to search in
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerSearchResult}
     */
    this.postCustomerListsByIDCustomerSearch = function(customerListId, body) {
      return this.postCustomerListsByIDCustomerSearchWithHttpInfo(customerListId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to create a new customer. The customer is created using the specified credentials and customer  information.This action verifies the following:    Login acceptance criteria and uniqueness  Mandatory customer properties    If the action fails to create the customer, it returns a 400 fault with an appropriate message.
     * @param {String} listId The customer list id
     * @param {module:model/Customer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.postCustomerListsByIDCustomersWithHttpInfo = function(listId, body) {
      var postBody = body;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling postCustomerListsByIDCustomers");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomerListsByIDCustomers");
      }

      var pathParams = {
        'list_id': listId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Customer;
      return this.apiClient.callApi(
        '/customer_lists/{list_id}/customers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to create a new customer. The customer is created using the specified credentials and customer  information.This action verifies the following:    Login acceptance criteria and uniqueness  Mandatory customer properties    If the action fails to create the customer, it returns a 400 fault with an appropriate message.
     * @param {String} listId The customer list id
     * @param {module:model/Customer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.postCustomerListsByIDCustomers = function(listId, body) {
      return this.postCustomerListsByIDCustomersWithHttpInfo(listId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * The action creates a new customer address with the given address  information.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @param {module:model/CustomerAddress} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerAddress} and HTTP response
     */
    this.postCustomerListsByIDCustomersByIDAddressesWithHttpInfo = function(listId, customerNo, body) {
      var postBody = body;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling postCustomerListsByIDCustomersByIDAddresses");
      }
      // verify the required parameter 'customerNo' is set
      if (customerNo === undefined || customerNo === null) {
        throw new Error("Missing the required parameter 'customerNo' when calling postCustomerListsByIDCustomersByIDAddresses");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomerListsByIDCustomersByIDAddresses");
      }

      var pathParams = {
        'list_id': listId,
        'customer_no': customerNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerAddress;
      return this.apiClient.callApi(
        '/customer_lists/{list_id}/customers/{customer_no}/addresses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * The action creates a new customer address with the given address  information.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @param {module:model/CustomerAddress} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerAddress}
     */
    this.postCustomerListsByIDCustomersByIDAddresses = function(listId, customerNo, body) {
      return this.postCustomerListsByIDCustomersByIDAddressesWithHttpInfo(listId, customerNo, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to create a new customer. The customer is created using the specified customer number, credentials and  customer information.This action verifies the following:    Login acceptance criteria and uniqueness  Mandatory customer properties    If the action fails to create the customer, it returns a 400 fault with an appropriate message.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @param {module:model/Customer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.putCustomerListsByIDCustomersByIDWithHttpInfo = function(listId, customerNo, body) {
      var postBody = body;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling putCustomerListsByIDCustomersByID");
      }
      // verify the required parameter 'customerNo' is set
      if (customerNo === undefined || customerNo === null) {
        throw new Error("Missing the required parameter 'customerNo' when calling putCustomerListsByIDCustomersByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCustomerListsByIDCustomersByID");
      }

      var pathParams = {
        'list_id': listId,
        'customer_no': customerNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Customer;
      return this.apiClient.callApi(
        '/customer_lists/{list_id}/customers/{customer_no}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to create a new customer. The customer is created using the specified customer number, credentials and  customer information.This action verifies the following:    Login acceptance criteria and uniqueness  Mandatory customer properties    If the action fails to create the customer, it returns a 400 fault with an appropriate message.
     * @param {String} listId The customer list id
     * @param {String} customerNo The customer number
     * @param {module:model/Customer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.putCustomerListsByIDCustomersByID = function(listId, customerNo, body) {
      return this.putCustomerListsByIDCustomersByIDWithHttpInfo(listId, customerNo, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
