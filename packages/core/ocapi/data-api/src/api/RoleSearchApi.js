/**
 * Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import RoleSearchRequest from '../models/RoleSearchRequest';
import RoleSearchResult from '../models/RoleSearchResult';

/**
* RoleSearch service.
* @module api/RoleSearchApi
* @version 20.8
*/
export default class RoleSearchApi {

    /**
    * Constructs a new RoleSearchApi. 
    * @alias module:api/RoleSearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Searches for access roles.  The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String    Optionally, a user ID (the user login) can be specified. When it is supplied, the search for roles is limited to the  roles assigned to this user. When expanding the permissions for the roles, all effective permissions for this user can be retrieved.   Optionally, a (single) permission can be specified. When it is supplied, the search for roles is limited to the  roles having this permission. When expanding the users for the roles, all users having this permission can be retrieved.   The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/RoleSearchResult} and HTTP response
     */
    postRoleSearchWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = RoleSearchResult;

      return this.apiClient.callApi(
        '/role_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for access roles.  The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String    Optionally, a user ID (the user login) can be specified. When it is supplied, the search for roles is limited to the  roles assigned to this user. When expanding the permissions for the roles, all effective permissions for this user can be retrieved.   Optionally, a (single) permission can be specified. When it is supplied, the search for roles is limited to the  roles having this permission. When expanding the users for the roles, all users having this permission can be retrieved.   The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/RoleSearchResult}
     */
    postRoleSearch(body) {
      return this.postRoleSearchWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
