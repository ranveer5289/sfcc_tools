/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RoleSearchRequest', 'model/RoleSearchResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RoleSearchRequest'), require('../model/RoleSearchResult'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.RoleSearchApi = factory(root.DataApi.ApiClient, root.DataApi.RoleSearchRequest, root.DataApi.RoleSearchResult);
  }
}(this, function(ApiClient, RoleSearchRequest, RoleSearchResult) {
  'use strict';

  /**
   * RoleSearch service.
   * @module api/RoleSearchApi
   * @version 20.8
   */

  /**
   * Constructs a new RoleSearchApi. 
   * @alias module:api/RoleSearchApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Searches for access roles.  The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String    Optionally, a user ID (the user login) can be specified. When it is supplied, the search for roles is limited to the  roles assigned to this user. When expanding the permissions for the roles, all effective permissions for this user can be retrieved.   Optionally, a (single) permission can be specified. When it is supplied, the search for roles is limited to the  roles having this permission. When expanding the users for the roles, all users having this permission can be retrieved.   The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  
     * @param {module:model/RoleSearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RoleSearchResult} and HTTP response
     */
    this.postRoleSearchWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRoleSearch");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = RoleSearchResult;
      return this.apiClient.callApi(
        '/role_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for access roles.  The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String    Optionally, a user ID (the user login) can be specified. When it is supplied, the search for roles is limited to the  roles assigned to this user. When expanding the permissions for the roles, all effective permissions for this user can be retrieved.   Optionally, a (single) permission can be specified. When it is supplied, the search for roles is limited to the  roles having this permission. When expanding the users for the roles, all users having this permission can be retrieved.   The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  
     * @param {module:model/RoleSearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RoleSearchResult}
     */
    this.postRoleSearch = function(body) {
      return this.postRoleSearchWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
