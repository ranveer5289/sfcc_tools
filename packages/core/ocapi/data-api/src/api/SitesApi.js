/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AbTest', 'model/AbTestSearchResult', 'model/AbTestSegment', 'model/AbTests', 'model/Campaign', 'model/CampaignSearchResult', 'model/Campaigns', 'model/CartridgePathAddRequest', 'model/CartridgePathApiResponse', 'model/CartridgePathCreateRequest', 'model/Coupon', 'model/CouponCodes', 'model/CouponMultiCodesRequest', 'model/CouponRedemptionSearchResult', 'model/CouponSearchResult', 'model/Coupons', 'model/CustomObject', 'model/CustomerGroup', 'model/CustomerGroupMember', 'model/CustomerGroupMemberSearchResult', 'model/CustomerGroupMembers', 'model/CustomerGroupSearchResult', 'model/CustomerGroups', 'model/GiftCertificate', 'model/GiftCertificateSearchResult', 'model/GiftCertificates', 'model/LocaleResult', 'model/OrderConfirmationStatusUpdateRequest', 'model/OrderExportStatusUpdateRequest', 'model/OrderExternalStatusUpdateRequest', 'model/OrderPaymentStatusUpdateRequest', 'model/OrderShippingStatusUpdateRequest', 'model/OrderStatusUpdateRequest', 'model/Promotion', 'model/PromotionCampaignAssignmentSearchResult', 'model/PromotionSearchResult', 'model/Promotions', 'model/RecommendersResult', 'model/SearchRequest', 'model/ShippingAddressUpdateRequest', 'model/Site', 'model/SitePreferences', 'model/Sites', 'model/Slot', 'model/SlotConfiguration', 'model/SlotConfigurationCampaignAssignment', 'model/SlotConfigurationCampaignAssignmentSearchResult', 'model/SlotConfigurationSearchResult', 'model/SlotConfigurations', 'model/SlotSearchResult', 'model/Slots', 'model/SortingRuleSearchResult', 'model/SourceCodeGroup', 'model/SourceCodeGroupSearchResult', 'model/SourceCodeGroups', 'model/Store', 'model/StoreSearchResult', 'model/Stores'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AbTest'), require('../model/AbTestSearchResult'), require('../model/AbTestSegment'), require('../model/AbTests'), require('../model/Campaign'), require('../model/CampaignSearchResult'), require('../model/Campaigns'), require('../model/CartridgePathAddRequest'), require('../model/CartridgePathApiResponse'), require('../model/CartridgePathCreateRequest'), require('../model/Coupon'), require('../model/CouponCodes'), require('../model/CouponMultiCodesRequest'), require('../model/CouponRedemptionSearchResult'), require('../model/CouponSearchResult'), require('../model/Coupons'), require('../model/CustomObject'), require('../model/CustomerGroup'), require('../model/CustomerGroupMember'), require('../model/CustomerGroupMemberSearchResult'), require('../model/CustomerGroupMembers'), require('../model/CustomerGroupSearchResult'), require('../model/CustomerGroups'), require('../model/GiftCertificate'), require('../model/GiftCertificateSearchResult'), require('../model/GiftCertificates'), require('../model/LocaleResult'), require('../model/OrderConfirmationStatusUpdateRequest'), require('../model/OrderExportStatusUpdateRequest'), require('../model/OrderExternalStatusUpdateRequest'), require('../model/OrderPaymentStatusUpdateRequest'), require('../model/OrderShippingStatusUpdateRequest'), require('../model/OrderStatusUpdateRequest'), require('../model/Promotion'), require('../model/PromotionCampaignAssignmentSearchResult'), require('../model/PromotionSearchResult'), require('../model/Promotions'), require('../model/RecommendersResult'), require('../model/SearchRequest'), require('../model/ShippingAddressUpdateRequest'), require('../model/Site'), require('../model/SitePreferences'), require('../model/Sites'), require('../model/Slot'), require('../model/SlotConfiguration'), require('../model/SlotConfigurationCampaignAssignment'), require('../model/SlotConfigurationCampaignAssignmentSearchResult'), require('../model/SlotConfigurationSearchResult'), require('../model/SlotConfigurations'), require('../model/SlotSearchResult'), require('../model/Slots'), require('../model/SortingRuleSearchResult'), require('../model/SourceCodeGroup'), require('../model/SourceCodeGroupSearchResult'), require('../model/SourceCodeGroups'), require('../model/Store'), require('../model/StoreSearchResult'), require('../model/Stores'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.SitesApi = factory(root.DataApi.ApiClient, root.DataApi.AbTest, root.DataApi.AbTestSearchResult, root.DataApi.AbTestSegment, root.DataApi.AbTests, root.DataApi.Campaign, root.DataApi.CampaignSearchResult, root.DataApi.Campaigns, root.DataApi.CartridgePathAddRequest, root.DataApi.CartridgePathApiResponse, root.DataApi.CartridgePathCreateRequest, root.DataApi.Coupon, root.DataApi.CouponCodes, root.DataApi.CouponMultiCodesRequest, root.DataApi.CouponRedemptionSearchResult, root.DataApi.CouponSearchResult, root.DataApi.Coupons, root.DataApi.CustomObject, root.DataApi.CustomerGroup, root.DataApi.CustomerGroupMember, root.DataApi.CustomerGroupMemberSearchResult, root.DataApi.CustomerGroupMembers, root.DataApi.CustomerGroupSearchResult, root.DataApi.CustomerGroups, root.DataApi.GiftCertificate, root.DataApi.GiftCertificateSearchResult, root.DataApi.GiftCertificates, root.DataApi.LocaleResult, root.DataApi.OrderConfirmationStatusUpdateRequest, root.DataApi.OrderExportStatusUpdateRequest, root.DataApi.OrderExternalStatusUpdateRequest, root.DataApi.OrderPaymentStatusUpdateRequest, root.DataApi.OrderShippingStatusUpdateRequest, root.DataApi.OrderStatusUpdateRequest, root.DataApi.Promotion, root.DataApi.PromotionCampaignAssignmentSearchResult, root.DataApi.PromotionSearchResult, root.DataApi.Promotions, root.DataApi.RecommendersResult, root.DataApi.SearchRequest, root.DataApi.ShippingAddressUpdateRequest, root.DataApi.Site, root.DataApi.SitePreferences, root.DataApi.Sites, root.DataApi.Slot, root.DataApi.SlotConfiguration, root.DataApi.SlotConfigurationCampaignAssignment, root.DataApi.SlotConfigurationCampaignAssignmentSearchResult, root.DataApi.SlotConfigurationSearchResult, root.DataApi.SlotConfigurations, root.DataApi.SlotSearchResult, root.DataApi.Slots, root.DataApi.SortingRuleSearchResult, root.DataApi.SourceCodeGroup, root.DataApi.SourceCodeGroupSearchResult, root.DataApi.SourceCodeGroups, root.DataApi.Store, root.DataApi.StoreSearchResult, root.DataApi.Stores);
  }
}(this, function(ApiClient, AbTest, AbTestSearchResult, AbTestSegment, AbTests, Campaign, CampaignSearchResult, Campaigns, CartridgePathAddRequest, CartridgePathApiResponse, CartridgePathCreateRequest, Coupon, CouponCodes, CouponMultiCodesRequest, CouponRedemptionSearchResult, CouponSearchResult, Coupons, CustomObject, CustomerGroup, CustomerGroupMember, CustomerGroupMemberSearchResult, CustomerGroupMembers, CustomerGroupSearchResult, CustomerGroups, GiftCertificate, GiftCertificateSearchResult, GiftCertificates, LocaleResult, OrderConfirmationStatusUpdateRequest, OrderExportStatusUpdateRequest, OrderExternalStatusUpdateRequest, OrderPaymentStatusUpdateRequest, OrderShippingStatusUpdateRequest, OrderStatusUpdateRequest, Promotion, PromotionCampaignAssignmentSearchResult, PromotionSearchResult, Promotions, RecommendersResult, SearchRequest, ShippingAddressUpdateRequest, Site, SitePreferences, Sites, Slot, SlotConfiguration, SlotConfigurationCampaignAssignment, SlotConfigurationCampaignAssignmentSearchResult, SlotConfigurationSearchResult, SlotConfigurations, SlotSearchResult, Slots, SortingRuleSearchResult, SourceCodeGroup, SourceCodeGroupSearchResult, SourceCodeGroups, Store, StoreSearchResult, Stores) {
  'use strict';

  /**
   * Sites service.
   * @module api/SitesApi
   * @version 20.8
   */

  /**
   * Constructs a new SitesApi. 
   * @alias module:api/SitesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Deletes the A/B Test by ID
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDAbTestsByIDWithHttpInfo = function(siteId, id) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDAbTestsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSitesByIDAbTestsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the A/B Test by ID
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDAbTestsByID = function(siteId, id) {
      return this.deleteSitesByIDAbTestsByIDWithHttpInfo(siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the A/B Test Segment by ID
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @param {String} segmentId The id of the segment in the test.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo = function(siteId, id, segmentId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDAbTestsByIDSegmentsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSitesByIDAbTestsByIDSegmentsByID");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling deleteSitesByIDAbTestsByIDSegmentsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id,
        'segment_id': segmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}/segments/{segment_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the A/B Test Segment by ID
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @param {String} segmentId The id of the segment in the test.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDAbTestsByIDSegmentsByID = function(siteId, id, segmentId) {
      return this.deleteSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo(siteId, id, segmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind one promotions from a given abTest.
     * @param {String} siteId 
     * @param {String} abTestId The abTest ID that promotions are to be unbound from
     * @param {String} segmentId the segment to bind to
     * @param {String} promotionId The ID of the promotion that is to be assigned to the abTest.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDWithHttpInfo = function(siteId, abTestId, segmentId, promotionId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByID");
      }
      // verify the required parameter 'abTestId' is set
      if (abTestId === undefined || abTestId === null) {
        throw new Error("Missing the required parameter 'abTestId' when calling deleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByID");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling deleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByID");
      }
      // verify the required parameter 'promotionId' is set
      if (promotionId === undefined || promotionId === null) {
        throw new Error("Missing the required parameter 'promotionId' when calling deleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'ab_test_id': abTestId,
        'segment_id': segmentId,
        'promotion_id': promotionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/promotions/{promotion_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to unbind one promotions from a given abTest.
     * @param {String} siteId 
     * @param {String} abTestId The abTest ID that promotions are to be unbound from
     * @param {String} segmentId the segment to bind to
     * @param {String} promotionId The ID of the promotion that is to be assigned to the abTest.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByID = function(siteId, abTestId, segmentId, promotionId) {
      return this.deleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDWithHttpInfo(siteId, abTestId, segmentId, promotionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a slot configuration from a given abTest.
     * @param {String} abTestId The id of the abTest
     * @param {String} segmentId 
     * @param {String} siteId The id of the site
     * @param {String} slotId The of the slot
     * @param {String} slotConfigId The id of the slot configuration
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDWithHttpInfo = function(abTestId, segmentId, siteId, slotId, slotConfigId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'abTestId' is set
      if (abTestId === undefined || abTestId === null) {
        throw new Error("Missing the required parameter 'abTestId' when calling deleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling deleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'slotId' is set
      if (slotId === undefined || slotId === null) {
        throw new Error("Missing the required parameter 'slotId' when calling deleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'slotConfigId' is set
      if (slotConfigId === undefined || slotConfigId === null) {
        throw new Error("Missing the required parameter 'slotConfigId' when calling deleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID");
      }

      var pathParams = {
        'ab_test_id': abTestId,
        'segment_id': segmentId,
        'site_id': siteId,
        'slot_id': slotId,
        'slot_config_id': slotConfigId
      };
      var queryParams = {
        'context': opts['context'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/slot_configurations/{slot_id}/{slot_config_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to unbind a slot configuration from a given abTest.
     * @param {String} abTestId The id of the abTest
     * @param {String} segmentId 
     * @param {String} siteId The id of the site
     * @param {String} slotId The of the slot
     * @param {String} slotConfigId The id of the slot configuration
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID = function(abTestId, segmentId, siteId, slotId, slotConfigId, opts) {
      return this.deleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDWithHttpInfo(abTestId, segmentId, siteId, slotId, slotConfigId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a single sorting rule from a given abTest.
     * @param {String} siteId The ID of the site that contains the abTest, sorting rule and category.
     * @param {String} abTestId The ID of the abTest to which the sorting rule is to be assigned.
     * @param {String} segmentId 
     * @param {String} sortingRuleId The ID of sorting rule that is to be assigned to the abTest.
     * @param {String} categoryId The ID of the category that is associated with the sorting rule.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ruleContext 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDWithHttpInfo = function(siteId, abTestId, segmentId, sortingRuleId, categoryId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID");
      }
      // verify the required parameter 'abTestId' is set
      if (abTestId === undefined || abTestId === null) {
        throw new Error("Missing the required parameter 'abTestId' when calling deleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling deleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID");
      }
      // verify the required parameter 'sortingRuleId' is set
      if (sortingRuleId === undefined || sortingRuleId === null) {
        throw new Error("Missing the required parameter 'sortingRuleId' when calling deleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID");
      }

      var pathParams = {
        'site_id': siteId,
        'ab_test_id': abTestId,
        'segment_id': segmentId,
        'sorting_rule_id': sortingRuleId,
        'category_id': categoryId
      };
      var queryParams = {
        'rule_context': opts['ruleContext'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/sorting_rules/{sorting_rule_id}/{category_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to unbind a single sorting rule from a given abTest.
     * @param {String} siteId The ID of the site that contains the abTest, sorting rule and category.
     * @param {String} abTestId The ID of the abTest to which the sorting rule is to be assigned.
     * @param {String} segmentId 
     * @param {String} sortingRuleId The ID of sorting rule that is to be assigned to the abTest.
     * @param {String} categoryId The ID of the category that is associated with the sorting rule.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ruleContext 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID = function(siteId, abTestId, segmentId, sortingRuleId, categoryId, opts) {
      return this.deleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDWithHttpInfo(siteId, abTestId, segmentId, sortingRuleId, categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the campaign by ID
     * @param {String} siteId The site context.
     * @param {String} campaignId A campaign id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDCampaignsByIDWithHttpInfo = function(siteId, campaignId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDCampaignsByID");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteSitesByIDCampaignsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the campaign by ID
     * @param {String} siteId The site context.
     * @param {String} campaignId A campaign id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDCampaignsByID = function(siteId, campaignId) {
      return this.deleteSitesByIDCampaignsByIDWithHttpInfo(siteId, campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a coupon from a given campaign.
     * @param {String} siteId 
     * @param {String} campaignId The campaign ID that coupons are to be unbound from
     * @param {String} couponId The coupon ID to unbind from a campaign
     * @param {Object} opts Optional parameters
     * @param {String} opts.removeInPCA 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDCampaignsByIDCouponsByIDWithHttpInfo = function(siteId, campaignId, couponId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDCampaignsByIDCouponsByID");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteSitesByIDCampaignsByIDCouponsByID");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling deleteSitesByIDCampaignsByIDCouponsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'coupon_id': couponId
      };
      var queryParams = {
        'removeInPCA': opts['removeInPCA'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/coupons/{coupon_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to unbind a coupon from a given campaign.
     * @param {String} siteId 
     * @param {String} campaignId The campaign ID that coupons are to be unbound from
     * @param {String} couponId The coupon ID to unbind from a campaign
     * @param {Object} opts Optional parameters
     * @param {String} opts.removeInPCA 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDCampaignsByIDCouponsByID = function(siteId, campaignId, couponId, opts) {
      return this.deleteSitesByIDCampaignsByIDCouponsByIDWithHttpInfo(siteId, campaignId, couponId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a customer group from a given campaign.
     * @param {String} siteId 
     * @param {String} campaignId The campaign ID that coupons are to be unbound from
     * @param {String} customerGroupId The customer group ID to unbind from a campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDCampaignsByIDCustomerGroupsByIDWithHttpInfo = function(siteId, campaignId, customerGroupId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDCampaignsByIDCustomerGroupsByID");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteSitesByIDCampaignsByIDCustomerGroupsByID");
      }
      // verify the required parameter 'customerGroupId' is set
      if (customerGroupId === undefined || customerGroupId === null) {
        throw new Error("Missing the required parameter 'customerGroupId' when calling deleteSitesByIDCampaignsByIDCustomerGroupsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'customer_group_id': customerGroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/customer_groups/{customer_group_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to unbind a customer group from a given campaign.
     * @param {String} siteId 
     * @param {String} campaignId The campaign ID that coupons are to be unbound from
     * @param {String} customerGroupId The customer group ID to unbind from a campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDCampaignsByIDCustomerGroupsByID = function(siteId, campaignId, customerGroupId) {
      return this.deleteSitesByIDCampaignsByIDCustomerGroupsByIDWithHttpInfo(siteId, campaignId, customerGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a single promotion from a given campaign.
     * @param {String} siteId The ID of the site that contains the campaign and promotion.
     * @param {String} campaignId The ID of the campaign to which the promotion is to be assigned.
     * @param {String} promotionId The ID of the promotion that is to be assigned to the campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDCampaignsByIDPromotionsByIDWithHttpInfo = function(siteId, campaignId, promotionId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDCampaignsByIDPromotionsByID");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteSitesByIDCampaignsByIDPromotionsByID");
      }
      // verify the required parameter 'promotionId' is set
      if (promotionId === undefined || promotionId === null) {
        throw new Error("Missing the required parameter 'promotionId' when calling deleteSitesByIDCampaignsByIDPromotionsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'promotion_id': promotionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/promotions/{promotion_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to unbind a single promotion from a given campaign.
     * @param {String} siteId The ID of the site that contains the campaign and promotion.
     * @param {String} campaignId The ID of the campaign to which the promotion is to be assigned.
     * @param {String} promotionId The ID of the promotion that is to be assigned to the campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDCampaignsByIDPromotionsByID = function(siteId, campaignId, promotionId) {
      return this.deleteSitesByIDCampaignsByIDPromotionsByIDWithHttpInfo(siteId, campaignId, promotionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a slot configuration from a given campaign.
     * @param {String} campaignId The id of the campaign
     * @param {String} siteId The id of the site
     * @param {String} slotId The of the slot
     * @param {String} slotConfigId The id of the slot configuration
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDCampaignsByIDSlotConfigurationsByIDByIDWithHttpInfo = function(campaignId, siteId, slotId, slotConfigId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteSitesByIDCampaignsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDCampaignsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'slotId' is set
      if (slotId === undefined || slotId === null) {
        throw new Error("Missing the required parameter 'slotId' when calling deleteSitesByIDCampaignsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'slotConfigId' is set
      if (slotConfigId === undefined || slotConfigId === null) {
        throw new Error("Missing the required parameter 'slotConfigId' when calling deleteSitesByIDCampaignsByIDSlotConfigurationsByIDByID");
      }

      var pathParams = {
        'campaign_id': campaignId,
        'site_id': siteId,
        'slot_id': slotId,
        'slot_config_id': slotConfigId
      };
      var queryParams = {
        'context': opts['context'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/slot_configurations/{slot_id}/{slot_config_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to unbind a slot configuration from a given campaign.
     * @param {String} campaignId The id of the campaign
     * @param {String} siteId The id of the site
     * @param {String} slotId The of the slot
     * @param {String} slotConfigId The id of the slot configuration
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDCampaignsByIDSlotConfigurationsByIDByID = function(campaignId, siteId, slotId, slotConfigId, opts) {
      return this.deleteSitesByIDCampaignsByIDSlotConfigurationsByIDByIDWithHttpInfo(campaignId, siteId, slotId, slotConfigId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a single sorting rule from a given campaign.
     * @param {String} siteId The ID of the site that contains the campaign, sorting rule and category.
     * @param {String} campaignId The ID of the campaign to which the sorting rule is to be assigned.
     * @param {String} sortingRuleId The ID of sorting rule that is to be assigned to the campaign.
     * @param {String} categoryId The ID of the category that is associated with the sorting rule.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ruleContext 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDCampaignsByIDSortingRulesByIDByIDWithHttpInfo = function(siteId, campaignId, sortingRuleId, categoryId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDCampaignsByIDSortingRulesByIDByID");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteSitesByIDCampaignsByIDSortingRulesByIDByID");
      }
      // verify the required parameter 'sortingRuleId' is set
      if (sortingRuleId === undefined || sortingRuleId === null) {
        throw new Error("Missing the required parameter 'sortingRuleId' when calling deleteSitesByIDCampaignsByIDSortingRulesByIDByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteSitesByIDCampaignsByIDSortingRulesByIDByID");
      }

      var pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'sorting_rule_id': sortingRuleId,
        'category_id': categoryId
      };
      var queryParams = {
        'rule_context': opts['ruleContext'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/sorting_rules/{sorting_rule_id}/{category_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to unbind a single sorting rule from a given campaign.
     * @param {String} siteId The ID of the site that contains the campaign, sorting rule and category.
     * @param {String} campaignId The ID of the campaign to which the sorting rule is to be assigned.
     * @param {String} sortingRuleId The ID of sorting rule that is to be assigned to the campaign.
     * @param {String} categoryId The ID of the category that is associated with the sorting rule.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ruleContext 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDCampaignsByIDSortingRulesByIDByID = function(siteId, campaignId, sortingRuleId, categoryId, opts) {
      return this.deleteSitesByIDCampaignsByIDSortingRulesByIDByIDWithHttpInfo(siteId, campaignId, sortingRuleId, categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a source code group from a given campaign.
     * @param {String} siteId 
     * @param {String} campaignId The campaign ID that source code groups are to be unbound from
     * @param {String} sourceCodeGroupId The source code group ID to unbind from a campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDCampaignsByIDSourceCodeGroupsByIDWithHttpInfo = function(siteId, campaignId, sourceCodeGroupId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDCampaignsByIDSourceCodeGroupsByID");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteSitesByIDCampaignsByIDSourceCodeGroupsByID");
      }
      // verify the required parameter 'sourceCodeGroupId' is set
      if (sourceCodeGroupId === undefined || sourceCodeGroupId === null) {
        throw new Error("Missing the required parameter 'sourceCodeGroupId' when calling deleteSitesByIDCampaignsByIDSourceCodeGroupsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'source_code_group_id': sourceCodeGroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/source_code_groups/{source_code_group_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to unbind a source code group from a given campaign.
     * @param {String} siteId 
     * @param {String} campaignId The campaign ID that source code groups are to be unbound from
     * @param {String} sourceCodeGroupId The source code group ID to unbind from a campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDCampaignsByIDSourceCodeGroupsByID = function(siteId, campaignId, sourceCodeGroupId) {
      return this.deleteSitesByIDCampaignsByIDSourceCodeGroupsByIDWithHttpInfo(siteId, campaignId, sourceCodeGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a cartridge from cartridge path.
     * @param {String} siteId ID of the site.
     * @param {String} cartridgeName request body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CartridgePathApiResponse} and HTTP response
     */
    this.deleteSitesByIDCartridgesByIDWithHttpInfo = function(siteId, cartridgeName) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDCartridgesByID");
      }
      // verify the required parameter 'cartridgeName' is set
      if (cartridgeName === undefined || cartridgeName === null) {
        throw new Error("Missing the required parameter 'cartridgeName' when calling deleteSitesByIDCartridgesByID");
      }

      var pathParams = {
        'site_id': siteId,
        'cartridge_name': cartridgeName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CartridgePathApiResponse;
      return this.apiClient.callApi(
        '/sites/{site_id}/cartridges/{cartridge_name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a cartridge from cartridge path.
     * @param {String} siteId ID of the site.
     * @param {String} cartridgeName request body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CartridgePathApiResponse}
     */
    this.deleteSitesByIDCartridgesByID = function(siteId, cartridgeName) {
      return this.deleteSitesByIDCartridgesByIDWithHttpInfo(siteId, cartridgeName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a coupon by id.
     * @param {String} siteId The site context.
     * @param {String} couponId Id of the coupon to delete from the site.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDCouponsByIDWithHttpInfo = function(siteId, couponId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDCouponsByID");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling deleteSitesByIDCouponsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a coupon by id.
     * @param {String} siteId The site context.
     * @param {String} couponId Id of the coupon to delete from the site.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDCouponsByID = function(siteId, couponId) {
      return this.deleteSitesByIDCouponsByIDWithHttpInfo(siteId, couponId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a site specific Custom Object. If the Custom Object does not exist, this will do nothing. Note that the customization scripts are only called, if the Custom Object does exist.
     * @param {String} siteId the ID of the site
     * @param {String} objectType the ID of the object type
     * @param {String} key the key attribute value of the Custom Object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDCustomObjectsByIDByIDWithHttpInfo = function(siteId, objectType, key) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDCustomObjectsByIDByID");
      }
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling deleteSitesByIDCustomObjectsByIDByID");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSitesByIDCustomObjectsByIDByID");
      }

      var pathParams = {
        'site_id': siteId,
        'object_type': objectType,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/custom_objects/{object_type}/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a site specific Custom Object. If the Custom Object does not exist, this will do nothing. Note that the customization scripts are only called, if the Custom Object does exist.
     * @param {String} siteId the ID of the site
     * @param {String} objectType the ID of the object type
     * @param {String} key the key attribute value of the Custom Object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDCustomObjectsByIDByID = function(siteId, objectType, key) {
      return this.deleteSitesByIDCustomObjectsByIDByIDWithHttpInfo(siteId, objectType, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Triggers customer group deletion by ID. Be aware that the deletion happens via asynchronous batch process  which is the reason the deletion itself is not necessarily finished after the call to this resource returned. The   customer group that is in deletion will be provided in the response.
     * @param {String} siteId The id of the site.
     * @param {String} id One customer group id to remove
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerGroup} and HTTP response
     */
    this.deleteSitesByIDCustomerGroupsByIDWithHttpInfo = function(siteId, id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDCustomerGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSitesByIDCustomerGroupsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerGroup;
      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Triggers customer group deletion by ID. Be aware that the deletion happens via asynchronous batch process  which is the reason the deletion itself is not necessarily finished after the call to this resource returned. The   customer group that is in deletion will be provided in the response.
     * @param {String} siteId The id of the site.
     * @param {String} id One customer group id to remove
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerGroup}
     */
    this.deleteSitesByIDCustomerGroupsByID = function(siteId, id, opts) {
      return this.deleteSitesByIDCustomerGroupsByIDWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to remove a customer from a (static) customer group.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the customer group.
     * @param {String} customerNo The customer number of the customer to remove from the group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDCustomerGroupsByIDMembersByIDWithHttpInfo = function(siteId, id, customerNo, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDCustomerGroupsByIDMembersByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSitesByIDCustomerGroupsByIDMembersByID");
      }
      // verify the required parameter 'customerNo' is set
      if (customerNo === undefined || customerNo === null) {
        throw new Error("Missing the required parameter 'customerNo' when calling deleteSitesByIDCustomerGroupsByIDMembersByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id,
        'customer_no': customerNo
      };
      var queryParams = {
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}/members/{customer_no}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to remove a customer from a (static) customer group.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the customer group.
     * @param {String} customerNo The customer number of the customer to remove from the group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDCustomerGroupsByIDMembersByID = function(siteId, id, customerNo, opts) {
      return this.deleteSitesByIDCustomerGroupsByIDMembersByIDWithHttpInfo(siteId, id, customerNo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the gift certificate by merchant ID
     * @param {String} siteId The id of the site.
     * @param {String} merchantId One gift certificate merchant id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDGiftCertificatesByIDWithHttpInfo = function(siteId, merchantId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDGiftCertificatesByID");
      }
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling deleteSitesByIDGiftCertificatesByID");
      }

      var pathParams = {
        'site_id': siteId,
        'merchant_id': merchantId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/gift_certificates/{merchant_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the gift certificate by merchant ID
     * @param {String} siteId The id of the site.
     * @param {String} merchantId One gift certificate merchant id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDGiftCertificatesByID = function(siteId, merchantId) {
      return this.deleteSitesByIDGiftCertificatesByIDWithHttpInfo(siteId, merchantId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the promotion by ID
     * @param {String} siteId The site context.
     * @param {String} id Promotion id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDPromotionsByIDWithHttpInfo = function(siteId, id) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDPromotionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSitesByIDPromotionsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/promotions/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the promotion by ID
     * @param {String} siteId The site context.
     * @param {String} id Promotion id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDPromotionsByID = function(siteId, id) {
      return this.deleteSitesByIDPromotionsByIDWithHttpInfo(siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a configuration for slot in a given context from a site.
     * @param {String} siteId The id of the site for which you want to create the slot configuration.
     * @param {String} slotId The id of the slot.
     * @param {String} configurationId The id of the slot configuration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo = function(siteId, slotId, configurationId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDSlotsByIDSlotConfigurationsByID");
      }
      // verify the required parameter 'slotId' is set
      if (slotId === undefined || slotId === null) {
        throw new Error("Missing the required parameter 'slotId' when calling deleteSitesByIDSlotsByIDSlotConfigurationsByID");
      }
      // verify the required parameter 'configurationId' is set
      if (configurationId === undefined || configurationId === null) {
        throw new Error("Missing the required parameter 'configurationId' when calling deleteSitesByIDSlotsByIDSlotConfigurationsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'slot_id': slotId,
        'configuration_id': configurationId
      };
      var queryParams = {
        'context': opts['context'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/slots/{slot_id}/slot_configurations/{configuration_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Removes a configuration for slot in a given context from a site.
     * @param {String} siteId The id of the site for which you want to create the slot configuration.
     * @param {String} slotId The id of the slot.
     * @param {String} configurationId The id of the slot configuration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDSlotsByIDSlotConfigurationsByID = function(siteId, slotId, configurationId, opts) {
      return this.deleteSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo(siteId, slotId, configurationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the source code group by ID
     * @param {String} siteId The id of the site.
     * @param {String} id One source code group id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDSourceCodeGroupsByIDWithHttpInfo = function(siteId, id) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDSourceCodeGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSitesByIDSourceCodeGroupsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/source_code_groups/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the source code group by ID
     * @param {String} siteId The id of the site.
     * @param {String} id One source code group id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDSourceCodeGroupsByID = function(siteId, id) {
      return this.deleteSitesByIDSourceCodeGroupsByIDWithHttpInfo(siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the store by ID
     * @param {String} siteId The site context.
     * @param {String} id One store id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSitesByIDStoresByIDWithHttpInfo = function(siteId, id) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSitesByIDStoresByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSitesByIDStoresByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/stores/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the store by ID
     * @param {String} siteId The site context.
     * @param {String} id One store id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSitesByIDStoresByID = function(siteId, id) {
      return this.deleteSitesByIDStoresByIDWithHttpInfo(siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all existing sites.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Optional start index for retrieving the items from a given index (default 0).
     * @param {Number} opts.count Optional count for retrieving only a subset of the items (default is 25).
     * @param {String} opts.select The property selector.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Sites} and HTTP response
     */
    this.getSitesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Sites;
      return this.apiClient.callApi(
        '/sites', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all existing sites.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Optional start index for retrieving the items from a given index (default 0).
     * @param {Number} opts.count Optional count for retrieving only a subset of the items (default is 25).
     * @param {String} opts.select The property selector.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Sites}
     */
    this.getSites = function(opts) {
      return this.getSitesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to read an existing site.
     * @param {String} siteId the id of the site
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Site} and HTTP response
     */
    this.getSitesByIDWithHttpInfo = function(siteId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByID");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Site;
      return this.apiClient.callApi(
        '/sites/{site_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to read an existing site.
     * @param {String} siteId the id of the site
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Site}
     */
    this.getSitesByID = function(siteId) {
      return this.getSitesByIDWithHttpInfo(siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the A/B tests with searching.
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbTests} and HTTP response
     */
    this.getSitesByIDAbTestsWithHttpInfo = function(siteId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDAbTests");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AbTests;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the A/B tests with searching.
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbTests}
     */
    this.getSitesByIDAbTests = function(siteId, opts) {
      return this.getSitesByIDAbTestsWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get an A/B Test information.
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbTest} and HTTP response
     */
    this.getSitesByIDAbTestsByIDWithHttpInfo = function(siteId, id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDAbTestsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitesByIDAbTestsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AbTest;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get an A/B Test information.
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbTest}
     */
    this.getSitesByIDAbTestsByID = function(siteId, id, opts) {
      return this.getSitesByIDAbTestsByIDWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets an A/B Test segment using the information provided.
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @param {String} segmentId The id of the segment in the test.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbTestSegment} and HTTP response
     */
    this.getSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo = function(siteId, id, segmentId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDAbTestsByIDSegmentsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitesByIDAbTestsByIDSegmentsByID");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling getSitesByIDAbTestsByIDSegmentsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id,
        'segment_id': segmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AbTestSegment;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}/segments/{segment_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets an A/B Test segment using the information provided.
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @param {String} segmentId The id of the segment in the test.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbTestSegment}
     */
    this.getSitesByIDAbTestsByIDSegmentsByID = function(siteId, id, segmentId, opts) {
      return this.getSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo(siteId, id, segmentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of available AI recommenders. Recommenders are configured in the Einstein configurator and are required with AI recommendation API requests.
     * @param {String} siteId Site ID to get a list of recommenders for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RecommendersResult} and HTTP response
     */
    this.getSitesByIDAiRecommenderNamesWithHttpInfo = function(siteId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDAiRecommenderNames");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = RecommendersResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/ai/recommender_names', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of available AI recommenders. Recommenders are configured in the Einstein configurator and are required with AI recommendation API requests.
     * @param {String} siteId Site ID to get a list of recommenders for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RecommendersResult}
     */
    this.getSitesByIDAiRecommenderNames = function(siteId) {
      return this.getSitesByIDAiRecommenderNamesWithHttpInfo(siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get campaign information.
     * @param {String} siteId The site the requested campaign belongs to.
     * @param {String} campaignId The id of the requested campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign} and HTTP response
     */
    this.getSitesByIDCampaignsByIDWithHttpInfo = function(siteId, campaignId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDCampaignsByID");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getSitesByIDCampaignsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Campaign;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get campaign information.
     * @param {String} siteId The site the requested campaign belongs to.
     * @param {String} campaignId The id of the requested campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign}
     */
    this.getSitesByIDCampaignsByID = function(siteId, campaignId) {
      return this.getSitesByIDCampaignsByIDWithHttpInfo(siteId, campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the coupons with no filtering.
     * @param {String} siteId The site context.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Coupons} and HTTP response
     */
    this.getSitesByIDCouponsWithHttpInfo = function(siteId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDCoupons");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Coupons;
      return this.apiClient.callApi(
        '/sites/{site_id}/coupons', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the coupons with no filtering.
     * @param {String} siteId The site context.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Coupons}
     */
    this.getSitesByIDCoupons = function(siteId, opts) {
      return this.getSitesByIDCouponsWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get coupon information.   The following fields are returned in the Coupon document when specifying the stats expand:        exported_code_count      redemption_count      total_codes_count       If the role to which the user belongs does not have View_Coupon_Codes permission, then the coupon codes returned will be masked.
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the requested coupon.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Coupon} and HTTP response
     */
    this.getSitesByIDCouponsByIDWithHttpInfo = function(siteId, couponId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDCouponsByID");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling getSitesByIDCouponsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      var queryParams = {
        'select': opts['select'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Coupon;
      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get coupon information.   The following fields are returned in the Coupon document when specifying the stats expand:        exported_code_count      redemption_count      total_codes_count       If the role to which the user belongs does not have View_Coupon_Codes permission, then the coupon codes returned will be masked.
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the requested coupon.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Coupon}
     */
    this.getSitesByIDCouponsByID = function(siteId, couponId, opts) {
      return this.getSitesByIDCouponsByIDWithHttpInfo(siteId, couponId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the campaigns that have a coupon assigned to them either directly or through promotions
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the coupon that is assigned to campaigns directly or through promotions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaigns} and HTTP response
     */
    this.getSitesByIDCouponsByIDCampaignsWithHttpInfo = function(siteId, couponId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDCouponsByIDCampaigns");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling getSitesByIDCouponsByIDCampaigns");
      }

      var pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Campaigns;
      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}/campaigns', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the campaigns that have a coupon assigned to them either directly or through promotions
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the coupon that is assigned to campaigns directly or through promotions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaigns}
     */
    this.getSitesByIDCouponsByIDCampaigns = function(siteId, couponId, opts) {
      return this.getSitesByIDCouponsByIDCampaignsWithHttpInfo(siteId, couponId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the promotions for a campaign that have a coupon assigned to them either directly or through campaigns.
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the coupon that is assigned to promotions directly or through campaigns.
     * @param {String} campaignId The id of the campaign that we want to restrict the set of promotions for.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Promotions} and HTTP response
     */
    this.getSitesByIDCouponsByIDCampaignsByIDPromotionsWithHttpInfo = function(siteId, couponId, campaignId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDCouponsByIDCampaignsByIDPromotions");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling getSitesByIDCouponsByIDCampaignsByIDPromotions");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getSitesByIDCouponsByIDCampaignsByIDPromotions");
      }

      var pathParams = {
        'site_id': siteId,
        'coupon_id': couponId,
        'campaign_id': campaignId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Promotions;
      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}/campaigns/{campaign_id}/promotions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the promotions for a campaign that have a coupon assigned to them either directly or through campaigns.
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the coupon that is assigned to promotions directly or through campaigns.
     * @param {String} campaignId The id of the campaign that we want to restrict the set of promotions for.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Promotions}
     */
    this.getSitesByIDCouponsByIDCampaignsByIDPromotions = function(siteId, couponId, campaignId, opts) {
      return this.getSitesByIDCouponsByIDCampaignsByIDPromotionsWithHttpInfo(siteId, couponId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the coupon codes for the given coupon.   If the role to which the user belongs does not have View_Coupon_Codes permission, then the coupon codes returned will be masked.
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the coupon from which to delete codes (must be a multiple code coupon).
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CouponCodes} and HTTP response
     */
    this.getSitesByIDCouponsByIDCodesWithHttpInfo = function(siteId, couponId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDCouponsByIDCodes");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling getSitesByIDCouponsByIDCodes");
      }

      var pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CouponCodes;
      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}/codes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the coupon codes for the given coupon.   If the role to which the user belongs does not have View_Coupon_Codes permission, then the coupon codes returned will be masked.
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the coupon from which to delete codes (must be a multiple code coupon).
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CouponCodes}
     */
    this.getSitesByIDCouponsByIDCodes = function(siteId, couponId, opts) {
      return this.getSitesByIDCouponsByIDCodesWithHttpInfo(siteId, couponId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the promotions that have a coupon assigned to them either directly or through campaigns.
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the coupon that is assigned to promotions directly or through campaigns.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Promotions} and HTTP response
     */
    this.getSitesByIDCouponsByIDPromotionsWithHttpInfo = function(siteId, couponId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDCouponsByIDPromotions");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling getSitesByIDCouponsByIDPromotions");
      }

      var pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Promotions;
      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}/promotions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the promotions that have a coupon assigned to them either directly or through campaigns.
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the coupon that is assigned to promotions directly or through campaigns.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Promotions}
     */
    this.getSitesByIDCouponsByIDPromotions = function(siteId, couponId, opts) {
      return this.getSitesByIDCouponsByIDPromotionsWithHttpInfo(siteId, couponId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reads a site specific Custom Object with a given object type ID and a value for the key attribute of the object which represents its unique identifier.
     * @param {String} siteId the ID of the site
     * @param {String} objectType the ID of the object type
     * @param {String} key the key attribute value of the Custom Object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomObject} and HTTP response
     */
    this.getSitesByIDCustomObjectsByIDByIDWithHttpInfo = function(siteId, objectType, key) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDCustomObjectsByIDByID");
      }
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling getSitesByIDCustomObjectsByIDByID");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSitesByIDCustomObjectsByIDByID");
      }

      var pathParams = {
        'site_id': siteId,
        'object_type': objectType,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomObject;
      return this.apiClient.callApi(
        '/sites/{site_id}/custom_objects/{object_type}/{key}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reads a site specific Custom Object with a given object type ID and a value for the key attribute of the object which represents its unique identifier.
     * @param {String} siteId the ID of the site
     * @param {String} objectType the ID of the object type
     * @param {String} key the key attribute value of the Custom Object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomObject}
     */
    this.getSitesByIDCustomObjectsByIDByID = function(siteId, objectType, key) {
      return this.getSitesByIDCustomObjectsByIDByIDWithHttpInfo(siteId, objectType, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the customer groups with no filtering.
     * @param {String} siteId The site context.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerGroups} and HTTP response
     */
    this.getSitesByIDCustomerGroupsWithHttpInfo = function(siteId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDCustomerGroups");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerGroups;
      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the customer groups with no filtering.
     * @param {String} siteId The site context.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerGroups}
     */
    this.getSitesByIDCustomerGroups = function(siteId, opts) {
      return this.getSitesByIDCustomerGroupsWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get customer group information.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the requested customer group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerGroup} and HTTP response
     */
    this.getSitesByIDCustomerGroupsByIDWithHttpInfo = function(siteId, id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDCustomerGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitesByIDCustomerGroupsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerGroup;
      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get customer group information.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the requested customer group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerGroup}
     */
    this.getSitesByIDCustomerGroupsByID = function(siteId, id, opts) {
      return this.getSitesByIDCustomerGroupsByIDWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the customer group members with no filtering. For dynamic customer groups and the system groups \"Everyone\" and \"Unregistered\" no result is returned (Status Code: 204 - No Content).
     * @param {String} siteId 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerGroupMembers} and HTTP response
     */
    this.getSitesByIDCustomerGroupsByIDMembersWithHttpInfo = function(siteId, id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDCustomerGroupsByIDMembers");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitesByIDCustomerGroupsByIDMembers");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerGroupMembers;
      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}/members', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the customer group members with no filtering. For dynamic customer groups and the system groups \"Everyone\" and \"Unregistered\" no result is returned (Status Code: 204 - No Content).
     * @param {String} siteId 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerGroupMembers}
     */
    this.getSitesByIDCustomerGroupsByIDMembers = function(siteId, id, opts) {
      return this.getSitesByIDCustomerGroupsByIDMembersWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get customer group member information.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the requested members customer group.
     * @param {String} customerNo The customer number of the requested customer group member.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerGroupMember} and HTTP response
     */
    this.getSitesByIDCustomerGroupsByIDMembersByIDWithHttpInfo = function(siteId, id, customerNo, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDCustomerGroupsByIDMembersByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitesByIDCustomerGroupsByIDMembersByID");
      }
      // verify the required parameter 'customerNo' is set
      if (customerNo === undefined || customerNo === null) {
        throw new Error("Missing the required parameter 'customerNo' when calling getSitesByIDCustomerGroupsByIDMembersByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id,
        'customer_no': customerNo
      };
      var queryParams = {
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerGroupMember;
      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}/members/{customer_no}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get customer group member information.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the requested members customer group.
     * @param {String} customerNo The customer number of the requested customer group member.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerGroupMember}
     */
    this.getSitesByIDCustomerGroupsByIDMembersByID = function(siteId, id, customerNo, opts) {
      return this.getSitesByIDCustomerGroupsByIDMembersByIDWithHttpInfo(siteId, id, customerNo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the gift certificates with no filtering.
     * @param {String} siteId The site context.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GiftCertificates} and HTTP response
     */
    this.getSitesByIDGiftCertificatesWithHttpInfo = function(siteId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDGiftCertificates");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = GiftCertificates;
      return this.apiClient.callApi(
        '/sites/{site_id}/gift_certificates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the gift certificates with no filtering.
     * @param {String} siteId The site context.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GiftCertificates}
     */
    this.getSitesByIDGiftCertificates = function(siteId, opts) {
      return this.getSitesByIDGiftCertificatesWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get gift certificate information using merchant ID.
     * @param {String} siteId The id of the site.
     * @param {String} merchantId The merchant id of the requested gift certificate.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GiftCertificate} and HTTP response
     */
    this.getSitesByIDGiftCertificatesByIDWithHttpInfo = function(siteId, merchantId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDGiftCertificatesByID");
      }
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling getSitesByIDGiftCertificatesByID");
      }

      var pathParams = {
        'site_id': siteId,
        'merchant_id': merchantId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = GiftCertificate;
      return this.apiClient.callApi(
        '/sites/{site_id}/gift_certificates/{merchant_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get gift certificate information using merchant ID.
     * @param {String} siteId The id of the site.
     * @param {String} merchantId The merchant id of the requested gift certificate.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GiftCertificate}
     */
    this.getSitesByIDGiftCertificatesByID = function(siteId, merchantId) {
      return this.getSitesByIDGiftCertificatesByIDWithHttpInfo(siteId, merchantId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get the set of locales with the system given a site.
     * @param {String} siteId Only locales specified for the site are returned
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeAll 
     * @param {String} opts.id 
     * @param {String} opts.select 
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LocaleResult} and HTTP response
     */
    this.getSitesByIDLocaleInfoLocalesWithHttpInfo = function(siteId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDLocaleInfoLocales");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
        'include_all': opts['includeAll'],
        'id': opts['id'],
        'select': opts['select'],
        'start': opts['start'],
        'count': opts['count'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = LocaleResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/locale_info/locales', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get the set of locales with the system given a site.
     * @param {String} siteId Only locales specified for the site are returned
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeAll 
     * @param {String} opts.id 
     * @param {String} opts.select 
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LocaleResult}
     */
    this.getSitesByIDLocaleInfoLocales = function(siteId, opts) {
      return this.getSitesByIDLocaleInfoLocalesWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get promotion information.
     * @param {String} siteId The site context.
     * @param {String} id The id of the requested promotion.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Promotion} and HTTP response
     */
    this.getSitesByIDPromotionsByIDWithHttpInfo = function(siteId, id) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDPromotionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitesByIDPromotionsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Promotion;
      return this.apiClient.callApi(
        '/sites/{site_id}/promotions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get promotion information.
     * @param {String} siteId The site context.
     * @param {String} id The id of the requested promotion.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Promotion}
     */
    this.getSitesByIDPromotionsByID = function(siteId, id) {
      return this.getSitesByIDPromotionsByIDWithHttpInfo(siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * For the specified site and instance, read the custom preferences in the preference group.  Specify 'current' to retrieve the preferences for the instance on which this call is being made. The system will recognize its type.
     * @param {String} siteId The site context.
     * @param {String} instanceType One of {staging,development,sandbox,production,current}.
     * @param {String} groupId The ID of the preference group.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.maskPasswords 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SitePreferences} and HTTP response
     */
    this.getSitesByIDSitePreferencesPreferenceGroupsByIDByIDWithHttpInfo = function(siteId, instanceType, groupId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDSitePreferencesPreferenceGroupsByIDByID");
      }
      // verify the required parameter 'instanceType' is set
      if (instanceType === undefined || instanceType === null) {
        throw new Error("Missing the required parameter 'instanceType' when calling getSitesByIDSitePreferencesPreferenceGroupsByIDByID");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getSitesByIDSitePreferencesPreferenceGroupsByIDByID");
      }

      var pathParams = {
        'site_id': siteId,
        'instance_type': instanceType,
        'group_id': groupId
      };
      var queryParams = {
        'mask_passwords': opts['maskPasswords'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = SitePreferences;
      return this.apiClient.callApi(
        '/sites/{site_id}/site_preferences/preference_groups/{group_id}/{instance_type}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * For the specified site and instance, read the custom preferences in the preference group.  Specify 'current' to retrieve the preferences for the instance on which this call is being made. The system will recognize its type.
     * @param {String} siteId The site context.
     * @param {String} instanceType One of {staging,development,sandbox,production,current}.
     * @param {String} groupId The ID of the preference group.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.maskPasswords 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SitePreferences}
     */
    this.getSitesByIDSitePreferencesPreferenceGroupsByIDByID = function(siteId, instanceType, groupId, opts) {
      return this.getSitesByIDSitePreferencesPreferenceGroupsByIDByIDWithHttpInfo(siteId, instanceType, groupId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the slot configurations with no filtering.
     * @param {String} siteId The id of the site.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SlotConfigurations} and HTTP response
     */
    this.getSitesByIDSlotConfigurationsWithHttpInfo = function(siteId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDSlotConfigurations");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = SlotConfigurations;
      return this.apiClient.callApi(
        '/sites/{site_id}/slot_configurations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the slot configurations with no filtering.
     * @param {String} siteId The id of the site.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SlotConfigurations}
     */
    this.getSitesByIDSlotConfigurations = function(siteId, opts) {
      return this.getSitesByIDSlotConfigurationsWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the slots with no filtering.
     * @param {String} siteId The id of the site.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Slots} and HTTP response
     */
    this.getSitesByIDSlotsWithHttpInfo = function(siteId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDSlots");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Slots;
      return this.apiClient.callApi(
        '/sites/{site_id}/slots', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the slots with no filtering.
     * @param {String} siteId The id of the site.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Slots}
     */
    this.getSitesByIDSlots = function(siteId, opts) {
      return this.getSitesByIDSlotsWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get slot information.
     * @param {String} siteId The site context.
     * @param {String} slotId The id of the requested slot.
     * @param {String} contextType The context type (folder, global, category).
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Slot} and HTTP response
     */
    this.getSitesByIDSlotsByIDByIDWithHttpInfo = function(siteId, slotId, contextType, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDSlotsByIDByID");
      }
      // verify the required parameter 'slotId' is set
      if (slotId === undefined || slotId === null) {
        throw new Error("Missing the required parameter 'slotId' when calling getSitesByIDSlotsByIDByID");
      }
      // verify the required parameter 'contextType' is set
      if (contextType === undefined || contextType === null) {
        throw new Error("Missing the required parameter 'contextType' when calling getSitesByIDSlotsByIDByID");
      }

      var pathParams = {
        'site_id': siteId,
        'slot_id': slotId,
        'context_type': contextType
      };
      var queryParams = {
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Slot;
      return this.apiClient.callApi(
        '/sites/{site_id}/slots/{slot_id}/{context_type}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get slot information.
     * @param {String} siteId The site context.
     * @param {String} slotId The id of the requested slot.
     * @param {String} contextType The context type (folder, global, category).
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Slot}
     */
    this.getSitesByIDSlotsByIDByID = function(siteId, slotId, contextType, opts) {
      return this.getSitesByIDSlotsByIDByIDWithHttpInfo(siteId, slotId, contextType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to read an existing slot configuration.
     * @param {String} siteId The id of the site for which you want to create the slot configuration.
     * @param {String} slotId The id of the slot.
     * @param {String} configurationId The id of the slot configuration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SlotConfiguration} and HTTP response
     */
    this.getSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo = function(siteId, slotId, configurationId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDSlotsByIDSlotConfigurationsByID");
      }
      // verify the required parameter 'slotId' is set
      if (slotId === undefined || slotId === null) {
        throw new Error("Missing the required parameter 'slotId' when calling getSitesByIDSlotsByIDSlotConfigurationsByID");
      }
      // verify the required parameter 'configurationId' is set
      if (configurationId === undefined || configurationId === null) {
        throw new Error("Missing the required parameter 'configurationId' when calling getSitesByIDSlotsByIDSlotConfigurationsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'slot_id': slotId,
        'configuration_id': configurationId
      };
      var queryParams = {
        'context': opts['context'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = SlotConfiguration;
      return this.apiClient.callApi(
        '/sites/{site_id}/slots/{slot_id}/slot_configurations/{configuration_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to read an existing slot configuration.
     * @param {String} siteId The id of the site for which you want to create the slot configuration.
     * @param {String} slotId The id of the slot.
     * @param {String} configurationId The id of the slot configuration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SlotConfiguration}
     */
    this.getSitesByIDSlotsByIDSlotConfigurationsByID = function(siteId, slotId, configurationId, opts) {
      return this.getSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo(siteId, slotId, configurationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the source code groups with no filtering.
     * @param {String} siteId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SourceCodeGroups} and HTTP response
     */
    this.getSitesByIDSourceCodeGroupsWithHttpInfo = function(siteId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDSourceCodeGroups");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = SourceCodeGroups;
      return this.apiClient.callApi(
        '/sites/{site_id}/source_code_groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the source code groups with no filtering.
     * @param {String} siteId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SourceCodeGroups}
     */
    this.getSitesByIDSourceCodeGroups = function(siteId, opts) {
      return this.getSitesByIDSourceCodeGroupsWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to retrieve source code group information.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the requested source code group.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SourceCodeGroup} and HTTP response
     */
    this.getSitesByIDSourceCodeGroupsByIDWithHttpInfo = function(siteId, id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDSourceCodeGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitesByIDSourceCodeGroupsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = SourceCodeGroup;
      return this.apiClient.callApi(
        '/sites/{site_id}/source_code_groups/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to retrieve source code group information.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the requested source code group.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SourceCodeGroup}
     */
    this.getSitesByIDSourceCodeGroupsByID = function(siteId, id, opts) {
      return this.getSitesByIDSourceCodeGroupsByIDWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the stores with no filtering.
     * @param {String} siteId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Stores} and HTTP response
     */
    this.getSitesByIDStoresWithHttpInfo = function(siteId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDStores");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Stores;
      return this.apiClient.callApi(
        '/sites/{site_id}/stores', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the stores with no filtering.
     * @param {String} siteId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Stores}
     */
    this.getSitesByIDStores = function(siteId, opts) {
      return this.getSitesByIDStoresWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get store information.
     * @param {String} siteId The site context.
     * @param {String} id The id of the requested store.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Store} and HTTP response
     */
    this.getSitesByIDStoresByIDWithHttpInfo = function(siteId, id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesByIDStoresByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitesByIDStoresByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Store;
      return this.apiClient.callApi(
        '/sites/{site_id}/stores/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get store information.
     * @param {String} siteId The site context.
     * @param {String} id The id of the requested store.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Store}
     */
    this.getSitesByIDStoresByID = function(siteId, id, opts) {
      return this.getSitesByIDStoresByIDWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the A/B Test with the specified information.
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @param {Object} opts Optional parameters
     * @param {module:model/AbTest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbTest} and HTTP response
     */
    this.patchSitesByIDAbTestsByIDWithHttpInfo = function(siteId, id, opts) {
      opts = opts || {};
      var postBody = opts['body'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDAbTestsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchSitesByIDAbTestsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AbTest;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the A/B Test with the specified information.
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @param {Object} opts Optional parameters
     * @param {module:model/AbTest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbTest}
     */
    this.patchSitesByIDAbTestsByID = function(siteId, id, opts) {
      return this.patchSitesByIDAbTestsByIDWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the A/B Test segment with the specified information.
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @param {String} segmentId The id of the segment in the test.
     * @param {Object} opts Optional parameters
     * @param {module:model/AbTestSegment} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbTestSegment} and HTTP response
     */
    this.patchSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo = function(siteId, id, segmentId, opts) {
      opts = opts || {};
      var postBody = opts['body'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDAbTestsByIDSegmentsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchSitesByIDAbTestsByIDSegmentsByID");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling patchSitesByIDAbTestsByIDSegmentsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id,
        'segment_id': segmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AbTestSegment;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}/segments/{segment_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the A/B Test segment with the specified information.
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @param {String} segmentId The id of the segment in the test.
     * @param {Object} opts Optional parameters
     * @param {module:model/AbTestSegment} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbTestSegment}
     */
    this.patchSitesByIDAbTestsByIDSegmentsByID = function(siteId, id, segmentId, opts) {
      return this.patchSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo(siteId, id, segmentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the campaign with the specified information.
     * @param {String} siteId The site context.
     * @param {String} campaignId The id of the requested campaign.
     * @param {module:model/Campaign} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign} and HTTP response
     */
    this.patchSitesByIDCampaignsByIDWithHttpInfo = function(siteId, campaignId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDCampaignsByID");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling patchSitesByIDCampaignsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSitesByIDCampaignsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Campaign;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the campaign with the specified information.
     * @param {String} siteId The site context.
     * @param {String} campaignId The id of the requested campaign.
     * @param {module:model/Campaign} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign}
     */
    this.patchSitesByIDCampaignsByID = function(siteId, campaignId, body) {
      return this.patchSitesByIDCampaignsByIDWithHttpInfo(siteId, campaignId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to update the assignment of slot configuration to a campaign.
     * @param {String} campaignId The ID of the campaign.
     * @param {String} siteId The ID of the site.
     * @param {String} slotId The ID of the slot.
     * @param {String} slotConfigId The ID of the slot configuration.
     * @param {module:model/SlotConfigurationCampaignAssignment} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.patchSitesByIDCampaignsByIDSlotConfigurationsByIDByIDWithHttpInfo = function(campaignId, siteId, slotId, slotConfigId, body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling patchSitesByIDCampaignsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDCampaignsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'slotId' is set
      if (slotId === undefined || slotId === null) {
        throw new Error("Missing the required parameter 'slotId' when calling patchSitesByIDCampaignsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'slotConfigId' is set
      if (slotConfigId === undefined || slotConfigId === null) {
        throw new Error("Missing the required parameter 'slotConfigId' when calling patchSitesByIDCampaignsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSitesByIDCampaignsByIDSlotConfigurationsByIDByID");
      }

      var pathParams = {
        'campaign_id': campaignId,
        'site_id': siteId,
        'slot_id': slotId,
        'slot_config_id': slotConfigId
      };
      var queryParams = {
        'context': opts['context'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/slot_configurations/{slot_id}/{slot_config_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to update the assignment of slot configuration to a campaign.
     * @param {String} campaignId The ID of the campaign.
     * @param {String} siteId The ID of the site.
     * @param {String} slotId The ID of the slot.
     * @param {String} slotConfigId The ID of the slot configuration.
     * @param {module:model/SlotConfigurationCampaignAssignment} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.patchSitesByIDCampaignsByIDSlotConfigurationsByIDByID = function(campaignId, siteId, slotId, slotConfigId, body, opts) {
      return this.patchSitesByIDCampaignsByIDSlotConfigurationsByIDByIDWithHttpInfo(campaignId, siteId, slotId, slotConfigId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the coupon with the specified information.
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the requested coupon.
     * @param {module:model/Coupon} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Coupon} and HTTP response
     */
    this.patchSitesByIDCouponsByIDWithHttpInfo = function(siteId, couponId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDCouponsByID");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling patchSitesByIDCouponsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSitesByIDCouponsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Coupon;
      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the coupon with the specified information.
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the requested coupon.
     * @param {module:model/Coupon} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Coupon}
     */
    this.patchSitesByIDCouponsByID = function(siteId, couponId, body) {
      return this.patchSitesByIDCouponsByIDWithHttpInfo(siteId, couponId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a site specific Custom Object with information from request body. Note that only mentioned attributes will be updated and the key attribute is ignored. All other attributes will be left unattended.
     * @param {String} siteId the ID of the site
     * @param {String} objectType the ID of the object type
     * @param {String} key the key attribute value of the Custom Object
     * @param {module:model/CustomObject} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomObject} and HTTP response
     */
    this.patchSitesByIDCustomObjectsByIDByIDWithHttpInfo = function(siteId, objectType, key, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDCustomObjectsByIDByID");
      }
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling patchSitesByIDCustomObjectsByIDByID");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling patchSitesByIDCustomObjectsByIDByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSitesByIDCustomObjectsByIDByID");
      }

      var pathParams = {
        'site_id': siteId,
        'object_type': objectType,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomObject;
      return this.apiClient.callApi(
        '/sites/{site_id}/custom_objects/{object_type}/{key}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a site specific Custom Object with information from request body. Note that only mentioned attributes will be updated and the key attribute is ignored. All other attributes will be left unattended.
     * @param {String} siteId the ID of the site
     * @param {String} objectType the ID of the object type
     * @param {String} key the key attribute value of the Custom Object
     * @param {module:model/CustomObject} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomObject}
     */
    this.patchSitesByIDCustomObjectsByIDByID = function(siteId, objectType, key, body) {
      return this.patchSitesByIDCustomObjectsByIDByIDWithHttpInfo(siteId, objectType, key, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the customer group with the specified information.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the requested customer group.
     * @param {module:model/CustomerGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerGroup} and HTTP response
     */
    this.patchSitesByIDCustomerGroupsByIDWithHttpInfo = function(siteId, id, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDCustomerGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchSitesByIDCustomerGroupsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSitesByIDCustomerGroupsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerGroup;
      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the customer group with the specified information.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the requested customer group.
     * @param {module:model/CustomerGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerGroup}
     */
    this.patchSitesByIDCustomerGroupsByID = function(siteId, id, body) {
      return this.patchSitesByIDCustomerGroupsByIDWithHttpInfo(siteId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the gift certificate with the specified information using merchant ID.
     * @param {String} siteId The id of the site.
     * @param {String} merchantId The merchant id of the requested gift certificate.
     * @param {module:model/GiftCertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GiftCertificate} and HTTP response
     */
    this.patchSitesByIDGiftCertificatesByIDWithHttpInfo = function(siteId, merchantId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDGiftCertificatesByID");
      }
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling patchSitesByIDGiftCertificatesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSitesByIDGiftCertificatesByID");
      }

      var pathParams = {
        'site_id': siteId,
        'merchant_id': merchantId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = GiftCertificate;
      return this.apiClient.callApi(
        '/sites/{site_id}/gift_certificates/{merchant_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the gift certificate with the specified information using merchant ID.
     * @param {String} siteId The id of the site.
     * @param {String} merchantId The merchant id of the requested gift certificate.
     * @param {module:model/GiftCertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GiftCertificate}
     */
    this.patchSitesByIDGiftCertificatesByID = function(siteId, merchantId, body) {
      return this.patchSitesByIDGiftCertificatesByIDWithHttpInfo(siteId, merchantId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the order.
     * @param {String} siteId ID of the site
     * @param {String} orderNo The order number
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.patchSitesByIDOrdersByIDWithHttpInfo = function(siteId, orderNo, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDOrdersByID");
      }
      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling patchSitesByIDOrdersByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSitesByIDOrdersByID");
      }

      var pathParams = {
        'site_id': siteId,
        'order_no': orderNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the order.
     * @param {String} siteId ID of the site
     * @param {String} orderNo The order number
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.patchSitesByIDOrdersByID = function(siteId, orderNo, body) {
      return this.patchSitesByIDOrdersByIDWithHttpInfo(siteId, orderNo, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the payment instrument of an order.
     * @param {String} siteId ID of the site
     * @param {String} orderNo The order number
     * @param {String} paymentInstrumentId ID of the payment instrument
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.patchSitesByIDOrdersByIDPaymentInstrumentsByIDWithHttpInfo = function(siteId, orderNo, paymentInstrumentId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDOrdersByIDPaymentInstrumentsByID");
      }
      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling patchSitesByIDOrdersByIDPaymentInstrumentsByID");
      }
      // verify the required parameter 'paymentInstrumentId' is set
      if (paymentInstrumentId === undefined || paymentInstrumentId === null) {
        throw new Error("Missing the required parameter 'paymentInstrumentId' when calling patchSitesByIDOrdersByIDPaymentInstrumentsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSitesByIDOrdersByIDPaymentInstrumentsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'order_no': orderNo,
        'payment_instrument_id': paymentInstrumentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/payment_instruments/{payment_instrument_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the payment instrument of an order.
     * @param {String} siteId ID of the site
     * @param {String} orderNo The order number
     * @param {String} paymentInstrumentId ID of the payment instrument
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.patchSitesByIDOrdersByIDPaymentInstrumentsByID = function(siteId, orderNo, paymentInstrumentId, body) {
      return this.patchSitesByIDOrdersByIDPaymentInstrumentsByIDWithHttpInfo(siteId, orderNo, paymentInstrumentId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the transaction of an order payment instrument.
     * @param {String} siteId ID of the site
     * @param {String} orderNo The order number
     * @param {String} paymentInstrumentId ID of the payment instrument
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.patchSitesByIDOrdersByIDPaymentInstrumentsByIDTransactionWithHttpInfo = function(siteId, orderNo, paymentInstrumentId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDOrdersByIDPaymentInstrumentsByIDTransaction");
      }
      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling patchSitesByIDOrdersByIDPaymentInstrumentsByIDTransaction");
      }
      // verify the required parameter 'paymentInstrumentId' is set
      if (paymentInstrumentId === undefined || paymentInstrumentId === null) {
        throw new Error("Missing the required parameter 'paymentInstrumentId' when calling patchSitesByIDOrdersByIDPaymentInstrumentsByIDTransaction");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSitesByIDOrdersByIDPaymentInstrumentsByIDTransaction");
      }

      var pathParams = {
        'site_id': siteId,
        'order_no': orderNo,
        'payment_instrument_id': paymentInstrumentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/payment_instruments/{payment_instrument_id}/transaction', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the transaction of an order payment instrument.
     * @param {String} siteId ID of the site
     * @param {String} orderNo The order number
     * @param {String} paymentInstrumentId ID of the payment instrument
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.patchSitesByIDOrdersByIDPaymentInstrumentsByIDTransaction = function(siteId, orderNo, paymentInstrumentId, body) {
      return this.patchSitesByIDOrdersByIDPaymentInstrumentsByIDTransactionWithHttpInfo(siteId, orderNo, paymentInstrumentId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the promotion with the specified information.
     * @param {String} siteId The site context.
     * @param {String} id The id of the requested promotion.
     * @param {module:model/Promotion} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Promotion} and HTTP response
     */
    this.patchSitesByIDPromotionsByIDWithHttpInfo = function(siteId, id, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDPromotionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchSitesByIDPromotionsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSitesByIDPromotionsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Promotion;
      return this.apiClient.callApi(
        '/sites/{site_id}/promotions/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the promotion with the specified information.
     * @param {String} siteId The site context.
     * @param {String} id The id of the requested promotion.
     * @param {module:model/Promotion} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Promotion}
     */
    this.patchSitesByIDPromotionsByID = function(siteId, id, body) {
      return this.patchSitesByIDPromotionsByIDWithHttpInfo(siteId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * For the specified site and instance, update one or more custom preferences in the preference group.  Preferences of type password cannot be set to \"************\" since it is a reserved value.
     * @param {String} siteId The site context.
     * @param {String} instanceType One of {staging,development,sandbox,production}.
     * @param {String} groupId The ID of the preference group.
     * @param {module:model/SitePreferences} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.maskPasswords 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SitePreferences} and HTTP response
     */
    this.patchSitesByIDSitePreferencesPreferenceGroupsByIDByIDWithHttpInfo = function(siteId, instanceType, groupId, body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDSitePreferencesPreferenceGroupsByIDByID");
      }
      // verify the required parameter 'instanceType' is set
      if (instanceType === undefined || instanceType === null) {
        throw new Error("Missing the required parameter 'instanceType' when calling patchSitesByIDSitePreferencesPreferenceGroupsByIDByID");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling patchSitesByIDSitePreferencesPreferenceGroupsByIDByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSitesByIDSitePreferencesPreferenceGroupsByIDByID");
      }

      var pathParams = {
        'site_id': siteId,
        'instance_type': instanceType,
        'group_id': groupId
      };
      var queryParams = {
        'mask_passwords': opts['maskPasswords'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = SitePreferences;
      return this.apiClient.callApi(
        '/sites/{site_id}/site_preferences/preference_groups/{group_id}/{instance_type}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * For the specified site and instance, update one or more custom preferences in the preference group.  Preferences of type password cannot be set to \"************\" since it is a reserved value.
     * @param {String} siteId The site context.
     * @param {String} instanceType One of {staging,development,sandbox,production}.
     * @param {String} groupId The ID of the preference group.
     * @param {module:model/SitePreferences} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.maskPasswords 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SitePreferences}
     */
    this.patchSitesByIDSitePreferencesPreferenceGroupsByIDByID = function(siteId, instanceType, groupId, body, opts) {
      return this.patchSitesByIDSitePreferencesPreferenceGroupsByIDByIDWithHttpInfo(siteId, instanceType, groupId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates an existing slot configuration. This action ignores the slot_id and  the context information in the input document. Note that this operation will  not touch any relational properties, which means, that e.g. the rank on a specific  campaign assignment will not be changed, when the rank for the slot configuration  itself is updated.
     * @param {String} siteId The id of the site for which you want to create the slot configuration.
     * @param {String} slotId The id of the slot.
     * @param {String} configurationId The id of the slot configuration.
     * @param {module:model/SlotConfiguration} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SlotConfiguration} and HTTP response
     */
    this.patchSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo = function(siteId, slotId, configurationId, body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDSlotsByIDSlotConfigurationsByID");
      }
      // verify the required parameter 'slotId' is set
      if (slotId === undefined || slotId === null) {
        throw new Error("Missing the required parameter 'slotId' when calling patchSitesByIDSlotsByIDSlotConfigurationsByID");
      }
      // verify the required parameter 'configurationId' is set
      if (configurationId === undefined || configurationId === null) {
        throw new Error("Missing the required parameter 'configurationId' when calling patchSitesByIDSlotsByIDSlotConfigurationsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSitesByIDSlotsByIDSlotConfigurationsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'slot_id': slotId,
        'configuration_id': configurationId
      };
      var queryParams = {
        'context': opts['context'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = SlotConfiguration;
      return this.apiClient.callApi(
        '/sites/{site_id}/slots/{slot_id}/slot_configurations/{configuration_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates an existing slot configuration. This action ignores the slot_id and  the context information in the input document. Note that this operation will  not touch any relational properties, which means, that e.g. the rank on a specific  campaign assignment will not be changed, when the rank for the slot configuration  itself is updated.
     * @param {String} siteId The id of the site for which you want to create the slot configuration.
     * @param {String} slotId The id of the slot.
     * @param {String} configurationId The id of the slot configuration.
     * @param {module:model/SlotConfiguration} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SlotConfiguration}
     */
    this.patchSitesByIDSlotsByIDSlotConfigurationsByID = function(siteId, slotId, configurationId, body, opts) {
      return this.patchSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo(siteId, slotId, configurationId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the source code group with the specified information.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the requested source code group.
     * @param {module:model/SourceCodeGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SourceCodeGroup} and HTTP response
     */
    this.patchSitesByIDSourceCodeGroupsByIDWithHttpInfo = function(siteId, id, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDSourceCodeGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchSitesByIDSourceCodeGroupsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSitesByIDSourceCodeGroupsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = SourceCodeGroup;
      return this.apiClient.callApi(
        '/sites/{site_id}/source_code_groups/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the source code group with the specified information.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the requested source code group.
     * @param {module:model/SourceCodeGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SourceCodeGroup}
     */
    this.patchSitesByIDSourceCodeGroupsByID = function(siteId, id, body) {
      return this.patchSitesByIDSourceCodeGroupsByIDWithHttpInfo(siteId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the store with the specified information.
     * @param {String} siteId The site context.
     * @param {String} id The id of the requested store.
     * @param {module:model/Store} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Store} and HTTP response
     */
    this.patchSitesByIDStoresByIDWithHttpInfo = function(siteId, id, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling patchSitesByIDStoresByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchSitesByIDStoresByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSitesByIDStoresByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Store;
      return this.apiClient.callApi(
        '/sites/{site_id}/stores/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the store with the specified information.
     * @param {String} siteId The site context.
     * @param {String} id The id of the requested store.
     * @param {module:model/Store} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Store}
     */
    this.patchSitesByIDStoresByID = function(siteId, id, body) {
      return this.patchSitesByIDStoresByIDWithHttpInfo(siteId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for A/B Tests. The query attribute specifies a complex query that can be used to narrow down the search. This is the list of searchable attributes:  id - String description - String enabled - Boolean paused - Boolean key_metric_id - String email_addresses - String tags- String expiration_type - String enum[session, never] start_date - DateTime end_date - DateTime  These fields can only be used in Queries as conjunctions (using AND).  If the field is used in a disjunction (OR) an exception will be thrown. The output of the query can also be sorted. These are the list of sortable attributes:  id - String description - String enabled - Boolean paused - Boolean key_metric_id - String 
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbTestSearchResult} and HTTP response
     */
    this.postSitesByIDAbTestSearchWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDAbTestSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDAbTestSearch");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AbTestSearchResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_test_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for A/B Tests. The query attribute specifies a complex query that can be used to narrow down the search. This is the list of searchable attributes:  id - String description - String enabled - Boolean paused - Boolean key_metric_id - String email_addresses - String tags- String expiration_type - String enum[session, never] start_date - DateTime end_date - DateTime  These fields can only be used in Queries as conjunctions (using AND).  If the field is used in a disjunction (OR) an exception will be thrown. The output of the query can also be sorted. These are the list of sortable attributes:  id - String description - String enabled - Boolean paused - Boolean key_metric_id - String 
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbTestSearchResult}
     */
    this.postSitesByIDAbTestSearch = function(siteId, body) {
      return this.postSitesByIDAbTestSearchWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for campaigns.    The Campaign Search document contains a search object that allows filtering on various attributes.     The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:        campaign_id - String      description - String      enabled - Boolean      coupon_id* - String      customer_group* - String      source_code* - String      start_date - Date      end_date - Date      last_modified - Date           These fields can only be used in Queries as conjunctions (using AND).  If the field is used in a disjunction  (OR) an exception will be thrown.   Note that only searchable attributes (excluding the ones marked with above with an asterisk) can be used in sorting  Additionally start_date, end_date and last_modified cannot be used in sorting.
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignSearchResult} and HTTP response
     */
    this.postSitesByIDCampaignSearchWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDCampaignSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDCampaignSearch");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CampaignSearchResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaign_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for campaigns.    The Campaign Search document contains a search object that allows filtering on various attributes.     The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:        campaign_id - String      description - String      enabled - Boolean      coupon_id* - String      customer_group* - String      source_code* - String      start_date - Date      end_date - Date      last_modified - Date           These fields can only be used in Queries as conjunctions (using AND).  If the field is used in a disjunction  (OR) an exception will be thrown.   Note that only searchable attributes (excluding the ones marked with above with an asterisk) can be used in sorting  Additionally start_date, end_date and last_modified cannot be used in sorting.
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignSearchResult}
     */
    this.postSitesByIDCampaignSearch = function(siteId, body) {
      return this.postSitesByIDCampaignSearchWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a cartridge to current cartridge path.
     * @param {String} siteId ID of the site.
     * @param {module:model/CartridgePathAddRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CartridgePathApiResponse} and HTTP response
     */
    this.postSitesByIDCartridgesWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDCartridges");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDCartridges");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CartridgePathApiResponse;
      return this.apiClient.callApi(
        '/sites/{site_id}/cartridges', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a cartridge to current cartridge path.
     * @param {String} siteId ID of the site.
     * @param {module:model/CartridgePathAddRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CartridgePathApiResponse}
     */
    this.postSitesByIDCartridges = function(siteId, body) {
      return this.postSitesByIDCartridgesWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for coupon redemptions.    The Coupon Redemption Search document contains a search object that allows filtering on various attributes.     The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:        code - String      coupon_id - String      customer_email - String      order_no - String     Note that only searchable attributes can be used in sorting.   If the role to which the user belongs does not have View_Coupon_Codes permission, then the coupon codes returned will be masked.
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CouponRedemptionSearchResult} and HTTP response
     */
    this.postSitesByIDCouponRedemptionSearchWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDCouponRedemptionSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDCouponRedemptionSearch");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CouponRedemptionSearchResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/coupon_redemption_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for coupon redemptions.    The Coupon Redemption Search document contains a search object that allows filtering on various attributes.     The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:        code - String      coupon_id - String      customer_email - String      order_no - String     Note that only searchable attributes can be used in sorting.   If the role to which the user belongs does not have View_Coupon_Codes permission, then the coupon codes returned will be masked.
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CouponRedemptionSearchResult}
     */
    this.postSitesByIDCouponRedemptionSearch = function(siteId, body) {
      return this.postSitesByIDCouponRedemptionSearchWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for coupons.   The Coupon Search document contains a search object that allows filtering on various attributes.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    coupon_id - String  description - String  type - one of {\"single_code\", \"multiple_codes\", \"system_codes\"}  enabled - boolean     Note that only searchable attributes can be used in sorting.   The stats expand value is required to return the following fields in the Coupon document:        exported_code_count      redemption_count      total_codes_count  
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CouponSearchResult} and HTTP response
     */
    this.postSitesByIDCouponSearchWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDCouponSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDCouponSearch");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CouponSearchResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/coupon_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for coupons.   The Coupon Search document contains a search object that allows filtering on various attributes.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    coupon_id - String  description - String  type - one of {\"single_code\", \"multiple_codes\", \"system_codes\"}  enabled - boolean     Note that only searchable attributes can be used in sorting.   The stats expand value is required to return the following fields in the Coupon document:        exported_code_count      redemption_count      total_codes_count  
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CouponSearchResult}
     */
    this.postSitesByIDCouponSearch = function(siteId, body) {
      return this.postSitesByIDCouponSearchWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add or delete (modify) multiple codes to/from the supplied coupon.
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the coupon to modify codes (must be multiple code coupon).
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts._delete 
     * @param {module:model/CouponMultiCodesRequest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.postSitesByIDCouponsByIDMultipleCodesWithHttpInfo = function(siteId, couponId, opts) {
      opts = opts || {};
      var postBody = opts['body'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDCouponsByIDMultipleCodes");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling postSitesByIDCouponsByIDMultipleCodes");
      }

      var pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      var queryParams = {
        'delete': opts['_delete'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}/multiple_codes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add or delete (modify) multiple codes to/from the supplied coupon.
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the coupon to modify codes (must be multiple code coupon).
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts._delete 
     * @param {module:model/CouponMultiCodesRequest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.postSitesByIDCouponsByIDMultipleCodes = function(siteId, couponId, opts) {
      return this.postSitesByIDCouponsByIDMultipleCodesWithHttpInfo(siteId, couponId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for customer groups.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String  type - String Enum value[system, dynamic, static]     The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  
     * @param {String} siteId The id of the site.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerGroupSearchResult} and HTTP response
     */
    this.postSitesByIDCustomerGroupSearchWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDCustomerGroupSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDCustomerGroupSearch");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerGroupSearchResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/customer_group_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for customer groups.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String  type - String Enum value[system, dynamic, static]     The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  
     * @param {String} siteId The id of the site.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerGroupSearchResult}
     */
    this.postSitesByIDCustomerGroupSearch = function(siteId, body) {
      return this.postSitesByIDCustomerGroupSearchWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for customer group members. For dynamic customer groups and the system groups \"Everyone\" and \"Unregistered\" no result is returned (Status Code: 204 - No Content).   The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:         login - String       active - Boolean    Customer Profile:         customer_no - String       first_name - String       last_name - String       email - String       zip - String     Only attributes in the same bucket can be joined using a disjunction (OR).  For instance, when joining login and customer_no above, only a conjunction is allowed (AND), whereas customer_no  and email can be joined using a disjunction because they are in the same bucket.  If an attribute  is used in a disjunction (OR) that violates this rule, an exception will be thrown.   The output of the query can also be sorted. These are the list of sortable attributes:    customer_no - String  login - String     If the Business manager customer search is configured to use the new Search Service, the following differences apply:        all attributes can be used for sorting (except for 'active')      searching for 'zip' will only search in the customers default address      logical operators can be used without limits (but may result in degraded performance, depending on how they are combined)      new assignments might not be found immediately via the search service, and removed assignments      might also not be in effect immediately (there is a slight delay in updating the index)  
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the requested members customer group.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerGroupMemberSearchResult} and HTTP response
     */
    this.postSitesByIDCustomerGroupsByIDMemberSearchWithHttpInfo = function(siteId, id, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDCustomerGroupsByIDMemberSearch");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postSitesByIDCustomerGroupsByIDMemberSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDCustomerGroupsByIDMemberSearch");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerGroupMemberSearchResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}/member_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for customer group members. For dynamic customer groups and the system groups \"Everyone\" and \"Unregistered\" no result is returned (Status Code: 204 - No Content).   The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:         login - String       active - Boolean    Customer Profile:         customer_no - String       first_name - String       last_name - String       email - String       zip - String     Only attributes in the same bucket can be joined using a disjunction (OR).  For instance, when joining login and customer_no above, only a conjunction is allowed (AND), whereas customer_no  and email can be joined using a disjunction because they are in the same bucket.  If an attribute  is used in a disjunction (OR) that violates this rule, an exception will be thrown.   The output of the query can also be sorted. These are the list of sortable attributes:    customer_no - String  login - String     If the Business manager customer search is configured to use the new Search Service, the following differences apply:        all attributes can be used for sorting (except for 'active')      searching for 'zip' will only search in the customers default address      logical operators can be used without limits (but may result in degraded performance, depending on how they are combined)      new assignments might not be found immediately via the search service, and removed assignments      might also not be in effect immediately (there is a slight delay in updating the index)  
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the requested members customer group.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerGroupMemberSearchResult}
     */
    this.postSitesByIDCustomerGroupsByIDMemberSearch = function(siteId, id, body) {
      return this.postSitesByIDCustomerGroupsByIDMemberSearchWithHttpInfo(siteId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for gift certificates.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    merchant_id - String  masked_gift_certificate_code* - String  order_no - String  sender_name - String  recipient_name - String  recipient_email - String  status - String  enabled - Boolean  message - String  description - String  creation_date - Date  currency_mnemonic* - String     * masked_gift_certificate_code, also known as just code, can only be used in a term query.  If a  four-character code is supplied, it is assumed that the search is on the unmasked portion of the code, otherwise  the full code must be matched.  Text queries are not allowed.   * currency_mnemonic can only be joined with other attributes using a conjunction (AND).   Note that only searchable attributes can be used in sorting.  The code attribute cannot be used for sorting.
     * @param {String} siteId The id of the site.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GiftCertificateSearchResult} and HTTP response
     */
    this.postSitesByIDGiftCertificateSearchWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDGiftCertificateSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDGiftCertificateSearch");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = GiftCertificateSearchResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/gift_certificate_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for gift certificates.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    merchant_id - String  masked_gift_certificate_code* - String  order_no - String  sender_name - String  recipient_name - String  recipient_email - String  status - String  enabled - Boolean  message - String  description - String  creation_date - Date  currency_mnemonic* - String     * masked_gift_certificate_code, also known as just code, can only be used in a term query.  If a  four-character code is supplied, it is assumed that the search is on the unmasked portion of the code, otherwise  the full code must be matched.  Text queries are not allowed.   * currency_mnemonic can only be joined with other attributes using a conjunction (AND).   Note that only searchable attributes can be used in sorting.  The code attribute cannot be used for sorting.
     * @param {String} siteId The id of the site.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GiftCertificateSearchResult}
     */
    this.postSitesByIDGiftCertificateSearch = function(siteId, body) {
      return this.postSitesByIDGiftCertificateSearchWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a gift certificate using the information provided. If a gift certificate with   the same unique identifier, it will be deleted and a new one will be created.
     * @param {String} siteId The id of the site.
     * @param {module:model/GiftCertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GiftCertificate} and HTTP response
     */
    this.postSitesByIDGiftCertificatesWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDGiftCertificates");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDGiftCertificates");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = GiftCertificate;
      return this.apiClient.callApi(
        '/sites/{site_id}/gift_certificates', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a gift certificate using the information provided. If a gift certificate with   the same unique identifier, it will be deleted and a new one will be created.
     * @param {String} siteId The id of the site.
     * @param {module:model/GiftCertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GiftCertificate}
     */
    this.postSitesByIDGiftCertificates = function(siteId, body) {
      return this.postSitesByIDGiftCertificatesWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for promotion campaign assignments.    The PromotionCampaignAssignment Search document contains a search object that allows filtering on various attributes.    The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:        rank - Integer      start_date - Date      end_date - Date    Campaign:        campaign_id - String    Promotion:        promotion_id - String      description - String      enabled - Boolean    Special handling:        coupon_id - String     Only fields in the same bucket can be joined using a disjunction (OR). For instance, when joining  campaign_id and rank above, only a conjunction is allowed (AND), whereas promotion_id and description can be  joined to each other using an OR because they are in the same bucket.  Special handling fields must always use  conjunctions. If the field is used in a disjunction (OR) that violates this rule, an exception will be thrown.   Expands that can be applied for the search request        promotion      campaign     Note that only searchable attributes (excluding the ones marked with above with an asterisk) can be used in sorting.
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromotionCampaignAssignmentSearchResult} and HTTP response
     */
    this.postSitesByIDPromotionCampaignAssignmentSearchWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDPromotionCampaignAssignmentSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDPromotionCampaignAssignmentSearch");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = PromotionCampaignAssignmentSearchResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/promotion_campaign_assignment_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for promotion campaign assignments.    The PromotionCampaignAssignment Search document contains a search object that allows filtering on various attributes.    The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:        rank - Integer      start_date - Date      end_date - Date    Campaign:        campaign_id - String    Promotion:        promotion_id - String      description - String      enabled - Boolean    Special handling:        coupon_id - String     Only fields in the same bucket can be joined using a disjunction (OR). For instance, when joining  campaign_id and rank above, only a conjunction is allowed (AND), whereas promotion_id and description can be  joined to each other using an OR because they are in the same bucket.  Special handling fields must always use  conjunctions. If the field is used in a disjunction (OR) that violates this rule, an exception will be thrown.   Expands that can be applied for the search request        promotion      campaign     Note that only searchable attributes (excluding the ones marked with above with an asterisk) can be used in sorting.
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromotionCampaignAssignmentSearchResult}
     */
    this.postSitesByIDPromotionCampaignAssignmentSearch = function(siteId, body) {
      return this.postSitesByIDPromotionCampaignAssignmentSearchWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for promotions.    The SearchRequest document contains a search object that allows filtering on various attributes.    The query attribute specifies a complex query that can be used to narrow down the search. These are the searchable  attributes:    id - String  name - String  currency_code - String  exclusivity - String  enabled - Boolean    Note that only searchable attributes can be used in sorting. Additionally, the following attribute can be used to  sort:    promotion_class - String  
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromotionSearchResult} and HTTP response
     */
    this.postSitesByIDPromotionSearchWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDPromotionSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDPromotionSearch");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = PromotionSearchResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/promotion_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for promotions.    The SearchRequest document contains a search object that allows filtering on various attributes.    The query attribute specifies a complex query that can be used to narrow down the search. These are the searchable  attributes:    id - String  name - String  currency_code - String  exclusivity - String  enabled - Boolean    Note that only searchable attributes can be used in sorting. Additionally, the following attribute can be used to  sort:    promotion_class - String  
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromotionSearchResult}
     */
    this.postSitesByIDPromotionSearch = function(siteId, body) {
      return this.postSitesByIDPromotionSearchWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for slotconfiguration campaign assignments.    The SlotConfigCampaignAssignment Search document contains a search object that allows filtering on various attributes.   The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:        rank - Integer      start_date - Date      end_date - Date    Campaign:        campaign_id - String      enabled - Boolean    Slot configuration:        slot_configuration_id - String      description - String     Only attributes in the same bucket can be joined using a disjunction (OR).  For instance, when joining rank and description above, only a conjunction is allowed (AND), whereas slot_configuration_id  and description can be joined using a disjunction because they are in the same bucket.  If an attribute  is used in a disjunction (OR) that violates this rule, an exception will be thrown.   Expands that can be applied for the search request        campaign      slotConfiguration      Note that only searchable attributes (excluding the ones marked with above with an asterisk) can be used in sorting.
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SlotConfigurationCampaignAssignmentSearchResult} and HTTP response
     */
    this.postSitesByIDSlotConfigurationCampaignAssignmentSearchWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDSlotConfigurationCampaignAssignmentSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDSlotConfigurationCampaignAssignmentSearch");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = SlotConfigurationCampaignAssignmentSearchResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/slot_configuration_campaign_assignment_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for slotconfiguration campaign assignments.    The SlotConfigCampaignAssignment Search document contains a search object that allows filtering on various attributes.   The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:        rank - Integer      start_date - Date      end_date - Date    Campaign:        campaign_id - String      enabled - Boolean    Slot configuration:        slot_configuration_id - String      description - String     Only attributes in the same bucket can be joined using a disjunction (OR).  For instance, when joining rank and description above, only a conjunction is allowed (AND), whereas slot_configuration_id  and description can be joined using a disjunction because they are in the same bucket.  If an attribute  is used in a disjunction (OR) that violates this rule, an exception will be thrown.   Expands that can be applied for the search request        campaign      slotConfiguration      Note that only searchable attributes (excluding the ones marked with above with an asterisk) can be used in sorting.
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SlotConfigurationCampaignAssignmentSearchResult}
     */
    this.postSitesByIDSlotConfigurationCampaignAssignmentSearch = function(siteId, body) {
      return this.postSitesByIDSlotConfigurationCampaignAssignmentSearchWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for slot configurations.   The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:       configuration_id - String     default - Boolean     description - String     enabled - Boolean    Slot:       context - String     slot_id - String     Only fields in the same bucket can be joined using a disjunction (OR). For instance, when joining context and  description above, only a conjunction is allowed (AND), whereas context and slot_id can be joined to each other  using a disjunction because they are in the same bucket.  If the field is used in a disjunction (OR) that  violates this rule, an exception will be thrown.
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SlotConfigurationSearchResult} and HTTP response
     */
    this.postSitesByIDSlotConfigurationSearchWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDSlotConfigurationSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDSlotConfigurationSearch");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = SlotConfigurationSearchResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/slot_configuration_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for slot configurations.   The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:       configuration_id - String     default - Boolean     description - String     enabled - Boolean    Slot:       context - String     slot_id - String     Only fields in the same bucket can be joined using a disjunction (OR). For instance, when joining context and  description above, only a conjunction is allowed (AND), whereas context and slot_id can be joined to each other  using a disjunction because they are in the same bucket.  If the field is used in a disjunction (OR) that  violates this rule, an exception will be thrown.
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SlotConfigurationSearchResult}
     */
    this.postSitesByIDSlotConfigurationSearch = function(siteId, body) {
      return this.postSitesByIDSlotConfigurationSearchWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for slots.    The query attribute specifies a complex query that can be used to narrow down the search. The set of fields that  are available to search are:    slot_id - String  description - String  context_type - String      Note that only searchable attributes can be used in sorting. \"context_type\" value is restricted to Global/Folder/Category.
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SlotSearchResult} and HTTP response
     */
    this.postSitesByIDSlotSearchWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDSlotSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDSlotSearch");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = SlotSearchResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/slot_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for slots.    The query attribute specifies a complex query that can be used to narrow down the search. The set of fields that  are available to search are:    slot_id - String  description - String  context_type - String      Note that only searchable attributes can be used in sorting. \"context_type\" value is restricted to Global/Folder/Category.
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SlotSearchResult}
     */
    this.postSitesByIDSlotSearch = function(siteId, body) {
      return this.postSitesByIDSlotSearchWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for product sorting rules.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String  creation_date - date of creation     The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  creation_date - date of creation     This resource does not support expand options.
     * @param {String} siteId The id of the site.
     * @param {module:model/SearchRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ruleContext 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SortingRuleSearchResult} and HTTP response
     */
    this.postSitesByIDSortingRuleSearchWithHttpInfo = function(siteId, body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDSortingRuleSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDSortingRuleSearch");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
        'rule_context': opts['ruleContext'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = SortingRuleSearchResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/sorting_rule_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for product sorting rules.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String  creation_date - date of creation     The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  creation_date - date of creation     This resource does not support expand options.
     * @param {String} siteId The id of the site.
     * @param {module:model/SearchRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ruleContext 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SortingRuleSearchResult}
     */
    this.postSitesByIDSortingRuleSearch = function(siteId, body, opts) {
      return this.postSitesByIDSortingRuleSearchWithHttpInfo(siteId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for source code groups.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String  source_code* - String   start_time - DateTime  end_time - DateTime  creation_date - DateTime  enabled - Boolean  active* - Boolean      * - These fields can only be used in Queries as conjunctions (using AND).  If the field is used in a disjunction  (OR) an exception will be thrown.    The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  enabled - Boolean  creation_date - DateTime      Expands that can be applied for the search request    specifications - String  
     * @param {String} siteId The id of the site.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SourceCodeGroupSearchResult} and HTTP response
     */
    this.postSitesByIDSourceCodeGroupSearchWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDSourceCodeGroupSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDSourceCodeGroupSearch");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = SourceCodeGroupSearchResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/source_code_group_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for source code groups.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String  source_code* - String   start_time - DateTime  end_time - DateTime  creation_date - DateTime  enabled - Boolean  active* - Boolean      * - These fields can only be used in Queries as conjunctions (using AND).  If the field is used in a disjunction  (OR) an exception will be thrown.    The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  enabled - Boolean  creation_date - DateTime      Expands that can be applied for the search request    specifications - String  
     * @param {String} siteId The id of the site.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SourceCodeGroupSearchResult}
     */
    this.postSitesByIDSourceCodeGroupSearch = function(siteId, body) {
      return this.postSitesByIDSourceCodeGroupSearchWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for stores.    The query attribute specifies a complex query that can be used to narrow down the search. This is the list  of searchable attributes:    address1 - String  address2 - String  city - String  country_code - String  email - String  fax - String  id - String  inventory_id - String  latitude - double  longitude - double  name - String  phone - String  postal_code - String  state_code - String  store_hours - String  store_events - String  
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StoreSearchResult} and HTTP response
     */
    this.postSitesByIDStoreSearchWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling postSitesByIDStoreSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSitesByIDStoreSearch");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = StoreSearchResult;
      return this.apiClient.callApi(
        '/sites/{site_id}/store_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for stores.    The query attribute specifies a complex query that can be used to narrow down the search. This is the list  of searchable attributes:    address1 - String  address2 - String  city - String  country_code - String  email - String  fax - String  id - String  inventory_id - String  latitude - double  longitude - double  name - String  phone - String  postal_code - String  state_code - String  store_hours - String  store_events - String  
     * @param {String} siteId The site context.
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StoreSearchResult}
     */
    this.postSitesByIDStoreSearch = function(siteId, body) {
      return this.postSitesByIDStoreSearchWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates an A/B Test using the information provided. If an A/B Test with the same unique identifier exists, it will be deleted and a new one will be created unless the header x-dw-validate-existing=true is passed in with the request.
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @param {Object} opts Optional parameters
     * @param {module:model/AbTest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbTest} and HTTP response
     */
    this.putSitesByIDAbTestsByIDWithHttpInfo = function(siteId, id, opts) {
      opts = opts || {};
      var postBody = opts['body'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDAbTestsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putSitesByIDAbTestsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AbTest;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates an A/B Test using the information provided. If an A/B Test with the same unique identifier exists, it will be deleted and a new one will be created unless the header x-dw-validate-existing=true is passed in with the request.
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @param {Object} opts Optional parameters
     * @param {module:model/AbTest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbTest}
     */
    this.putSitesByIDAbTestsByID = function(siteId, id, opts) {
      return this.putSitesByIDAbTestsByIDWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates an A/B Test segment using the information provided.
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @param {String} segmentId The id of the segment in the test.
     * @param {Object} opts Optional parameters
     * @param {module:model/AbTestSegment} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbTestSegment} and HTTP response
     */
    this.putSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo = function(siteId, id, segmentId, opts) {
      opts = opts || {};
      var postBody = opts['body'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDAbTestsByIDSegmentsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putSitesByIDAbTestsByIDSegmentsByID");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling putSitesByIDAbTestsByIDSegmentsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id,
        'segment_id': segmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AbTestSegment;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}/segments/{segment_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates an A/B Test segment using the information provided.
     * @param {String} siteId ID of the site that the A/B tests are contained within.
     * @param {String} id The id of the requested A/B Test.
     * @param {String} segmentId The id of the segment in the test.
     * @param {Object} opts Optional parameters
     * @param {module:model/AbTestSegment} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbTestSegment}
     */
    this.putSitesByIDAbTestsByIDSegmentsByID = function(siteId, id, segmentId, opts) {
      return this.putSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo(siteId, id, segmentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a single promotion to a given abTest.
     * @param {String} siteId The ID of the site that contains the abTest and promotion.
     * @param {String} abTestId The ID of the abTest which contains the segment.
     * @param {String} segmentId The ID of the segment to to which the promotion is to be assigned.
     * @param {String} promotionId The ID of the promotion that is to be assigned to the abTest.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDWithHttpInfo = function(siteId, abTestId, segmentId, promotionId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDAbTestsByIDSegmentsByIDPromotionsByID");
      }
      // verify the required parameter 'abTestId' is set
      if (abTestId === undefined || abTestId === null) {
        throw new Error("Missing the required parameter 'abTestId' when calling putSitesByIDAbTestsByIDSegmentsByIDPromotionsByID");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling putSitesByIDAbTestsByIDSegmentsByIDPromotionsByID");
      }
      // verify the required parameter 'promotionId' is set
      if (promotionId === undefined || promotionId === null) {
        throw new Error("Missing the required parameter 'promotionId' when calling putSitesByIDAbTestsByIDSegmentsByIDPromotionsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'ab_test_id': abTestId,
        'segment_id': segmentId,
        'promotion_id': promotionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/promotions/{promotion_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to bind a single promotion to a given abTest.
     * @param {String} siteId The ID of the site that contains the abTest and promotion.
     * @param {String} abTestId The ID of the abTest which contains the segment.
     * @param {String} segmentId The ID of the segment to to which the promotion is to be assigned.
     * @param {String} promotionId The ID of the promotion that is to be assigned to the abTest.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDAbTestsByIDSegmentsByIDPromotionsByID = function(siteId, abTestId, segmentId, promotionId) {
      return this.putSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDWithHttpInfo(siteId, abTestId, segmentId, promotionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a slot configuration to a given abTest.
     * @param {String} abTestId The id of the abTest
     * @param {String} segmentId 
     * @param {String} siteId The id of the site
     * @param {String} slotId The of the slot
     * @param {String} slotConfigId The id of the slot configuration
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDWithHttpInfo = function(abTestId, segmentId, siteId, slotId, slotConfigId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'abTestId' is set
      if (abTestId === undefined || abTestId === null) {
        throw new Error("Missing the required parameter 'abTestId' when calling putSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling putSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'slotId' is set
      if (slotId === undefined || slotId === null) {
        throw new Error("Missing the required parameter 'slotId' when calling putSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'slotConfigId' is set
      if (slotConfigId === undefined || slotConfigId === null) {
        throw new Error("Missing the required parameter 'slotConfigId' when calling putSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID");
      }

      var pathParams = {
        'ab_test_id': abTestId,
        'segment_id': segmentId,
        'site_id': siteId,
        'slot_id': slotId,
        'slot_config_id': slotConfigId
      };
      var queryParams = {
        'context': opts['context'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/slot_configurations/{slot_id}/{slot_config_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to bind a slot configuration to a given abTest.
     * @param {String} abTestId The id of the abTest
     * @param {String} segmentId 
     * @param {String} siteId The id of the site
     * @param {String} slotId The of the slot
     * @param {String} slotConfigId The id of the slot configuration
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID = function(abTestId, segmentId, siteId, slotId, slotConfigId, opts) {
      return this.putSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDWithHttpInfo(abTestId, segmentId, siteId, slotId, slotConfigId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a single sorting rule to a given abTest.
     * @param {String} siteId The ID of the site that contains the abTest, sorting rule and category.
     * @param {String} abTestId The ID of the abTest to which the sorting rule is to be assigned.
     * @param {String} segmentId 
     * @param {String} sortingRuleId The ID of sorting rule that is to be assigned to the abTest.
     * @param {String} categoryId The ID of the category that is associated with the sorting rule.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ruleContext 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDWithHttpInfo = function(siteId, abTestId, segmentId, sortingRuleId, categoryId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID");
      }
      // verify the required parameter 'abTestId' is set
      if (abTestId === undefined || abTestId === null) {
        throw new Error("Missing the required parameter 'abTestId' when calling putSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling putSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID");
      }
      // verify the required parameter 'sortingRuleId' is set
      if (sortingRuleId === undefined || sortingRuleId === null) {
        throw new Error("Missing the required parameter 'sortingRuleId' when calling putSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling putSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID");
      }

      var pathParams = {
        'site_id': siteId,
        'ab_test_id': abTestId,
        'segment_id': segmentId,
        'sorting_rule_id': sortingRuleId,
        'category_id': categoryId
      };
      var queryParams = {
        'rule_context': opts['ruleContext'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/sorting_rules/{sorting_rule_id}/{category_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to bind a single sorting rule to a given abTest.
     * @param {String} siteId The ID of the site that contains the abTest, sorting rule and category.
     * @param {String} abTestId The ID of the abTest to which the sorting rule is to be assigned.
     * @param {String} segmentId 
     * @param {String} sortingRuleId The ID of sorting rule that is to be assigned to the abTest.
     * @param {String} categoryId The ID of the category that is associated with the sorting rule.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ruleContext 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID = function(siteId, abTestId, segmentId, sortingRuleId, categoryId, opts) {
      return this.putSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDWithHttpInfo(siteId, abTestId, segmentId, sortingRuleId, categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a campaign using the information provided.
     * @param {String} siteId The site context.
     * @param {String} campaignId The id of the campaign to create.
     * @param {module:model/Campaign} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign} and HTTP response
     */
    this.putSitesByIDCampaignsByIDWithHttpInfo = function(siteId, campaignId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDCampaignsByID");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling putSitesByIDCampaignsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSitesByIDCampaignsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Campaign;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a campaign using the information provided.
     * @param {String} siteId The site context.
     * @param {String} campaignId The id of the campaign to create.
     * @param {module:model/Campaign} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign}
     */
    this.putSitesByIDCampaignsByID = function(siteId, campaignId, body) {
      return this.putSitesByIDCampaignsByIDWithHttpInfo(siteId, campaignId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a single coupon to a given campaign.
     * @param {String} siteId 
     * @param {String} campaignId The campaign ID that coupons are to be bound to
     * @param {String} couponId The coupon ID to bind to a campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDCampaignsByIDCouponsByIDWithHttpInfo = function(siteId, campaignId, couponId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDCampaignsByIDCouponsByID");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling putSitesByIDCampaignsByIDCouponsByID");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling putSitesByIDCampaignsByIDCouponsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'coupon_id': couponId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/coupons/{coupon_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to bind a single coupon to a given campaign.
     * @param {String} siteId 
     * @param {String} campaignId The campaign ID that coupons are to be bound to
     * @param {String} couponId The coupon ID to bind to a campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDCampaignsByIDCouponsByID = function(siteId, campaignId, couponId) {
      return this.putSitesByIDCampaignsByIDCouponsByIDWithHttpInfo(siteId, campaignId, couponId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a single customer group to a given campaign.
     * @param {String} siteId 
     * @param {String} campaignId The campaign ID that coupons are to be bound to
     * @param {String} customerGroupId The customer group ID to bind to a campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDCampaignsByIDCustomerGroupsByIDWithHttpInfo = function(siteId, campaignId, customerGroupId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDCampaignsByIDCustomerGroupsByID");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling putSitesByIDCampaignsByIDCustomerGroupsByID");
      }
      // verify the required parameter 'customerGroupId' is set
      if (customerGroupId === undefined || customerGroupId === null) {
        throw new Error("Missing the required parameter 'customerGroupId' when calling putSitesByIDCampaignsByIDCustomerGroupsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'customer_group_id': customerGroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/customer_groups/{customer_group_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to bind a single customer group to a given campaign.
     * @param {String} siteId 
     * @param {String} campaignId The campaign ID that coupons are to be bound to
     * @param {String} customerGroupId The customer group ID to bind to a campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDCampaignsByIDCustomerGroupsByID = function(siteId, campaignId, customerGroupId) {
      return this.putSitesByIDCampaignsByIDCustomerGroupsByIDWithHttpInfo(siteId, campaignId, customerGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a single promotion to a given campaign.
     * @param {String} siteId The ID of the site that contains the campaign and promotion.
     * @param {String} campaignId The ID of the campaign to which the promotion is to be assigned.
     * @param {String} promotionId The ID of the promotion that is to be assigned to the campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDCampaignsByIDPromotionsByIDWithHttpInfo = function(siteId, campaignId, promotionId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDCampaignsByIDPromotionsByID");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling putSitesByIDCampaignsByIDPromotionsByID");
      }
      // verify the required parameter 'promotionId' is set
      if (promotionId === undefined || promotionId === null) {
        throw new Error("Missing the required parameter 'promotionId' when calling putSitesByIDCampaignsByIDPromotionsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'promotion_id': promotionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/promotions/{promotion_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to bind a single promotion to a given campaign.
     * @param {String} siteId The ID of the site that contains the campaign and promotion.
     * @param {String} campaignId The ID of the campaign to which the promotion is to be assigned.
     * @param {String} promotionId The ID of the promotion that is to be assigned to the campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDCampaignsByIDPromotionsByID = function(siteId, campaignId, promotionId) {
      return this.putSitesByIDCampaignsByIDPromotionsByIDWithHttpInfo(siteId, campaignId, promotionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a slot configuration to a given campaign.
     * @param {String} campaignId The ID of the campaign.
     * @param {String} siteId The ID of the site.
     * @param {String} slotId The ID of the slot.
     * @param {String} slotConfigId The ID of the slot configuration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @param {module:model/SlotConfigurationCampaignAssignment} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDCampaignsByIDSlotConfigurationsByIDByIDWithHttpInfo = function(campaignId, siteId, slotId, slotConfigId, opts) {
      opts = opts || {};
      var postBody = opts['body'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling putSitesByIDCampaignsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDCampaignsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'slotId' is set
      if (slotId === undefined || slotId === null) {
        throw new Error("Missing the required parameter 'slotId' when calling putSitesByIDCampaignsByIDSlotConfigurationsByIDByID");
      }
      // verify the required parameter 'slotConfigId' is set
      if (slotConfigId === undefined || slotConfigId === null) {
        throw new Error("Missing the required parameter 'slotConfigId' when calling putSitesByIDCampaignsByIDSlotConfigurationsByIDByID");
      }

      var pathParams = {
        'campaign_id': campaignId,
        'site_id': siteId,
        'slot_id': slotId,
        'slot_config_id': slotConfigId
      };
      var queryParams = {
        'context': opts['context'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/slot_configurations/{slot_id}/{slot_config_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to bind a slot configuration to a given campaign.
     * @param {String} campaignId The ID of the campaign.
     * @param {String} siteId The ID of the site.
     * @param {String} slotId The ID of the slot.
     * @param {String} slotConfigId The ID of the slot configuration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @param {module:model/SlotConfigurationCampaignAssignment} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDCampaignsByIDSlotConfigurationsByIDByID = function(campaignId, siteId, slotId, slotConfigId, opts) {
      return this.putSitesByIDCampaignsByIDSlotConfigurationsByIDByIDWithHttpInfo(campaignId, siteId, slotId, slotConfigId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a single sorting rule to a given campaign.
     * @param {String} siteId The ID of the site that contains the campaign, sorting rule and category.
     * @param {String} campaignId The ID of the campaign to which the sorting rule is to be assigned.
     * @param {String} sortingRuleId The ID of sorting rule that is to be assigned to the campaign.
     * @param {String} categoryId The ID of the category that is associated with the sorting rule.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ruleContext 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDCampaignsByIDSortingRulesByIDByIDWithHttpInfo = function(siteId, campaignId, sortingRuleId, categoryId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDCampaignsByIDSortingRulesByIDByID");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling putSitesByIDCampaignsByIDSortingRulesByIDByID");
      }
      // verify the required parameter 'sortingRuleId' is set
      if (sortingRuleId === undefined || sortingRuleId === null) {
        throw new Error("Missing the required parameter 'sortingRuleId' when calling putSitesByIDCampaignsByIDSortingRulesByIDByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling putSitesByIDCampaignsByIDSortingRulesByIDByID");
      }

      var pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'sorting_rule_id': sortingRuleId,
        'category_id': categoryId
      };
      var queryParams = {
        'rule_context': opts['ruleContext'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/sorting_rules/{sorting_rule_id}/{category_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to bind a single sorting rule to a given campaign.
     * @param {String} siteId The ID of the site that contains the campaign, sorting rule and category.
     * @param {String} campaignId The ID of the campaign to which the sorting rule is to be assigned.
     * @param {String} sortingRuleId The ID of sorting rule that is to be assigned to the campaign.
     * @param {String} categoryId The ID of the category that is associated with the sorting rule.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ruleContext 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDCampaignsByIDSortingRulesByIDByID = function(siteId, campaignId, sortingRuleId, categoryId, opts) {
      return this.putSitesByIDCampaignsByIDSortingRulesByIDByIDWithHttpInfo(siteId, campaignId, sortingRuleId, categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a single source code group to a given campaign.
     * @param {String} siteId 
     * @param {String} campaignId The campaign ID that source code group are to be bound to
     * @param {String} sourceCodeGroupId The source code group ID to bind to a campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDCampaignsByIDSourceCodeGroupsByIDWithHttpInfo = function(siteId, campaignId, sourceCodeGroupId) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDCampaignsByIDSourceCodeGroupsByID");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling putSitesByIDCampaignsByIDSourceCodeGroupsByID");
      }
      // verify the required parameter 'sourceCodeGroupId' is set
      if (sourceCodeGroupId === undefined || sourceCodeGroupId === null) {
        throw new Error("Missing the required parameter 'sourceCodeGroupId' when calling putSitesByIDCampaignsByIDSourceCodeGroupsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'source_code_group_id': sourceCodeGroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/source_code_groups/{source_code_group_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to bind a single source code group to a given campaign.
     * @param {String} siteId 
     * @param {String} campaignId The campaign ID that source code group are to be bound to
     * @param {String} sourceCodeGroupId The source code group ID to bind to a campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDCampaignsByIDSourceCodeGroupsByID = function(siteId, campaignId, sourceCodeGroupId) {
      return this.putSitesByIDCampaignsByIDSourceCodeGroupsByIDWithHttpInfo(siteId, campaignId, sourceCodeGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Overwrite cartridge path.
     * @param {String} siteId ID of the site.
     * @param {module:model/CartridgePathCreateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CartridgePathApiResponse} and HTTP response
     */
    this.putSitesByIDCartridgesWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDCartridges");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSitesByIDCartridges");
      }

      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CartridgePathApiResponse;
      return this.apiClient.callApi(
        '/sites/{site_id}/cartridges', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Overwrite cartridge path.
     * @param {String} siteId ID of the site.
     * @param {module:model/CartridgePathCreateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CartridgePathApiResponse}
     */
    this.putSitesByIDCartridges = function(siteId, body) {
      return this.putSitesByIDCartridgesWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a coupon using the information provided. If a coupon exists with the same unique identifier,  the coupon is replaced completely.
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the coupon to create.
     * @param {module:model/Coupon} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Coupon} and HTTP response
     */
    this.putSitesByIDCouponsByIDWithHttpInfo = function(siteId, couponId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDCouponsByID");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling putSitesByIDCouponsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSitesByIDCouponsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Coupon;
      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a coupon using the information provided. If a coupon exists with the same unique identifier,  the coupon is replaced completely.
     * @param {String} siteId The site context.
     * @param {String} couponId The id of the coupon to create.
     * @param {module:model/Coupon} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Coupon}
     */
    this.putSitesByIDCouponsByID = function(siteId, couponId, body) {
      return this.putSitesByIDCouponsByIDWithHttpInfo(siteId, couponId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a site specific Custom Object from request body for the specified site. Note that an existing Custom Object for the site, with the same key, will be overwritten by this action.
     * @param {String} siteId the ID of the site
     * @param {String} objectType the ID of the object type
     * @param {String} key the key attribute value of the Custom Object
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomObject} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomObject} and HTTP response
     */
    this.putSitesByIDCustomObjectsByIDByIDWithHttpInfo = function(siteId, objectType, key, opts) {
      opts = opts || {};
      var postBody = opts['body'];
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDCustomObjectsByIDByID");
      }
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling putSitesByIDCustomObjectsByIDByID");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSitesByIDCustomObjectsByIDByID");
      }

      var pathParams = {
        'site_id': siteId,
        'object_type': objectType,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomObject;
      return this.apiClient.callApi(
        '/sites/{site_id}/custom_objects/{object_type}/{key}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a site specific Custom Object from request body for the specified site. Note that an existing Custom Object for the site, with the same key, will be overwritten by this action.
     * @param {String} siteId the ID of the site
     * @param {String} objectType the ID of the object type
     * @param {String} key the key attribute value of the Custom Object
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomObject} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomObject}
     */
    this.putSitesByIDCustomObjectsByIDByID = function(siteId, objectType, key, opts) {
      return this.putSitesByIDCustomObjectsByIDByIDWithHttpInfo(siteId, objectType, key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a customer group using the information provided.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the customer group to create.
     * @param {module:model/CustomerGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerGroup} and HTTP response
     */
    this.putSitesByIDCustomerGroupsByIDWithHttpInfo = function(siteId, id, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDCustomerGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putSitesByIDCustomerGroupsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSitesByIDCustomerGroupsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerGroup;
      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a customer group using the information provided.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the customer group to create.
     * @param {module:model/CustomerGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerGroup}
     */
    this.putSitesByIDCustomerGroupsByID = function(siteId, id, body) {
      return this.putSitesByIDCustomerGroupsByIDWithHttpInfo(siteId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to add customer to (static) customer group.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the customer group.
     * @param {String} customerNo The customer number of the customer to add to the group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerGroupMember} and HTTP response
     */
    this.putSitesByIDCustomerGroupsByIDMembersByIDWithHttpInfo = function(siteId, id, customerNo, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDCustomerGroupsByIDMembersByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putSitesByIDCustomerGroupsByIDMembersByID");
      }
      // verify the required parameter 'customerNo' is set
      if (customerNo === undefined || customerNo === null) {
        throw new Error("Missing the required parameter 'customerNo' when calling putSitesByIDCustomerGroupsByIDMembersByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id,
        'customer_no': customerNo
      };
      var queryParams = {
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerGroupMember;
      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}/members/{customer_no}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to add customer to (static) customer group.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the customer group.
     * @param {String} customerNo The customer number of the customer to add to the group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerGroupMember}
     */
    this.putSitesByIDCustomerGroupsByIDMembersByID = function(siteId, id, customerNo, opts) {
      return this.putSitesByIDCustomerGroupsByIDMembersByIDWithHttpInfo(siteId, id, customerNo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the order confirmation status.
     * @param {String} siteId ID of the site.
     * @param {String} orderNo The order number
     * @param {module:model/OrderConfirmationStatusUpdateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDOrdersByIDConfirmationStatusWithHttpInfo = function(siteId, orderNo, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDOrdersByIDConfirmationStatus");
      }
      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling putSitesByIDOrdersByIDConfirmationStatus");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSitesByIDOrdersByIDConfirmationStatus");
      }

      var pathParams = {
        'site_id': siteId,
        'order_no': orderNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/confirmation_status', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the order confirmation status.
     * @param {String} siteId ID of the site.
     * @param {String} orderNo The order number
     * @param {module:model/OrderConfirmationStatusUpdateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDOrdersByIDConfirmationStatus = function(siteId, orderNo, body) {
      return this.putSitesByIDOrdersByIDConfirmationStatusWithHttpInfo(siteId, orderNo, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the order export status. Setting the status to EXPORTED will also trigger the finalization of on-order inventory transactions for this order, meaning that all inventory transactions with type on-order will be moved into final inventory transactions. This is only relevant when on-order inventory is turned on for the inventory list ordered products are in.
     * @param {String} siteId ID of the site.
     * @param {String} orderNo The order number
     * @param {module:model/OrderExportStatusUpdateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDOrdersByIDExportStatusWithHttpInfo = function(siteId, orderNo, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDOrdersByIDExportStatus");
      }
      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling putSitesByIDOrdersByIDExportStatus");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSitesByIDOrdersByIDExportStatus");
      }

      var pathParams = {
        'site_id': siteId,
        'order_no': orderNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/export_status', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the order export status. Setting the status to EXPORTED will also trigger the finalization of on-order inventory transactions for this order, meaning that all inventory transactions with type on-order will be moved into final inventory transactions. This is only relevant when on-order inventory is turned on for the inventory list ordered products are in.
     * @param {String} siteId ID of the site.
     * @param {String} orderNo The order number
     * @param {module:model/OrderExportStatusUpdateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDOrdersByIDExportStatus = function(siteId, orderNo, body) {
      return this.putSitesByIDOrdersByIDExportStatusWithHttpInfo(siteId, orderNo, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the order external status.
     * @param {String} siteId ID of the site.
     * @param {String} orderNo The order number
     * @param {module:model/OrderExternalStatusUpdateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDOrdersByIDExternalStatusWithHttpInfo = function(siteId, orderNo, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDOrdersByIDExternalStatus");
      }
      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling putSitesByIDOrdersByIDExternalStatus");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSitesByIDOrdersByIDExternalStatus");
      }

      var pathParams = {
        'site_id': siteId,
        'order_no': orderNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/external_status', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the order external status.
     * @param {String} siteId ID of the site.
     * @param {String} orderNo The order number
     * @param {module:model/OrderExternalStatusUpdateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDOrdersByIDExternalStatus = function(siteId, orderNo, body) {
      return this.putSitesByIDOrdersByIDExternalStatusWithHttpInfo(siteId, orderNo, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the order payment status.
     * @param {String} siteId ID of the site.
     * @param {String} orderNo The order number
     * @param {module:model/OrderPaymentStatusUpdateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDOrdersByIDPaymentStatusWithHttpInfo = function(siteId, orderNo, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDOrdersByIDPaymentStatus");
      }
      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling putSitesByIDOrdersByIDPaymentStatus");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSitesByIDOrdersByIDPaymentStatus");
      }

      var pathParams = {
        'site_id': siteId,
        'order_no': orderNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/payment_status', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the order payment status.
     * @param {String} siteId ID of the site.
     * @param {String} orderNo The order number
     * @param {module:model/OrderPaymentStatusUpdateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDOrdersByIDPaymentStatus = function(siteId, orderNo, body) {
      return this.putSitesByIDOrdersByIDPaymentStatusWithHttpInfo(siteId, orderNo, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates (create or replace) the order shipment address.
     * @param {String} siteId ID of the site
     * @param {String} orderNo The order number
     * @param {String} shipmentId ID of the shipment
     * @param {module:model/ShippingAddressUpdateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDOrdersByIDShipmentsByIDShippingAddressWithHttpInfo = function(siteId, orderNo, shipmentId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDOrdersByIDShipmentsByIDShippingAddress");
      }
      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling putSitesByIDOrdersByIDShipmentsByIDShippingAddress");
      }
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling putSitesByIDOrdersByIDShipmentsByIDShippingAddress");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSitesByIDOrdersByIDShipmentsByIDShippingAddress");
      }

      var pathParams = {
        'site_id': siteId,
        'order_no': orderNo,
        'shipment_id': shipmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/shipments/{shipment_id}/shipping_address', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates (create or replace) the order shipment address.
     * @param {String} siteId ID of the site
     * @param {String} orderNo The order number
     * @param {String} shipmentId ID of the shipment
     * @param {module:model/ShippingAddressUpdateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDOrdersByIDShipmentsByIDShippingAddress = function(siteId, orderNo, shipmentId, body) {
      return this.putSitesByIDOrdersByIDShipmentsByIDShippingAddressWithHttpInfo(siteId, orderNo, shipmentId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the order shipping status.
     * @param {String} siteId ID of the site.
     * @param {String} orderNo The order number
     * @param {module:model/OrderShippingStatusUpdateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDOrdersByIDShippingStatusWithHttpInfo = function(siteId, orderNo, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDOrdersByIDShippingStatus");
      }
      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling putSitesByIDOrdersByIDShippingStatus");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSitesByIDOrdersByIDShippingStatus");
      }

      var pathParams = {
        'site_id': siteId,
        'order_no': orderNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/shipping_status', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the order shipping status.
     * @param {String} siteId ID of the site.
     * @param {String} orderNo The order number
     * @param {module:model/OrderShippingStatusUpdateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDOrdersByIDShippingStatus = function(siteId, orderNo, body) {
      return this.putSitesByIDOrdersByIDShippingStatusWithHttpInfo(siteId, orderNo, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the order status by using the corresponding methods (fail, undoFail, place, cancel and undoCancel) from the dw.order.OrderMgr. Orders which are not in status CREATED or FAILED can not be set back.
     * @param {String} siteId ID of the site
     * @param {String} orderNo The order number
     * @param {module:model/OrderStatusUpdateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSitesByIDOrdersByIDStatusWithHttpInfo = function(siteId, orderNo, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDOrdersByIDStatus");
      }
      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling putSitesByIDOrdersByIDStatus");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSitesByIDOrdersByIDStatus");
      }

      var pathParams = {
        'site_id': siteId,
        'order_no': orderNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/status', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the order status by using the corresponding methods (fail, undoFail, place, cancel and undoCancel) from the dw.order.OrderMgr. Orders which are not in status CREATED or FAILED can not be set back.
     * @param {String} siteId ID of the site
     * @param {String} orderNo The order number
     * @param {module:model/OrderStatusUpdateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSitesByIDOrdersByIDStatus = function(siteId, orderNo, body) {
      return this.putSitesByIDOrdersByIDStatusWithHttpInfo(siteId, orderNo, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a promotion using the information provided.
     * @param {String} siteId The site context.
     * @param {String} id The id of the promotion to create.
     * @param {module:model/Promotion} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Promotion} and HTTP response
     */
    this.putSitesByIDPromotionsByIDWithHttpInfo = function(siteId, id, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDPromotionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putSitesByIDPromotionsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSitesByIDPromotionsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Promotion;
      return this.apiClient.callApi(
        '/sites/{site_id}/promotions/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a promotion using the information provided.
     * @param {String} siteId The site context.
     * @param {String} id The id of the promotion to create.
     * @param {module:model/Promotion} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Promotion}
     */
    this.putSitesByIDPromotionsByID = function(siteId, id, body) {
      return this.putSitesByIDPromotionsByIDWithHttpInfo(siteId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new configuration for an existing slot. If a slot configuration  exists with the specified configuration_id, slot_id, and context, the existing  slot configuration is overwritten.
     * @param {String} siteId The id of the site for which you want to create the slot configuration.
     * @param {String} slotId The id of the slot.
     * @param {String} configurationId The id of the slot configuration.
     * @param {module:model/SlotConfiguration} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SlotConfiguration} and HTTP response
     */
    this.putSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo = function(siteId, slotId, configurationId, body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDSlotsByIDSlotConfigurationsByID");
      }
      // verify the required parameter 'slotId' is set
      if (slotId === undefined || slotId === null) {
        throw new Error("Missing the required parameter 'slotId' when calling putSitesByIDSlotsByIDSlotConfigurationsByID");
      }
      // verify the required parameter 'configurationId' is set
      if (configurationId === undefined || configurationId === null) {
        throw new Error("Missing the required parameter 'configurationId' when calling putSitesByIDSlotsByIDSlotConfigurationsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSitesByIDSlotsByIDSlotConfigurationsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'slot_id': slotId,
        'configuration_id': configurationId
      };
      var queryParams = {
        'context': opts['context'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = SlotConfiguration;
      return this.apiClient.callApi(
        '/sites/{site_id}/slots/{slot_id}/slot_configurations/{configuration_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new configuration for an existing slot. If a slot configuration  exists with the specified configuration_id, slot_id, and context, the existing  slot configuration is overwritten.
     * @param {String} siteId The id of the site for which you want to create the slot configuration.
     * @param {String} slotId The id of the slot.
     * @param {String} configurationId The id of the slot configuration.
     * @param {module:model/SlotConfiguration} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SlotConfiguration}
     */
    this.putSitesByIDSlotsByIDSlotConfigurationsByID = function(siteId, slotId, configurationId, body, opts) {
      return this.putSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo(siteId, slotId, configurationId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a source code group using the information provided.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the source code group to create.
     * @param {module:model/SourceCodeGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SourceCodeGroup} and HTTP response
     */
    this.putSitesByIDSourceCodeGroupsByIDWithHttpInfo = function(siteId, id, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDSourceCodeGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putSitesByIDSourceCodeGroupsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSitesByIDSourceCodeGroupsByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = SourceCodeGroup;
      return this.apiClient.callApi(
        '/sites/{site_id}/source_code_groups/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a source code group using the information provided.
     * @param {String} siteId The id of the site.
     * @param {String} id The id of the source code group to create.
     * @param {module:model/SourceCodeGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SourceCodeGroup}
     */
    this.putSitesByIDSourceCodeGroupsByID = function(siteId, id, body) {
      return this.putSitesByIDSourceCodeGroupsByIDWithHttpInfo(siteId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a store using the information provided.
     * @param {String} siteId The site context.
     * @param {String} id The id of the store to create.
     * @param {module:model/Store} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Store} and HTTP response
     */
    this.putSitesByIDStoresByIDWithHttpInfo = function(siteId, id, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSitesByIDStoresByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putSitesByIDStoresByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSitesByIDStoresByID");
      }

      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Store;
      return this.apiClient.callApi(
        '/sites/{site_id}/stores/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a store using the information provided.
     * @param {String} siteId The site context.
     * @param {String} id The id of the store to create.
     * @param {module:model/Store} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Store}
     */
    this.putSitesByIDStoresByID = function(siteId, id, body) {
      return this.putSitesByIDStoresByIDWithHttpInfo(siteId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
