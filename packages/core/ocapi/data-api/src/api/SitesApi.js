/**
 * Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AbTest from '../models/AbTest';
import AbTestSearchResult from '../models/AbTestSearchResult';
import AbTestSegment from '../models/AbTestSegment';
import AbTests from '../models/AbTests';
import Campaign from '../models/Campaign';
import CampaignSearchResult from '../models/CampaignSearchResult';
import Campaigns from '../models/Campaigns';
import CartridgePathAddRequest from '../models/CartridgePathAddRequest';
import CartridgePathApiResponse from '../models/CartridgePathApiResponse';
import CartridgePathCreateRequest from '../models/CartridgePathCreateRequest';
import Coupon from '../models/Coupon';
import CouponCodes from '../models/CouponCodes';
import CouponMultiCodesRequest from '../models/CouponMultiCodesRequest';
import CouponRedemptionSearchResult from '../models/CouponRedemptionSearchResult';
import CouponSearchResult from '../models/CouponSearchResult';
import Coupons from '../models/Coupons';
import CustomObject from '../models/CustomObject';
import CustomerGroup from '../models/CustomerGroup';
import CustomerGroupMember from '../models/CustomerGroupMember';
import CustomerGroupMemberSearchResult from '../models/CustomerGroupMemberSearchResult';
import CustomerGroupMembers from '../models/CustomerGroupMembers';
import CustomerGroupSearchResult from '../models/CustomerGroupSearchResult';
import CustomerGroups from '../models/CustomerGroups';
import GiftCertificate from '../models/GiftCertificate';
import GiftCertificateSearchResult from '../models/GiftCertificateSearchResult';
import GiftCertificates from '../models/GiftCertificates';
import LocaleResult from '../models/LocaleResult';
import OrderConfirmationStatusUpdateRequest from '../models/OrderConfirmationStatusUpdateRequest';
import OrderExportStatusUpdateRequest from '../models/OrderExportStatusUpdateRequest';
import OrderExternalStatusUpdateRequest from '../models/OrderExternalStatusUpdateRequest';
import OrderPaymentStatusUpdateRequest from '../models/OrderPaymentStatusUpdateRequest';
import OrderShippingStatusUpdateRequest from '../models/OrderShippingStatusUpdateRequest';
import OrderStatusUpdateRequest from '../models/OrderStatusUpdateRequest';
import OrderUpdateRequest from '../models/OrderUpdateRequest';
import PaymentInstrumentUpdateRequest from '../models/PaymentInstrumentUpdateRequest';
import PaymentTransactionUpdateRequest from '../models/PaymentTransactionUpdateRequest';
import Promotion from '../models/Promotion';
import PromotionCampaignAssignmentSearchResult from '../models/PromotionCampaignAssignmentSearchResult';
import PromotionSearchResult from '../models/PromotionSearchResult';
import Promotions from '../models/Promotions';
import RecommendersResult from '../models/RecommendersResult';
import SearchRequest from '../models/SearchRequest';
import ShippingAddressUpdateRequest from '../models/ShippingAddressUpdateRequest';
import Site from '../models/Site';
import SitePreferences from '../models/SitePreferences';
import Sites from '../models/Sites';
import Slot from '../models/Slot';
import SlotConfiguration from '../models/SlotConfiguration';
import SlotConfigurationCampaignAssignment from '../models/SlotConfigurationCampaignAssignment';
import SlotConfigurationCampaignAssignmentSearchResult from '../models/SlotConfigurationCampaignAssignmentSearchResult';
import SlotConfigurationSearchResult from '../models/SlotConfigurationSearchResult';
import SlotConfigurations from '../models/SlotConfigurations';
import SlotSearchResult from '../models/SlotSearchResult';
import Slots from '../models/Slots';
import SortingRuleSearchResult from '../models/SortingRuleSearchResult';
import SourceCodeGroup from '../models/SourceCodeGroup';
import SourceCodeGroupSearchResult from '../models/SourceCodeGroupSearchResult';
import SourceCodeGroups from '../models/SourceCodeGroups';
import Store from '../models/Store';
import StoreSearchResult from '../models/StoreSearchResult';
import Stores from '../models/Stores';

/**
* Sites service.
* @module api/SitesApi
* @version 20.8
*/
export default class SitesApi {

    /**
    * Constructs a new SitesApi. 
    * @alias module:api/SitesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Deletes the A/B Test by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDAbTestsByIDWithHttpInfo(siteId, id) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the A/B Test by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDAbTestsByID(siteId, id) {
      return this.deleteSitesByIDAbTestsByIDWithHttpInfo(siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the A/B Test Segment by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo(siteId, id, segmentId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id,
        'segment_id': segmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}/segments/{segment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the A/B Test Segment by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDAbTestsByIDSegmentsByID(siteId, id, segmentId) {
      return this.deleteSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo(siteId, id, segmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind one promotions from a given abTest.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDWithHttpInfo(siteId, abTestId, segmentId, promotionId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'ab_test_id': abTestId,
        'segment_id': segmentId,
        'promotion_id': promotionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/promotions/{promotion_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to unbind one promotions from a given abTest.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByID(siteId, abTestId, segmentId, promotionId) {
      return this.deleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDWithHttpInfo(siteId, abTestId, segmentId, promotionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a slot configuration from a given abTest.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDWithHttpInfo(abTestId, segmentId, siteId, slotId, slotConfigId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'ab_test_id': abTestId,
        'segment_id': segmentId,
        'site_id': siteId,
        'slot_id': slotId,
        'slot_config_id': slotConfigId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/slot_configurations/{slot_id}/{slot_config_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to unbind a slot configuration from a given abTest.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID(abTestId, segmentId, siteId, slotId, slotConfigId, opts) {
      return this.deleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDWithHttpInfo(abTestId, segmentId, siteId, slotId, slotConfigId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a single sorting rule from a given abTest.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDWithHttpInfo(siteId, abTestId, segmentId, sortingRuleId, categoryId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'ab_test_id': abTestId,
        'segment_id': segmentId,
        'sorting_rule_id': sortingRuleId,
        'category_id': categoryId
      };
      let queryParams = {
        'rule_context': opts['ruleContext']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/sorting_rules/{sorting_rule_id}/{category_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to unbind a single sorting rule from a given abTest.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID(siteId, abTestId, segmentId, sortingRuleId, categoryId, opts) {
      return this.deleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDWithHttpInfo(siteId, abTestId, segmentId, sortingRuleId, categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the campaign by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDCampaignsByIDWithHttpInfo(siteId, campaignId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the campaign by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDCampaignsByID(siteId, campaignId) {
      return this.deleteSitesByIDCampaignsByIDWithHttpInfo(siteId, campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a coupon from a given campaign.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDCampaignsByIDCouponsByIDWithHttpInfo(siteId, campaignId, couponId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'coupon_id': couponId
      };
      let queryParams = {
        'removeInPCA': opts['removeInPCA']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/coupons/{coupon_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to unbind a coupon from a given campaign.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDCampaignsByIDCouponsByID(siteId, campaignId, couponId, opts) {
      return this.deleteSitesByIDCampaignsByIDCouponsByIDWithHttpInfo(siteId, campaignId, couponId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a customer group from a given campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDCampaignsByIDCustomerGroupsByIDWithHttpInfo(siteId, campaignId, customerGroupId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'customer_group_id': customerGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/customer_groups/{customer_group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to unbind a customer group from a given campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDCampaignsByIDCustomerGroupsByID(siteId, campaignId, customerGroupId) {
      return this.deleteSitesByIDCampaignsByIDCustomerGroupsByIDWithHttpInfo(siteId, campaignId, customerGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a single promotion from a given campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDCampaignsByIDPromotionsByIDWithHttpInfo(siteId, campaignId, promotionId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'promotion_id': promotionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/promotions/{promotion_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to unbind a single promotion from a given campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDCampaignsByIDPromotionsByID(siteId, campaignId, promotionId) {
      return this.deleteSitesByIDCampaignsByIDPromotionsByIDWithHttpInfo(siteId, campaignId, promotionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a slot configuration from a given campaign.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDCampaignsByIDSlotConfigurationsByIDByIDWithHttpInfo(campaignId, siteId, slotId, slotConfigId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'campaign_id': campaignId,
        'site_id': siteId,
        'slot_id': slotId,
        'slot_config_id': slotConfigId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/slot_configurations/{slot_id}/{slot_config_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to unbind a slot configuration from a given campaign.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDCampaignsByIDSlotConfigurationsByIDByID(campaignId, siteId, slotId, slotConfigId, opts) {
      return this.deleteSitesByIDCampaignsByIDSlotConfigurationsByIDByIDWithHttpInfo(campaignId, siteId, slotId, slotConfigId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a single sorting rule from a given campaign.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDCampaignsByIDSortingRulesByIDByIDWithHttpInfo(siteId, campaignId, sortingRuleId, categoryId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'sorting_rule_id': sortingRuleId,
        'category_id': categoryId
      };
      let queryParams = {
        'rule_context': opts['ruleContext']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/sorting_rules/{sorting_rule_id}/{category_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to unbind a single sorting rule from a given campaign.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDCampaignsByIDSortingRulesByIDByID(siteId, campaignId, sortingRuleId, categoryId, opts) {
      return this.deleteSitesByIDCampaignsByIDSortingRulesByIDByIDWithHttpInfo(siteId, campaignId, sortingRuleId, categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unbind a source code group from a given campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDCampaignsByIDSourceCodeGroupsByIDWithHttpInfo(siteId, campaignId, sourceCodeGroupId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'source_code_group_id': sourceCodeGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/source_code_groups/{source_code_group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to unbind a source code group from a given campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDCampaignsByIDSourceCodeGroupsByID(siteId, campaignId, sourceCodeGroupId) {
      return this.deleteSitesByIDCampaignsByIDSourceCodeGroupsByIDWithHttpInfo(siteId, campaignId, sourceCodeGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a cartridge from cartridge path.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CartridgePathApiResponse} and HTTP response
     */
    deleteSitesByIDCartridgesByIDWithHttpInfo(siteId, cartridgeName) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'cartridge_name': cartridgeName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CartridgePathApiResponse;

      return this.apiClient.callApi(
        '/sites/{site_id}/cartridges/{cartridge_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a cartridge from cartridge path.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CartridgePathApiResponse}
     */
    deleteSitesByIDCartridgesByID(siteId, cartridgeName) {
      return this.deleteSitesByIDCartridgesByIDWithHttpInfo(siteId, cartridgeName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a coupon by id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDCouponsByIDWithHttpInfo(siteId, couponId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a coupon by id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDCouponsByID(siteId, couponId) {
      return this.deleteSitesByIDCouponsByIDWithHttpInfo(siteId, couponId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a site specific Custom Object. If the Custom Object does not exist, this will do nothing. Note that the customization scripts are only called, if the Custom Object does exist.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDCustomObjectsByIDByIDWithHttpInfo(siteId, objectType, key) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'object_type': objectType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/custom_objects/{object_type}/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes a site specific Custom Object. If the Custom Object does not exist, this will do nothing. Note that the customization scripts are only called, if the Custom Object does exist.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDCustomObjectsByIDByID(siteId, objectType, key) {
      return this.deleteSitesByIDCustomObjectsByIDByIDWithHttpInfo(siteId, objectType, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Triggers customer group deletion by ID. Be aware that the deletion happens via asynchronous batch process  which is the reason the deletion itself is not necessarily finished after the call to this resource returned. The   customer group that is in deletion will be provided in the response.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerGroup} and HTTP response
     */
    deleteSitesByIDCustomerGroupsByIDWithHttpInfo(siteId, id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomerGroup;

      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Triggers customer group deletion by ID. Be aware that the deletion happens via asynchronous batch process  which is the reason the deletion itself is not necessarily finished after the call to this resource returned. The   customer group that is in deletion will be provided in the response.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerGroup}
     */
    deleteSitesByIDCustomerGroupsByID(siteId, id, opts) {
      return this.deleteSitesByIDCustomerGroupsByIDWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to remove a customer from a (static) customer group.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDCustomerGroupsByIDMembersByIDWithHttpInfo(siteId, id, customerNo, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id,
        'customer_no': customerNo
      };
      let queryParams = {
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}/members/{customer_no}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to remove a customer from a (static) customer group.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDCustomerGroupsByIDMembersByID(siteId, id, customerNo, opts) {
      return this.deleteSitesByIDCustomerGroupsByIDMembersByIDWithHttpInfo(siteId, id, customerNo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the gift certificate by merchant ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDGiftCertificatesByIDWithHttpInfo(siteId, merchantId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'merchant_id': merchantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/gift_certificates/{merchant_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the gift certificate by merchant ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDGiftCertificatesByID(siteId, merchantId) {
      return this.deleteSitesByIDGiftCertificatesByIDWithHttpInfo(siteId, merchantId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the promotion by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDPromotionsByIDWithHttpInfo(siteId, id) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/promotions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the promotion by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDPromotionsByID(siteId, id) {
      return this.deleteSitesByIDPromotionsByIDWithHttpInfo(siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a configuration for slot in a given context from a site.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo(siteId, slotId, configurationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'slot_id': slotId,
        'configuration_id': configurationId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/slots/{slot_id}/slot_configurations/{configuration_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a configuration for slot in a given context from a site.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDSlotsByIDSlotConfigurationsByID(siteId, slotId, configurationId, opts) {
      return this.deleteSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo(siteId, slotId, configurationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the source code group by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDSourceCodeGroupsByIDWithHttpInfo(siteId, id) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/source_code_groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the source code group by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDSourceCodeGroupsByID(siteId, id) {
      return this.deleteSitesByIDSourceCodeGroupsByIDWithHttpInfo(siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the store by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSitesByIDStoresByIDWithHttpInfo(siteId, id) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/stores/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the store by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSitesByIDStoresByID(siteId, id) {
      return this.deleteSitesByIDStoresByIDWithHttpInfo(siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all existing sites.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Sites} and HTTP response
     */
    getSitesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Sites;

      return this.apiClient.callApi(
        '/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get all existing sites.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Sites}
     */
    getSites(opts) {
      return this.getSitesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to read an existing site.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Site} and HTTP response
     */
    getSitesByIDWithHttpInfo(siteId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Site;

      return this.apiClient.callApi(
        '/sites/{site_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to read an existing site.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Site}
     */
    getSitesByID(siteId) {
      return this.getSitesByIDWithHttpInfo(siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the A/B tests with searching.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AbTests} and HTTP response
     */
    getSitesByIDAbTestsWithHttpInfo(siteId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AbTests;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get all the A/B tests with searching.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AbTests}
     */
    getSitesByIDAbTests(siteId, opts) {
      return this.getSitesByIDAbTestsWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get an A/B Test information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AbTest} and HTTP response
     */
    getSitesByIDAbTestsByIDWithHttpInfo(siteId, id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AbTest;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get an A/B Test information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AbTest}
     */
    getSitesByIDAbTestsByID(siteId, id, opts) {
      return this.getSitesByIDAbTestsByIDWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets an A/B Test segment using the information provided.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AbTestSegment} and HTTP response
     */
    getSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo(siteId, id, segmentId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id,
        'segment_id': segmentId
      };
      let queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AbTestSegment;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}/segments/{segment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets an A/B Test segment using the information provided.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AbTestSegment}
     */
    getSitesByIDAbTestsByIDSegmentsByID(siteId, id, segmentId, opts) {
      return this.getSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo(siteId, id, segmentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of available AI recommenders. Recommenders are configured in the Einstein configurator and are required with AI recommendation API requests.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/RecommendersResult} and HTTP response
     */
    getSitesByIDAiRecommenderNamesWithHttpInfo(siteId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = RecommendersResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/ai/recommender_names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of available AI recommenders. Recommenders are configured in the Einstein configurator and are required with AI recommendation API requests.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/RecommendersResult}
     */
    getSitesByIDAiRecommenderNames(siteId) {
      return this.getSitesByIDAiRecommenderNamesWithHttpInfo(siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get campaign information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Campaign} and HTTP response
     */
    getSitesByIDCampaignsByIDWithHttpInfo(siteId, campaignId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Campaign;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get campaign information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Campaign}
     */
    getSitesByIDCampaignsByID(siteId, campaignId) {
      return this.getSitesByIDCampaignsByIDWithHttpInfo(siteId, campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the coupons with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Coupons} and HTTP response
     */
    getSitesByIDCouponsWithHttpInfo(siteId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Coupons;

      return this.apiClient.callApi(
        '/sites/{site_id}/coupons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get all the coupons with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Coupons}
     */
    getSitesByIDCoupons(siteId, opts) {
      return this.getSitesByIDCouponsWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get coupon information.   The following fields are returned in the Coupon document when specifying the stats expand:        exported_code_count      redemption_count      total_codes_count       If the role to which the user belongs does not have View_Coupon_Codes permission, then the coupon codes returned will be masked.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Coupon} and HTTP response
     */
    getSitesByIDCouponsByIDWithHttpInfo(siteId, couponId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      let queryParams = {
        'select': opts['select'],
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Coupon;

      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get coupon information.   The following fields are returned in the Coupon document when specifying the stats expand:        exported_code_count      redemption_count      total_codes_count       If the role to which the user belongs does not have View_Coupon_Codes permission, then the coupon codes returned will be masked.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Coupon}
     */
    getSitesByIDCouponsByID(siteId, couponId, opts) {
      return this.getSitesByIDCouponsByIDWithHttpInfo(siteId, couponId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the campaigns that have a coupon assigned to them either directly or through promotions
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Campaigns} and HTTP response
     */
    getSitesByIDCouponsByIDCampaignsWithHttpInfo(siteId, couponId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Campaigns;

      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}/campaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the campaigns that have a coupon assigned to them either directly or through promotions
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Campaigns}
     */
    getSitesByIDCouponsByIDCampaigns(siteId, couponId, opts) {
      return this.getSitesByIDCouponsByIDCampaignsWithHttpInfo(siteId, couponId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the promotions for a campaign that have a coupon assigned to them either directly or through campaigns.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Promotions} and HTTP response
     */
    getSitesByIDCouponsByIDCampaignsByIDPromotionsWithHttpInfo(siteId, couponId, campaignId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'coupon_id': couponId,
        'campaign_id': campaignId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Promotions;

      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}/campaigns/{campaign_id}/promotions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the promotions for a campaign that have a coupon assigned to them either directly or through campaigns.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Promotions}
     */
    getSitesByIDCouponsByIDCampaignsByIDPromotions(siteId, couponId, campaignId, opts) {
      return this.getSitesByIDCouponsByIDCampaignsByIDPromotionsWithHttpInfo(siteId, couponId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the coupon codes for the given coupon.   If the role to which the user belongs does not have View_Coupon_Codes permission, then the coupon codes returned will be masked.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CouponCodes} and HTTP response
     */
    getSitesByIDCouponsByIDCodesWithHttpInfo(siteId, couponId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CouponCodes;

      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}/codes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the coupon codes for the given coupon.   If the role to which the user belongs does not have View_Coupon_Codes permission, then the coupon codes returned will be masked.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CouponCodes}
     */
    getSitesByIDCouponsByIDCodes(siteId, couponId, opts) {
      return this.getSitesByIDCouponsByIDCodesWithHttpInfo(siteId, couponId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the promotions that have a coupon assigned to them either directly or through campaigns.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Promotions} and HTTP response
     */
    getSitesByIDCouponsByIDPromotionsWithHttpInfo(siteId, couponId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Promotions;

      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}/promotions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the promotions that have a coupon assigned to them either directly or through campaigns.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Promotions}
     */
    getSitesByIDCouponsByIDPromotions(siteId, couponId, opts) {
      return this.getSitesByIDCouponsByIDPromotionsWithHttpInfo(siteId, couponId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reads a site specific Custom Object with a given object type ID and a value for the key attribute of the object which represents its unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomObject} and HTTP response
     */
    getSitesByIDCustomObjectsByIDByIDWithHttpInfo(siteId, objectType, key) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'object_type': objectType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomObject;

      return this.apiClient.callApi(
        '/sites/{site_id}/custom_objects/{object_type}/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reads a site specific Custom Object with a given object type ID and a value for the key attribute of the object which represents its unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomObject}
     */
    getSitesByIDCustomObjectsByIDByID(siteId, objectType, key) {
      return this.getSitesByIDCustomObjectsByIDByIDWithHttpInfo(siteId, objectType, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the customer groups with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerGroups} and HTTP response
     */
    getSitesByIDCustomerGroupsWithHttpInfo(siteId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomerGroups;

      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get all the customer groups with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerGroups}
     */
    getSitesByIDCustomerGroups(siteId, opts) {
      return this.getSitesByIDCustomerGroupsWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get customer group information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerGroup} and HTTP response
     */
    getSitesByIDCustomerGroupsByIDWithHttpInfo(siteId, id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomerGroup;

      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get customer group information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerGroup}
     */
    getSitesByIDCustomerGroupsByID(siteId, id, opts) {
      return this.getSitesByIDCustomerGroupsByIDWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the customer group members with no filtering. For dynamic customer groups and the system groups \&quot;Everyone\&quot; and \&quot;Unregistered\&quot; no result is returned (Status Code: 204 - No Content).
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerGroupMembers} and HTTP response
     */
    getSitesByIDCustomerGroupsByIDMembersWithHttpInfo(siteId, id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomerGroupMembers;

      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get all the customer group members with no filtering. For dynamic customer groups and the system groups \&quot;Everyone\&quot; and \&quot;Unregistered\&quot; no result is returned (Status Code: 204 - No Content).
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerGroupMembers}
     */
    getSitesByIDCustomerGroupsByIDMembers(siteId, id, opts) {
      return this.getSitesByIDCustomerGroupsByIDMembersWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get customer group member information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerGroupMember} and HTTP response
     */
    getSitesByIDCustomerGroupsByIDMembersByIDWithHttpInfo(siteId, id, customerNo, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id,
        'customer_no': customerNo
      };
      let queryParams = {
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomerGroupMember;

      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}/members/{customer_no}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get customer group member information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerGroupMember}
     */
    getSitesByIDCustomerGroupsByIDMembersByID(siteId, id, customerNo, opts) {
      return this.getSitesByIDCustomerGroupsByIDMembersByIDWithHttpInfo(siteId, id, customerNo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the gift certificates with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/GiftCertificates} and HTTP response
     */
    getSitesByIDGiftCertificatesWithHttpInfo(siteId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = GiftCertificates;

      return this.apiClient.callApi(
        '/sites/{site_id}/gift_certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get all the gift certificates with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/GiftCertificates}
     */
    getSitesByIDGiftCertificates(siteId, opts) {
      return this.getSitesByIDGiftCertificatesWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get gift certificate information using merchant ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/GiftCertificate} and HTTP response
     */
    getSitesByIDGiftCertificatesByIDWithHttpInfo(siteId, merchantId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'merchant_id': merchantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = GiftCertificate;

      return this.apiClient.callApi(
        '/sites/{site_id}/gift_certificates/{merchant_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get gift certificate information using merchant ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/GiftCertificate}
     */
    getSitesByIDGiftCertificatesByID(siteId, merchantId) {
      return this.getSitesByIDGiftCertificatesByIDWithHttpInfo(siteId, merchantId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get the set of locales with the system given a site.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/LocaleResult} and HTTP response
     */
    getSitesByIDLocaleInfoLocalesWithHttpInfo(siteId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
        'include_all': opts['includeAll'],
        'id': opts['id'],
        'select': opts['select'],
        'start': opts['start'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = LocaleResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/locale_info/locales', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get the set of locales with the system given a site.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/LocaleResult}
     */
    getSitesByIDLocaleInfoLocales(siteId, opts) {
      return this.getSitesByIDLocaleInfoLocalesWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get promotion information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Promotion} and HTTP response
     */
    getSitesByIDPromotionsByIDWithHttpInfo(siteId, id) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Promotion;

      return this.apiClient.callApi(
        '/sites/{site_id}/promotions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get promotion information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Promotion}
     */
    getSitesByIDPromotionsByID(siteId, id) {
      return this.getSitesByIDPromotionsByIDWithHttpInfo(siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * For the specified site and instance, read the custom preferences in the preference group.  Specify &#x27;current&#x27; to retrieve the preferences for the instance on which this call is being made. The system will recognize its type.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SitePreferences} and HTTP response
     */
    getSitesByIDSitePreferencesPreferenceGroupsByIDByIDWithHttpInfo(siteId, instanceType, groupId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'instance_type': instanceType,
        'group_id': groupId
      };
      let queryParams = {
        'mask_passwords': opts['maskPasswords']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = SitePreferences;

      return this.apiClient.callApi(
        '/sites/{site_id}/site_preferences/preference_groups/{group_id}/{instance_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * For the specified site and instance, read the custom preferences in the preference group.  Specify &#x27;current&#x27; to retrieve the preferences for the instance on which this call is being made. The system will recognize its type.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SitePreferences}
     */
    getSitesByIDSitePreferencesPreferenceGroupsByIDByID(siteId, instanceType, groupId, opts) {
      return this.getSitesByIDSitePreferencesPreferenceGroupsByIDByIDWithHttpInfo(siteId, instanceType, groupId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the slot configurations with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SlotConfigurations} and HTTP response
     */
    getSitesByIDSlotConfigurationsWithHttpInfo(siteId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = SlotConfigurations;

      return this.apiClient.callApi(
        '/sites/{site_id}/slot_configurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get all the slot configurations with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SlotConfigurations}
     */
    getSitesByIDSlotConfigurations(siteId, opts) {
      return this.getSitesByIDSlotConfigurationsWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the slots with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Slots} and HTTP response
     */
    getSitesByIDSlotsWithHttpInfo(siteId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Slots;

      return this.apiClient.callApi(
        '/sites/{site_id}/slots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get all the slots with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Slots}
     */
    getSitesByIDSlots(siteId, opts) {
      return this.getSitesByIDSlotsWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get slot information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Slot} and HTTP response
     */
    getSitesByIDSlotsByIDByIDWithHttpInfo(siteId, slotId, contextType, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'slot_id': slotId,
        'context_type': contextType
      };
      let queryParams = {
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Slot;

      return this.apiClient.callApi(
        '/sites/{site_id}/slots/{slot_id}/{context_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get slot information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Slot}
     */
    getSitesByIDSlotsByIDByID(siteId, slotId, contextType, opts) {
      return this.getSitesByIDSlotsByIDByIDWithHttpInfo(siteId, slotId, contextType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to read an existing slot configuration.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SlotConfiguration} and HTTP response
     */
    getSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo(siteId, slotId, configurationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'slot_id': slotId,
        'configuration_id': configurationId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = SlotConfiguration;

      return this.apiClient.callApi(
        '/sites/{site_id}/slots/{slot_id}/slot_configurations/{configuration_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to read an existing slot configuration.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SlotConfiguration}
     */
    getSitesByIDSlotsByIDSlotConfigurationsByID(siteId, slotId, configurationId, opts) {
      return this.getSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo(siteId, slotId, configurationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the source code groups with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SourceCodeGroups} and HTTP response
     */
    getSitesByIDSourceCodeGroupsWithHttpInfo(siteId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = SourceCodeGroups;

      return this.apiClient.callApi(
        '/sites/{site_id}/source_code_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get all the source code groups with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SourceCodeGroups}
     */
    getSitesByIDSourceCodeGroups(siteId, opts) {
      return this.getSitesByIDSourceCodeGroupsWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to retrieve source code group information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SourceCodeGroup} and HTTP response
     */
    getSitesByIDSourceCodeGroupsByIDWithHttpInfo(siteId, id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = SourceCodeGroup;

      return this.apiClient.callApi(
        '/sites/{site_id}/source_code_groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to retrieve source code group information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SourceCodeGroup}
     */
    getSitesByIDSourceCodeGroupsByID(siteId, id, opts) {
      return this.getSitesByIDSourceCodeGroupsByIDWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the stores with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Stores} and HTTP response
     */
    getSitesByIDStoresWithHttpInfo(siteId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Stores;

      return this.apiClient.callApi(
        '/sites/{site_id}/stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get all the stores with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Stores}
     */
    getSitesByIDStores(siteId, opts) {
      return this.getSitesByIDStoresWithHttpInfo(siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get store information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Store} and HTTP response
     */
    getSitesByIDStoresByIDWithHttpInfo(siteId, id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Store;

      return this.apiClient.callApi(
        '/sites/{site_id}/stores/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get store information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Store}
     */
    getSitesByIDStoresByID(siteId, id, opts) {
      return this.getSitesByIDStoresByIDWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the A/B Test with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AbTest} and HTTP response
     */
    patchSitesByIDAbTestsByIDWithHttpInfo(siteId, id, opts) {
      let postBody = opts['body'];

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AbTest;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the A/B Test with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AbTest}
     */
    patchSitesByIDAbTestsByID(siteId, id, opts) {
      return this.patchSitesByIDAbTestsByIDWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the A/B Test segment with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AbTestSegment} and HTTP response
     */
    patchSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo(siteId, id, segmentId, opts) {
      let postBody = opts['body'];

      let pathParams = {
        'site_id': siteId,
        'id': id,
        'segment_id': segmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AbTestSegment;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}/segments/{segment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the A/B Test segment with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AbTestSegment}
     */
    patchSitesByIDAbTestsByIDSegmentsByID(siteId, id, segmentId, opts) {
      return this.patchSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo(siteId, id, segmentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the campaign with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Campaign} and HTTP response
     */
    patchSitesByIDCampaignsByIDWithHttpInfo(body, siteId, campaignId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Campaign;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the campaign with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Campaign}
     */
    patchSitesByIDCampaignsByID(body, siteId, campaignId) {
      return this.patchSitesByIDCampaignsByIDWithHttpInfo(body, siteId, campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to update the assignment of slot configuration to a campaign.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    patchSitesByIDCampaignsByIDSlotConfigurationsByIDByIDWithHttpInfo(body, campaignId, siteId, slotId, slotConfigId, opts) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'campaign_id': campaignId,
        'site_id': siteId,
        'slot_id': slotId,
        'slot_config_id': slotConfigId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/slot_configurations/{slot_id}/{slot_config_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to update the assignment of slot configuration to a campaign.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    patchSitesByIDCampaignsByIDSlotConfigurationsByIDByID(body, campaignId, siteId, slotId, slotConfigId, opts) {
      return this.patchSitesByIDCampaignsByIDSlotConfigurationsByIDByIDWithHttpInfo(body, campaignId, siteId, slotId, slotConfigId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the coupon with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Coupon} and HTTP response
     */
    patchSitesByIDCouponsByIDWithHttpInfo(body, siteId, couponId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Coupon;

      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the coupon with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Coupon}
     */
    patchSitesByIDCouponsByID(body, siteId, couponId) {
      return this.patchSitesByIDCouponsByIDWithHttpInfo(body, siteId, couponId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a site specific Custom Object with information from request body. Note that only mentioned attributes will be updated and the key attribute is ignored. All other attributes will be left unattended.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomObject} and HTTP response
     */
    patchSitesByIDCustomObjectsByIDByIDWithHttpInfo(body, siteId, objectType, key) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'object_type': objectType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomObject;

      return this.apiClient.callApi(
        '/sites/{site_id}/custom_objects/{object_type}/{key}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates a site specific Custom Object with information from request body. Note that only mentioned attributes will be updated and the key attribute is ignored. All other attributes will be left unattended.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomObject}
     */
    patchSitesByIDCustomObjectsByIDByID(body, siteId, objectType, key) {
      return this.patchSitesByIDCustomObjectsByIDByIDWithHttpInfo(body, siteId, objectType, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the customer group with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerGroup} and HTTP response
     */
    patchSitesByIDCustomerGroupsByIDWithHttpInfo(body, siteId, id) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomerGroup;

      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the customer group with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerGroup}
     */
    patchSitesByIDCustomerGroupsByID(body, siteId, id) {
      return this.patchSitesByIDCustomerGroupsByIDWithHttpInfo(body, siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the gift certificate with the specified information using merchant ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/GiftCertificate} and HTTP response
     */
    patchSitesByIDGiftCertificatesByIDWithHttpInfo(body, siteId, merchantId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'merchant_id': merchantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = GiftCertificate;

      return this.apiClient.callApi(
        '/sites/{site_id}/gift_certificates/{merchant_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the gift certificate with the specified information using merchant ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/GiftCertificate}
     */
    patchSitesByIDGiftCertificatesByID(body, siteId, merchantId) {
      return this.patchSitesByIDGiftCertificatesByIDWithHttpInfo(body, siteId, merchantId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    patchSitesByIDOrdersByIDWithHttpInfo(body, siteId, orderNo) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'order_no': orderNo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    patchSitesByIDOrdersByID(body, siteId, orderNo) {
      return this.patchSitesByIDOrdersByIDWithHttpInfo(body, siteId, orderNo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the payment instrument of an order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    patchSitesByIDOrdersByIDPaymentInstrumentsByIDWithHttpInfo(body, siteId, orderNo, paymentInstrumentId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'order_no': orderNo,
        'payment_instrument_id': paymentInstrumentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/payment_instruments/{payment_instrument_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the payment instrument of an order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    patchSitesByIDOrdersByIDPaymentInstrumentsByID(body, siteId, orderNo, paymentInstrumentId) {
      return this.patchSitesByIDOrdersByIDPaymentInstrumentsByIDWithHttpInfo(body, siteId, orderNo, paymentInstrumentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the transaction of an order payment instrument.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    patchSitesByIDOrdersByIDPaymentInstrumentsByIDTransactionWithHttpInfo(body, siteId, orderNo, paymentInstrumentId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'order_no': orderNo,
        'payment_instrument_id': paymentInstrumentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/payment_instruments/{payment_instrument_id}/transaction', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the transaction of an order payment instrument.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    patchSitesByIDOrdersByIDPaymentInstrumentsByIDTransaction(body, siteId, orderNo, paymentInstrumentId) {
      return this.patchSitesByIDOrdersByIDPaymentInstrumentsByIDTransactionWithHttpInfo(body, siteId, orderNo, paymentInstrumentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the promotion with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Promotion} and HTTP response
     */
    patchSitesByIDPromotionsByIDWithHttpInfo(body, siteId, id) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Promotion;

      return this.apiClient.callApi(
        '/sites/{site_id}/promotions/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the promotion with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Promotion}
     */
    patchSitesByIDPromotionsByID(body, siteId, id) {
      return this.patchSitesByIDPromotionsByIDWithHttpInfo(body, siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * For the specified site and instance, update one or more custom preferences in the preference group.  Preferences of type password cannot be set to \&quot;************\&quot; since it is a reserved value.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SitePreferences} and HTTP response
     */
    patchSitesByIDSitePreferencesPreferenceGroupsByIDByIDWithHttpInfo(body, siteId, instanceType, groupId, opts) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'instance_type': instanceType,
        'group_id': groupId
      };
      let queryParams = {
        'mask_passwords': opts['maskPasswords']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = SitePreferences;

      return this.apiClient.callApi(
        '/sites/{site_id}/site_preferences/preference_groups/{group_id}/{instance_type}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * For the specified site and instance, update one or more custom preferences in the preference group.  Preferences of type password cannot be set to \&quot;************\&quot; since it is a reserved value.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SitePreferences}
     */
    patchSitesByIDSitePreferencesPreferenceGroupsByIDByID(body, siteId, instanceType, groupId, opts) {
      return this.patchSitesByIDSitePreferencesPreferenceGroupsByIDByIDWithHttpInfo(body, siteId, instanceType, groupId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates an existing slot configuration. This action ignores the slot_id and  the context information in the input document. Note that this operation will  not touch any relational properties, which means, that e.g. the rank on a specific  campaign assignment will not be changed, when the rank for the slot configuration  itself is updated.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SlotConfiguration} and HTTP response
     */
    patchSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo(body, siteId, slotId, configurationId, opts) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'slot_id': slotId,
        'configuration_id': configurationId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = SlotConfiguration;

      return this.apiClient.callApi(
        '/sites/{site_id}/slots/{slot_id}/slot_configurations/{configuration_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates an existing slot configuration. This action ignores the slot_id and  the context information in the input document. Note that this operation will  not touch any relational properties, which means, that e.g. the rank on a specific  campaign assignment will not be changed, when the rank for the slot configuration  itself is updated.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SlotConfiguration}
     */
    patchSitesByIDSlotsByIDSlotConfigurationsByID(body, siteId, slotId, configurationId, opts) {
      return this.patchSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo(body, siteId, slotId, configurationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the source code group with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SourceCodeGroup} and HTTP response
     */
    patchSitesByIDSourceCodeGroupsByIDWithHttpInfo(body, siteId, id) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = SourceCodeGroup;

      return this.apiClient.callApi(
        '/sites/{site_id}/source_code_groups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the source code group with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SourceCodeGroup}
     */
    patchSitesByIDSourceCodeGroupsByID(body, siteId, id) {
      return this.patchSitesByIDSourceCodeGroupsByIDWithHttpInfo(body, siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the store with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Store} and HTTP response
     */
    patchSitesByIDStoresByIDWithHttpInfo(body, siteId, id) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Store;

      return this.apiClient.callApi(
        '/sites/{site_id}/stores/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the store with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Store}
     */
    patchSitesByIDStoresByID(body, siteId, id) {
      return this.patchSitesByIDStoresByIDWithHttpInfo(body, siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for A/B Tests. The query attribute specifies a complex query that can be used to narrow down the search. This is the list of searchable attributes:  id - String description - String enabled - Boolean paused - Boolean key_metric_id - String email_addresses - String tags- String expiration_type - String enum[session, never] start_date - DateTime end_date - DateTime  These fields can only be used in Queries as conjunctions (using AND).  If the field is used in a disjunction (OR) an exception will be thrown. The output of the query can also be sorted. These are the list of sortable attributes:  id - String description - String enabled - Boolean paused - Boolean key_metric_id - String 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AbTestSearchResult} and HTTP response
     */
    postSitesByIDAbTestSearchWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AbTestSearchResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_test_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for A/B Tests. The query attribute specifies a complex query that can be used to narrow down the search. This is the list of searchable attributes:  id - String description - String enabled - Boolean paused - Boolean key_metric_id - String email_addresses - String tags- String expiration_type - String enum[session, never] start_date - DateTime end_date - DateTime  These fields can only be used in Queries as conjunctions (using AND).  If the field is used in a disjunction (OR) an exception will be thrown. The output of the query can also be sorted. These are the list of sortable attributes:  id - String description - String enabled - Boolean paused - Boolean key_metric_id - String 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AbTestSearchResult}
     */
    postSitesByIDAbTestSearch(body, siteId) {
      return this.postSitesByIDAbTestSearchWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for campaigns.    The Campaign Search document contains a search object that allows filtering on various attributes.     The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:        campaign_id - String      description - String      enabled - Boolean      coupon_id* - String      customer_group* - String      source_code* - String      start_date - Date      end_date - Date      last_modified - Date           These fields can only be used in Queries as conjunctions (using AND).  If the field is used in a disjunction  (OR) an exception will be thrown.   Note that only searchable attributes (excluding the ones marked with above with an asterisk) can be used in sorting  Additionally start_date, end_date and last_modified cannot be used in sorting.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CampaignSearchResult} and HTTP response
     */
    postSitesByIDCampaignSearchWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CampaignSearchResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaign_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for campaigns.    The Campaign Search document contains a search object that allows filtering on various attributes.     The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:        campaign_id - String      description - String      enabled - Boolean      coupon_id* - String      customer_group* - String      source_code* - String      start_date - Date      end_date - Date      last_modified - Date           These fields can only be used in Queries as conjunctions (using AND).  If the field is used in a disjunction  (OR) an exception will be thrown.   Note that only searchable attributes (excluding the ones marked with above with an asterisk) can be used in sorting  Additionally start_date, end_date and last_modified cannot be used in sorting.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CampaignSearchResult}
     */
    postSitesByIDCampaignSearch(body, siteId) {
      return this.postSitesByIDCampaignSearchWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a cartridge to current cartridge path.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CartridgePathApiResponse} and HTTP response
     */
    postSitesByIDCartridgesWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CartridgePathApiResponse;

      return this.apiClient.callApi(
        '/sites/{site_id}/cartridges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a cartridge to current cartridge path.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CartridgePathApiResponse}
     */
    postSitesByIDCartridges(body, siteId) {
      return this.postSitesByIDCartridgesWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for coupon redemptions.    The Coupon Redemption Search document contains a search object that allows filtering on various attributes.     The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:        code - String      coupon_id - String      customer_email - String      order_no - String     Note that only searchable attributes can be used in sorting.   If the role to which the user belongs does not have View_Coupon_Codes permission, then the coupon codes returned will be masked.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CouponRedemptionSearchResult} and HTTP response
     */
    postSitesByIDCouponRedemptionSearchWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CouponRedemptionSearchResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/coupon_redemption_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for coupon redemptions.    The Coupon Redemption Search document contains a search object that allows filtering on various attributes.     The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:        code - String      coupon_id - String      customer_email - String      order_no - String     Note that only searchable attributes can be used in sorting.   If the role to which the user belongs does not have View_Coupon_Codes permission, then the coupon codes returned will be masked.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CouponRedemptionSearchResult}
     */
    postSitesByIDCouponRedemptionSearch(body, siteId) {
      return this.postSitesByIDCouponRedemptionSearchWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for coupons.   The Coupon Search document contains a search object that allows filtering on various attributes.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    coupon_id - String  description - String  type - one of {\&quot;single_code\&quot;, \&quot;multiple_codes\&quot;, \&quot;system_codes\&quot;}  enabled - boolean     Note that only searchable attributes can be used in sorting.   The stats expand value is required to return the following fields in the Coupon document:        exported_code_count      redemption_count      total_codes_count  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CouponSearchResult} and HTTP response
     */
    postSitesByIDCouponSearchWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CouponSearchResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/coupon_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for coupons.   The Coupon Search document contains a search object that allows filtering on various attributes.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    coupon_id - String  description - String  type - one of {\&quot;single_code\&quot;, \&quot;multiple_codes\&quot;, \&quot;system_codes\&quot;}  enabled - boolean     Note that only searchable attributes can be used in sorting.   The stats expand value is required to return the following fields in the Coupon document:        exported_code_count      redemption_count      total_codes_count  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CouponSearchResult}
     */
    postSitesByIDCouponSearch(body, siteId) {
      return this.postSitesByIDCouponSearchWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add or delete (modify) multiple codes to/from the supplied coupon.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    postSitesByIDCouponsByIDMultipleCodesWithHttpInfo(siteId, couponId, opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      let queryParams = {
        'delete': opts['_delete']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}/multiple_codes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add or delete (modify) multiple codes to/from the supplied coupon.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    postSitesByIDCouponsByIDMultipleCodes(siteId, couponId, opts) {
      return this.postSitesByIDCouponsByIDMultipleCodesWithHttpInfo(siteId, couponId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for customer groups.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String  type - String Enum value[system, dynamic, static]     The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerGroupSearchResult} and HTTP response
     */
    postSitesByIDCustomerGroupSearchWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomerGroupSearchResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/customer_group_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for customer groups.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String  type - String Enum value[system, dynamic, static]     The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerGroupSearchResult}
     */
    postSitesByIDCustomerGroupSearch(body, siteId) {
      return this.postSitesByIDCustomerGroupSearchWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for customer group members. For dynamic customer groups and the system groups \&quot;Everyone\&quot; and \&quot;Unregistered\&quot; no result is returned (Status Code: 204 - No Content).   The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:         login - String       active - Boolean    Customer Profile:         customer_no - String       first_name - String       last_name - String       email - String       zip - String     Only attributes in the same bucket can be joined using a disjunction (OR).  For instance, when joining login and customer_no above, only a conjunction is allowed (AND), whereas customer_no  and email can be joined using a disjunction because they are in the same bucket.  If an attribute  is used in a disjunction (OR) that violates this rule, an exception will be thrown.   The output of the query can also be sorted. These are the list of sortable attributes:    customer_no - String  login - String     If the Business manager customer search is configured to use the new Search Service, the following differences apply:        all attributes can be used for sorting (except for &#x27;active&#x27;)      searching for &#x27;zip&#x27; will only search in the customers default address      logical operators can be used without limits (but may result in degraded performance, depending on how they are combined)      new assignments might not be found immediately via the search service, and removed assignments      might also not be in effect immediately (there is a slight delay in updating the index)  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerGroupMemberSearchResult} and HTTP response
     */
    postSitesByIDCustomerGroupsByIDMemberSearchWithHttpInfo(body, siteId, id) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomerGroupMemberSearchResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}/member_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for customer group members. For dynamic customer groups and the system groups \&quot;Everyone\&quot; and \&quot;Unregistered\&quot; no result is returned (Status Code: 204 - No Content).   The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:         login - String       active - Boolean    Customer Profile:         customer_no - String       first_name - String       last_name - String       email - String       zip - String     Only attributes in the same bucket can be joined using a disjunction (OR).  For instance, when joining login and customer_no above, only a conjunction is allowed (AND), whereas customer_no  and email can be joined using a disjunction because they are in the same bucket.  If an attribute  is used in a disjunction (OR) that violates this rule, an exception will be thrown.   The output of the query can also be sorted. These are the list of sortable attributes:    customer_no - String  login - String     If the Business manager customer search is configured to use the new Search Service, the following differences apply:        all attributes can be used for sorting (except for &#x27;active&#x27;)      searching for &#x27;zip&#x27; will only search in the customers default address      logical operators can be used without limits (but may result in degraded performance, depending on how they are combined)      new assignments might not be found immediately via the search service, and removed assignments      might also not be in effect immediately (there is a slight delay in updating the index)  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerGroupMemberSearchResult}
     */
    postSitesByIDCustomerGroupsByIDMemberSearch(body, siteId, id) {
      return this.postSitesByIDCustomerGroupsByIDMemberSearchWithHttpInfo(body, siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for gift certificates.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    merchant_id - String  masked_gift_certificate_code* - String  order_no - String  sender_name - String  recipient_name - String  recipient_email - String  status - String  enabled - Boolean  message - String  description - String  creation_date - Date  currency_mnemonic* - String     * masked_gift_certificate_code, also known as just code, can only be used in a term query.  If a  four-character code is supplied, it is assumed that the search is on the unmasked portion of the code, otherwise  the full code must be matched.  Text queries are not allowed.   * currency_mnemonic can only be joined with other attributes using a conjunction (AND).   Note that only searchable attributes can be used in sorting.  The code attribute cannot be used for sorting.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/GiftCertificateSearchResult} and HTTP response
     */
    postSitesByIDGiftCertificateSearchWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = GiftCertificateSearchResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/gift_certificate_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for gift certificates.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    merchant_id - String  masked_gift_certificate_code* - String  order_no - String  sender_name - String  recipient_name - String  recipient_email - String  status - String  enabled - Boolean  message - String  description - String  creation_date - Date  currency_mnemonic* - String     * masked_gift_certificate_code, also known as just code, can only be used in a term query.  If a  four-character code is supplied, it is assumed that the search is on the unmasked portion of the code, otherwise  the full code must be matched.  Text queries are not allowed.   * currency_mnemonic can only be joined with other attributes using a conjunction (AND).   Note that only searchable attributes can be used in sorting.  The code attribute cannot be used for sorting.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/GiftCertificateSearchResult}
     */
    postSitesByIDGiftCertificateSearch(body, siteId) {
      return this.postSitesByIDGiftCertificateSearchWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a gift certificate using the information provided. If a gift certificate with   the same unique identifier, it will be deleted and a new one will be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/GiftCertificate} and HTTP response
     */
    postSitesByIDGiftCertificatesWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = GiftCertificate;

      return this.apiClient.callApi(
        '/sites/{site_id}/gift_certificates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a gift certificate using the information provided. If a gift certificate with   the same unique identifier, it will be deleted and a new one will be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/GiftCertificate}
     */
    postSitesByIDGiftCertificates(body, siteId) {
      return this.postSitesByIDGiftCertificatesWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for promotion campaign assignments.    The PromotionCampaignAssignment Search document contains a search object that allows filtering on various attributes.    The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:        rank - Integer      start_date - Date      end_date - Date    Campaign:        campaign_id - String    Promotion:        promotion_id - String      description - String      enabled - Boolean    Special handling:        coupon_id - String     Only fields in the same bucket can be joined using a disjunction (OR). For instance, when joining  campaign_id and rank above, only a conjunction is allowed (AND), whereas promotion_id and description can be  joined to each other using an OR because they are in the same bucket.  Special handling fields must always use  conjunctions. If the field is used in a disjunction (OR) that violates this rule, an exception will be thrown.   Expands that can be applied for the search request        promotion      campaign     Note that only searchable attributes (excluding the ones marked with above with an asterisk) can be used in sorting.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/PromotionCampaignAssignmentSearchResult} and HTTP response
     */
    postSitesByIDPromotionCampaignAssignmentSearchWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = PromotionCampaignAssignmentSearchResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/promotion_campaign_assignment_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for promotion campaign assignments.    The PromotionCampaignAssignment Search document contains a search object that allows filtering on various attributes.    The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:        rank - Integer      start_date - Date      end_date - Date    Campaign:        campaign_id - String    Promotion:        promotion_id - String      description - String      enabled - Boolean    Special handling:        coupon_id - String     Only fields in the same bucket can be joined using a disjunction (OR). For instance, when joining  campaign_id and rank above, only a conjunction is allowed (AND), whereas promotion_id and description can be  joined to each other using an OR because they are in the same bucket.  Special handling fields must always use  conjunctions. If the field is used in a disjunction (OR) that violates this rule, an exception will be thrown.   Expands that can be applied for the search request        promotion      campaign     Note that only searchable attributes (excluding the ones marked with above with an asterisk) can be used in sorting.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/PromotionCampaignAssignmentSearchResult}
     */
    postSitesByIDPromotionCampaignAssignmentSearch(body, siteId) {
      return this.postSitesByIDPromotionCampaignAssignmentSearchWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for promotions.    The SearchRequest document contains a search object that allows filtering on various attributes.    The query attribute specifies a complex query that can be used to narrow down the search. These are the searchable  attributes:    id - String  name - String  currency_code - String  exclusivity - String  enabled - Boolean    Note that only searchable attributes can be used in sorting. Additionally, the following attribute can be used to  sort:    promotion_class - String  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/PromotionSearchResult} and HTTP response
     */
    postSitesByIDPromotionSearchWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = PromotionSearchResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/promotion_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for promotions.    The SearchRequest document contains a search object that allows filtering on various attributes.    The query attribute specifies a complex query that can be used to narrow down the search. These are the searchable  attributes:    id - String  name - String  currency_code - String  exclusivity - String  enabled - Boolean    Note that only searchable attributes can be used in sorting. Additionally, the following attribute can be used to  sort:    promotion_class - String  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/PromotionSearchResult}
     */
    postSitesByIDPromotionSearch(body, siteId) {
      return this.postSitesByIDPromotionSearchWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for slotconfiguration campaign assignments.    The SlotConfigCampaignAssignment Search document contains a search object that allows filtering on various attributes.   The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:        rank - Integer      start_date - Date      end_date - Date    Campaign:        campaign_id - String      enabled - Boolean    Slot configuration:        slot_configuration_id - String      description - String     Only attributes in the same bucket can be joined using a disjunction (OR).  For instance, when joining rank and description above, only a conjunction is allowed (AND), whereas slot_configuration_id  and description can be joined using a disjunction because they are in the same bucket.  If an attribute  is used in a disjunction (OR) that violates this rule, an exception will be thrown.   Expands that can be applied for the search request        campaign      slotConfiguration      Note that only searchable attributes (excluding the ones marked with above with an asterisk) can be used in sorting.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SlotConfigurationCampaignAssignmentSearchResult} and HTTP response
     */
    postSitesByIDSlotConfigurationCampaignAssignmentSearchWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = SlotConfigurationCampaignAssignmentSearchResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/slot_configuration_campaign_assignment_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for slotconfiguration campaign assignments.    The SlotConfigCampaignAssignment Search document contains a search object that allows filtering on various attributes.   The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:        rank - Integer      start_date - Date      end_date - Date    Campaign:        campaign_id - String      enabled - Boolean    Slot configuration:        slot_configuration_id - String      description - String     Only attributes in the same bucket can be joined using a disjunction (OR).  For instance, when joining rank and description above, only a conjunction is allowed (AND), whereas slot_configuration_id  and description can be joined using a disjunction because they are in the same bucket.  If an attribute  is used in a disjunction (OR) that violates this rule, an exception will be thrown.   Expands that can be applied for the search request        campaign      slotConfiguration      Note that only searchable attributes (excluding the ones marked with above with an asterisk) can be used in sorting.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SlotConfigurationCampaignAssignmentSearchResult}
     */
    postSitesByIDSlotConfigurationCampaignAssignmentSearch(body, siteId) {
      return this.postSitesByIDSlotConfigurationCampaignAssignmentSearchWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for slot configurations.   The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:       configuration_id - String     default - Boolean     description - String     enabled - Boolean    Slot:       context - String     slot_id - String     Only fields in the same bucket can be joined using a disjunction (OR). For instance, when joining context and  description above, only a conjunction is allowed (AND), whereas context and slot_id can be joined to each other  using a disjunction because they are in the same bucket.  If the field is used in a disjunction (OR) that  violates this rule, an exception will be thrown.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SlotConfigurationSearchResult} and HTTP response
     */
    postSitesByIDSlotConfigurationSearchWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = SlotConfigurationSearchResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/slot_configuration_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for slot configurations.   The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:       configuration_id - String     default - Boolean     description - String     enabled - Boolean    Slot:       context - String     slot_id - String     Only fields in the same bucket can be joined using a disjunction (OR). For instance, when joining context and  description above, only a conjunction is allowed (AND), whereas context and slot_id can be joined to each other  using a disjunction because they are in the same bucket.  If the field is used in a disjunction (OR) that  violates this rule, an exception will be thrown.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SlotConfigurationSearchResult}
     */
    postSitesByIDSlotConfigurationSearch(body, siteId) {
      return this.postSitesByIDSlotConfigurationSearchWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for slots.    The query attribute specifies a complex query that can be used to narrow down the search. The set of fields that  are available to search are:    slot_id - String  description - String  context_type - String      Note that only searchable attributes can be used in sorting. \&quot;context_type\&quot; value is restricted to Global/Folder/Category.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SlotSearchResult} and HTTP response
     */
    postSitesByIDSlotSearchWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = SlotSearchResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/slot_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for slots.    The query attribute specifies a complex query that can be used to narrow down the search. The set of fields that  are available to search are:    slot_id - String  description - String  context_type - String      Note that only searchable attributes can be used in sorting. \&quot;context_type\&quot; value is restricted to Global/Folder/Category.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SlotSearchResult}
     */
    postSitesByIDSlotSearch(body, siteId) {
      return this.postSitesByIDSlotSearchWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for product sorting rules.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String  creation_date - date of creation     The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  creation_date - date of creation     This resource does not support expand options.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SortingRuleSearchResult} and HTTP response
     */
    postSitesByIDSortingRuleSearchWithHttpInfo(body, siteId, opts) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
        'rule_context': opts['ruleContext']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = SortingRuleSearchResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/sorting_rule_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for product sorting rules.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String  creation_date - date of creation     The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  creation_date - date of creation     This resource does not support expand options.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SortingRuleSearchResult}
     */
    postSitesByIDSortingRuleSearch(body, siteId, opts) {
      return this.postSitesByIDSortingRuleSearchWithHttpInfo(body, siteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for source code groups.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String  source_code* - String   start_time - DateTime  end_time - DateTime  creation_date - DateTime  enabled - Boolean  active* - Boolean      * - These fields can only be used in Queries as conjunctions (using AND).  If the field is used in a disjunction  (OR) an exception will be thrown.    The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  enabled - Boolean  creation_date - DateTime      Expands that can be applied for the search request    specifications - String  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SourceCodeGroupSearchResult} and HTTP response
     */
    postSitesByIDSourceCodeGroupSearchWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = SourceCodeGroupSearchResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/source_code_group_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for source code groups.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  description - String  source_code* - String   start_time - DateTime  end_time - DateTime  creation_date - DateTime  enabled - Boolean  active* - Boolean      * - These fields can only be used in Queries as conjunctions (using AND).  If the field is used in a disjunction  (OR) an exception will be thrown.    The output of the query can also be sorted. These are the list of sortable attributes:    id - String  description - String  enabled - Boolean  creation_date - DateTime      Expands that can be applied for the search request    specifications - String  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SourceCodeGroupSearchResult}
     */
    postSitesByIDSourceCodeGroupSearch(body, siteId) {
      return this.postSitesByIDSourceCodeGroupSearchWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for stores.    The query attribute specifies a complex query that can be used to narrow down the search. This is the list  of searchable attributes:    address1 - String  address2 - String  city - String  country_code - String  email - String  fax - String  id - String  inventory_id - String  latitude - double  longitude - double  name - String  phone - String  postal_code - String  state_code - String  store_hours - String  store_events - String  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/StoreSearchResult} and HTTP response
     */
    postSitesByIDStoreSearchWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = StoreSearchResult;

      return this.apiClient.callApi(
        '/sites/{site_id}/store_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for stores.    The query attribute specifies a complex query that can be used to narrow down the search. This is the list  of searchable attributes:    address1 - String  address2 - String  city - String  country_code - String  email - String  fax - String  id - String  inventory_id - String  latitude - double  longitude - double  name - String  phone - String  postal_code - String  state_code - String  store_hours - String  store_events - String  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/StoreSearchResult}
     */
    postSitesByIDStoreSearch(body, siteId) {
      return this.postSitesByIDStoreSearchWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates an A/B Test using the information provided. If an A/B Test with the same unique identifier exists, it will be deleted and a new one will be created unless the header x-dw-validate-existing&#x3D;true is passed in with the request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AbTest} and HTTP response
     */
    putSitesByIDAbTestsByIDWithHttpInfo(siteId, id, opts) {
      let postBody = opts['body'];

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AbTest;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates an A/B Test using the information provided. If an A/B Test with the same unique identifier exists, it will be deleted and a new one will be created unless the header x-dw-validate-existing&#x3D;true is passed in with the request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AbTest}
     */
    putSitesByIDAbTestsByID(siteId, id, opts) {
      return this.putSitesByIDAbTestsByIDWithHttpInfo(siteId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates an A/B Test segment using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AbTestSegment} and HTTP response
     */
    putSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo(siteId, id, segmentId, opts) {
      let postBody = opts['body'];

      let pathParams = {
        'site_id': siteId,
        'id': id,
        'segment_id': segmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AbTestSegment;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{id}/segments/{segment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates an A/B Test segment using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AbTestSegment}
     */
    putSitesByIDAbTestsByIDSegmentsByID(siteId, id, segmentId, opts) {
      return this.putSitesByIDAbTestsByIDSegmentsByIDWithHttpInfo(siteId, id, segmentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a single promotion to a given abTest.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDWithHttpInfo(siteId, abTestId, segmentId, promotionId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'ab_test_id': abTestId,
        'segment_id': segmentId,
        'promotion_id': promotionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/promotions/{promotion_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to bind a single promotion to a given abTest.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDAbTestsByIDSegmentsByIDPromotionsByID(siteId, abTestId, segmentId, promotionId) {
      return this.putSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDWithHttpInfo(siteId, abTestId, segmentId, promotionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a slot configuration to a given abTest.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDWithHttpInfo(abTestId, segmentId, siteId, slotId, slotConfigId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'ab_test_id': abTestId,
        'segment_id': segmentId,
        'site_id': siteId,
        'slot_id': slotId,
        'slot_config_id': slotConfigId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/slot_configurations/{slot_id}/{slot_config_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to bind a slot configuration to a given abTest.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID(abTestId, segmentId, siteId, slotId, slotConfigId, opts) {
      return this.putSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDWithHttpInfo(abTestId, segmentId, siteId, slotId, slotConfigId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a single sorting rule to a given abTest.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDWithHttpInfo(siteId, abTestId, segmentId, sortingRuleId, categoryId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'ab_test_id': abTestId,
        'segment_id': segmentId,
        'sorting_rule_id': sortingRuleId,
        'category_id': categoryId
      };
      let queryParams = {
        'rule_context': opts['ruleContext']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/sorting_rules/{sorting_rule_id}/{category_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to bind a single sorting rule to a given abTest.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID(siteId, abTestId, segmentId, sortingRuleId, categoryId, opts) {
      return this.putSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDWithHttpInfo(siteId, abTestId, segmentId, sortingRuleId, categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a campaign using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Campaign} and HTTP response
     */
    putSitesByIDCampaignsByIDWithHttpInfo(body, siteId, campaignId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Campaign;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a campaign using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Campaign}
     */
    putSitesByIDCampaignsByID(body, siteId, campaignId) {
      return this.putSitesByIDCampaignsByIDWithHttpInfo(body, siteId, campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a single coupon to a given campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDCampaignsByIDCouponsByIDWithHttpInfo(siteId, campaignId, couponId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'coupon_id': couponId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/coupons/{coupon_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to bind a single coupon to a given campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDCampaignsByIDCouponsByID(siteId, campaignId, couponId) {
      return this.putSitesByIDCampaignsByIDCouponsByIDWithHttpInfo(siteId, campaignId, couponId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a single customer group to a given campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDCampaignsByIDCustomerGroupsByIDWithHttpInfo(siteId, campaignId, customerGroupId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'customer_group_id': customerGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/customer_groups/{customer_group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to bind a single customer group to a given campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDCampaignsByIDCustomerGroupsByID(siteId, campaignId, customerGroupId) {
      return this.putSitesByIDCampaignsByIDCustomerGroupsByIDWithHttpInfo(siteId, campaignId, customerGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a single promotion to a given campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDCampaignsByIDPromotionsByIDWithHttpInfo(siteId, campaignId, promotionId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'promotion_id': promotionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/promotions/{promotion_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to bind a single promotion to a given campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDCampaignsByIDPromotionsByID(siteId, campaignId, promotionId) {
      return this.putSitesByIDCampaignsByIDPromotionsByIDWithHttpInfo(siteId, campaignId, promotionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a slot configuration to a given campaign.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDCampaignsByIDSlotConfigurationsByIDByIDWithHttpInfo(campaignId, siteId, slotId, slotConfigId, opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'campaign_id': campaignId,
        'site_id': siteId,
        'slot_id': slotId,
        'slot_config_id': slotConfigId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/slot_configurations/{slot_id}/{slot_config_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to bind a slot configuration to a given campaign.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDCampaignsByIDSlotConfigurationsByIDByID(campaignId, siteId, slotId, slotConfigId, opts) {
      return this.putSitesByIDCampaignsByIDSlotConfigurationsByIDByIDWithHttpInfo(campaignId, siteId, slotId, slotConfigId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a single sorting rule to a given campaign.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDCampaignsByIDSortingRulesByIDByIDWithHttpInfo(siteId, campaignId, sortingRuleId, categoryId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'sorting_rule_id': sortingRuleId,
        'category_id': categoryId
      };
      let queryParams = {
        'rule_context': opts['ruleContext']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/sorting_rules/{sorting_rule_id}/{category_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to bind a single sorting rule to a given campaign.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDCampaignsByIDSortingRulesByIDByID(siteId, campaignId, sortingRuleId, categoryId, opts) {
      return this.putSitesByIDCampaignsByIDSortingRulesByIDByIDWithHttpInfo(siteId, campaignId, sortingRuleId, categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to bind a single source code group to a given campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDCampaignsByIDSourceCodeGroupsByIDWithHttpInfo(siteId, campaignId, sourceCodeGroupId) {
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'campaign_id': campaignId,
        'source_code_group_id': sourceCodeGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/campaigns/{campaign_id}/source_code_groups/{source_code_group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to bind a single source code group to a given campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDCampaignsByIDSourceCodeGroupsByID(siteId, campaignId, sourceCodeGroupId) {
      return this.putSitesByIDCampaignsByIDSourceCodeGroupsByIDWithHttpInfo(siteId, campaignId, sourceCodeGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Overwrite cartridge path.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CartridgePathApiResponse} and HTTP response
     */
    putSitesByIDCartridgesWithHttpInfo(body, siteId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CartridgePathApiResponse;

      return this.apiClient.callApi(
        '/sites/{site_id}/cartridges', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Overwrite cartridge path.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CartridgePathApiResponse}
     */
    putSitesByIDCartridges(body, siteId) {
      return this.putSitesByIDCartridgesWithHttpInfo(body, siteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a coupon using the information provided. If a coupon exists with the same unique identifier,  the coupon is replaced completely.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Coupon} and HTTP response
     */
    putSitesByIDCouponsByIDWithHttpInfo(body, siteId, couponId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'coupon_id': couponId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Coupon;

      return this.apiClient.callApi(
        '/sites/{site_id}/coupons/{coupon_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a coupon using the information provided. If a coupon exists with the same unique identifier,  the coupon is replaced completely.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Coupon}
     */
    putSitesByIDCouponsByID(body, siteId, couponId) {
      return this.putSitesByIDCouponsByIDWithHttpInfo(body, siteId, couponId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a site specific Custom Object from request body for the specified site. Note that an existing Custom Object for the site, with the same key, will be overwritten by this action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomObject} and HTTP response
     */
    putSitesByIDCustomObjectsByIDByIDWithHttpInfo(siteId, objectType, key, opts) {
      let postBody = opts['body'];

      let pathParams = {
        'site_id': siteId,
        'object_type': objectType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomObject;

      return this.apiClient.callApi(
        '/sites/{site_id}/custom_objects/{object_type}/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a site specific Custom Object from request body for the specified site. Note that an existing Custom Object for the site, with the same key, will be overwritten by this action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomObject}
     */
    putSitesByIDCustomObjectsByIDByID(siteId, objectType, key, opts) {
      return this.putSitesByIDCustomObjectsByIDByIDWithHttpInfo(siteId, objectType, key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a customer group using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerGroup} and HTTP response
     */
    putSitesByIDCustomerGroupsByIDWithHttpInfo(body, siteId, id) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomerGroup;

      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a customer group using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerGroup}
     */
    putSitesByIDCustomerGroupsByID(body, siteId, id) {
      return this.putSitesByIDCustomerGroupsByIDWithHttpInfo(body, siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to add customer to (static) customer group.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerGroupMember} and HTTP response
     */
    putSitesByIDCustomerGroupsByIDMembersByIDWithHttpInfo(siteId, id, customerNo, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'site_id': siteId,
        'id': id,
        'customer_no': customerNo
      };
      let queryParams = {
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomerGroupMember;

      return this.apiClient.callApi(
        '/sites/{site_id}/customer_groups/{id}/members/{customer_no}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to add customer to (static) customer group.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerGroupMember}
     */
    putSitesByIDCustomerGroupsByIDMembersByID(siteId, id, customerNo, opts) {
      return this.putSitesByIDCustomerGroupsByIDMembersByIDWithHttpInfo(siteId, id, customerNo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the order confirmation status.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDOrdersByIDConfirmationStatusWithHttpInfo(body, siteId, orderNo) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'order_no': orderNo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/confirmation_status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the order confirmation status.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDOrdersByIDConfirmationStatus(body, siteId, orderNo) {
      return this.putSitesByIDOrdersByIDConfirmationStatusWithHttpInfo(body, siteId, orderNo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the order export status. Setting the status to EXPORTED will also trigger the finalization of on-order inventory transactions for this order, meaning that all inventory transactions with type on-order will be moved into final inventory transactions. This is only relevant when on-order inventory is turned on for the inventory list ordered products are in.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDOrdersByIDExportStatusWithHttpInfo(body, siteId, orderNo) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'order_no': orderNo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/export_status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the order export status. Setting the status to EXPORTED will also trigger the finalization of on-order inventory transactions for this order, meaning that all inventory transactions with type on-order will be moved into final inventory transactions. This is only relevant when on-order inventory is turned on for the inventory list ordered products are in.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDOrdersByIDExportStatus(body, siteId, orderNo) {
      return this.putSitesByIDOrdersByIDExportStatusWithHttpInfo(body, siteId, orderNo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the order external status.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDOrdersByIDExternalStatusWithHttpInfo(body, siteId, orderNo) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'order_no': orderNo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/external_status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the order external status.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDOrdersByIDExternalStatus(body, siteId, orderNo) {
      return this.putSitesByIDOrdersByIDExternalStatusWithHttpInfo(body, siteId, orderNo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the order payment status.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDOrdersByIDPaymentStatusWithHttpInfo(body, siteId, orderNo) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'order_no': orderNo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/payment_status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the order payment status.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDOrdersByIDPaymentStatus(body, siteId, orderNo) {
      return this.putSitesByIDOrdersByIDPaymentStatusWithHttpInfo(body, siteId, orderNo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates (create or replace) the order shipment address.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDOrdersByIDShipmentsByIDShippingAddressWithHttpInfo(body, siteId, orderNo, shipmentId) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'order_no': orderNo,
        'shipment_id': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/shipments/{shipment_id}/shipping_address', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates (create or replace) the order shipment address.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDOrdersByIDShipmentsByIDShippingAddress(body, siteId, orderNo, shipmentId) {
      return this.putSitesByIDOrdersByIDShipmentsByIDShippingAddressWithHttpInfo(body, siteId, orderNo, shipmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the order shipping status.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDOrdersByIDShippingStatusWithHttpInfo(body, siteId, orderNo) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'order_no': orderNo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/shipping_status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the order shipping status.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDOrdersByIDShippingStatus(body, siteId, orderNo) {
      return this.putSitesByIDOrdersByIDShippingStatusWithHttpInfo(body, siteId, orderNo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the order status by using the corresponding methods (fail, undoFail, place, cancel and undoCancel) from the dw.order.OrderMgr. Orders which are not in status CREATED or FAILED can not be set back.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putSitesByIDOrdersByIDStatusWithHttpInfo(body, siteId, orderNo) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'order_no': orderNo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/orders/{order_no}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the order status by using the corresponding methods (fail, undoFail, place, cancel and undoCancel) from the dw.order.OrderMgr. Orders which are not in status CREATED or FAILED can not be set back.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putSitesByIDOrdersByIDStatus(body, siteId, orderNo) {
      return this.putSitesByIDOrdersByIDStatusWithHttpInfo(body, siteId, orderNo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a promotion using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Promotion} and HTTP response
     */
    putSitesByIDPromotionsByIDWithHttpInfo(body, siteId, id) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Promotion;

      return this.apiClient.callApi(
        '/sites/{site_id}/promotions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a promotion using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Promotion}
     */
    putSitesByIDPromotionsByID(body, siteId, id) {
      return this.putSitesByIDPromotionsByIDWithHttpInfo(body, siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new configuration for an existing slot. If a slot configuration  exists with the specified configuration_id, slot_id, and context, the existing  slot configuration is overwritten.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SlotConfiguration} and HTTP response
     */
    putSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo(body, siteId, slotId, configurationId, opts) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'slot_id': slotId,
        'configuration_id': configurationId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = SlotConfiguration;

      return this.apiClient.callApi(
        '/sites/{site_id}/slots/{slot_id}/slot_configurations/{configuration_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new configuration for an existing slot. If a slot configuration  exists with the specified configuration_id, slot_id, and context, the existing  slot configuration is overwritten.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SlotConfiguration}
     */
    putSitesByIDSlotsByIDSlotConfigurationsByID(body, siteId, slotId, configurationId, opts) {
      return this.putSitesByIDSlotsByIDSlotConfigurationsByIDWithHttpInfo(body, siteId, slotId, configurationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a source code group using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SourceCodeGroup} and HTTP response
     */
    putSitesByIDSourceCodeGroupsByIDWithHttpInfo(body, siteId, id) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = SourceCodeGroup;

      return this.apiClient.callApi(
        '/sites/{site_id}/source_code_groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a source code group using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SourceCodeGroup}
     */
    putSitesByIDSourceCodeGroupsByID(body, siteId, id) {
      return this.putSitesByIDSourceCodeGroupsByIDWithHttpInfo(body, siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a store using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Store} and HTTP response
     */
    putSitesByIDStoresByIDWithHttpInfo(body, siteId, id) {
      let postBody = body;

      let pathParams = {
        'site_id': siteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Store;

      return this.apiClient.callApi(
        '/sites/{site_id}/stores/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a store using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Store}
     */
    putSitesByIDStoresByID(body, siteId, id) {
      return this.putSitesByIDStoresByIDWithHttpInfo(body, siteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
