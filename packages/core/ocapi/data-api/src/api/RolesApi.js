/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Role', 'model/RolePermissions', 'model/Roles', 'model/SearchRequest', 'model/User', 'model/UserSearchResult', 'model/Users'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Role'), require('../model/RolePermissions'), require('../model/Roles'), require('../model/SearchRequest'), require('../model/User'), require('../model/UserSearchResult'), require('../model/Users'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.RolesApi = factory(root.DataApi.ApiClient, root.DataApi.Role, root.DataApi.RolePermissions, root.DataApi.Roles, root.DataApi.SearchRequest, root.DataApi.User, root.DataApi.UserSearchResult, root.DataApi.Users);
  }
}(this, function(ApiClient, Role, RolePermissions, Roles, SearchRequest, User, UserSearchResult, Users) {
  'use strict';

  /**
   * Roles service.
   * @module api/RolesApi
   * @version 20.8
   */

  /**
   * Constructs a new RolesApi. 
   * @alias module:api/RolesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Action to delete an access role.
     * @param {String} id The id of the access role to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteRolesByIDWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRolesByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/roles/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to delete an access role.
     * @param {String} id The id of the access role to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteRolesByID = function(id) {
      return this.deleteRolesByIDWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unassign a user to an access role
     * @param {String} id ID of the access role.
     * @param {String} login Login of the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteRolesByIDUsersByIDWithHttpInfo = function(id, login) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRolesByIDUsersByID");
      }
      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling deleteRolesByIDUsersByID");
      }

      var pathParams = {
        'id': id,
        'login': login
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/roles/{id}/users/{login}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to unassign a user to an access role
     * @param {String} id ID of the access role.
     * @param {String} login Login of the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteRolesByIDUsersByID = function(id, login) {
      return this.deleteRolesByIDUsersByIDWithHttpInfo(id, login)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the access roles with no filtering.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Optional start index for retrieving the items from a given index (default 0).
     * @param {Number} opts.count Optional count for retrieving only a subset of the items (default is 25).
     * @param {String} opts.select The property selector.
     * @param {Array.<String>} opts.expand List of expansions.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Roles} and HTTP response
     */
    this.getRolesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Roles;
      return this.apiClient.callApi(
        '/roles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the access roles with no filtering.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Optional start index for retrieving the items from a given index (default 0).
     * @param {Number} opts.count Optional count for retrieving only a subset of the items (default is 25).
     * @param {String} opts.select The property selector.
     * @param {Array.<String>} opts.expand List of expansions.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Roles}
     */
    this.getRoles = function(opts) {
      return this.getRolesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get a single access role.
     * @param {String} id The id of the requested access role.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Role} and HTTP response
     */
    this.getRolesByIDWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRolesByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Role;
      return this.apiClient.callApi(
        '/roles/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get a single access role.
     * @param {String} id The id of the requested access role.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Role}
     */
    this.getRolesByID = function(id, opts) {
      return this.getRolesByIDWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a list of permissions assigned to the given role.
     * @param {String} id The id of the requested access role.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RolePermissions} and HTTP response
     */
    this.getRolesByIDPermissionsWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRolesByIDPermissions");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = RolePermissions;
      return this.apiClient.callApi(
        '/roles/{id}/permissions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a list of permissions assigned to the given role.
     * @param {String} id The id of the requested access role.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RolePermissions}
     */
    this.getRolesByIDPermissions = function(id) {
      return this.getRolesByIDPermissionsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the users assigned to the specified access role.
     * @param {String} id ID of the access role.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Users} and HTTP response
     */
    this.getRolesByIDUsersWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRolesByIDUsers");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Users;
      return this.apiClient.callApi(
        '/roles/{id}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the users assigned to the specified access role.
     * @param {String} id ID of the access role.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Users}
     */
    this.getRolesByIDUsers = function(id, opts) {
      return this.getRolesByIDUsersWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for users of the specified access role.  The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    login - String  email - String  first_name - String  last_name - String  external_id - String  last_login_date - Date  is_locked - Boolean  is_disabled - Boolean     The output of the query can also be sorted. These are the list of sortable attributes:    login - String  email - String  first_name - String  last_name - String  external_id - String  last_login_date - Date  
     * @param {String} id 
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserSearchResult} and HTTP response
     */
    this.postRolesByIDUserSearchWithHttpInfo = function(id, body) {
      var postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postRolesByIDUserSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRolesByIDUserSearch");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = UserSearchResult;
      return this.apiClient.callApi(
        '/roles/{id}/user_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for users of the specified access role.  The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    login - String  email - String  first_name - String  last_name - String  external_id - String  last_login_date - Date  is_locked - Boolean  is_disabled - Boolean     The output of the query can also be sorted. These are the list of sortable attributes:    login - String  email - String  first_name - String  last_name - String  external_id - String  last_login_date - Date  
     * @param {String} id 
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserSearchResult}
     */
    this.postRolesByIDUserSearch = function(id, body) {
      return this.postRolesByIDUserSearchWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to create an access role.
     * @param {String} id The id of the access role to create.
     * @param {module:model/Role} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Role} and HTTP response
     */
    this.putRolesByIDWithHttpInfo = function(id, body) {
      var postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putRolesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putRolesByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Role;
      return this.apiClient.callApi(
        '/roles/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to create an access role.
     * @param {String} id The id of the access role to create.
     * @param {module:model/Role} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Role}
     */
    this.putRolesByID = function(id, body) {
      return this.putRolesByIDWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Assigns permissions to the given role. This will replace the current permission assignments. For the 'Administrator'  role only adjustments for custom module permissions will be processed but other given permissions will be ignored.
     * @param {String} id The id of the access role for which the permissions will be set.
     * @param {module:model/RolePermissions} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RolePermissions} and HTTP response
     */
    this.putRolesByIDPermissionsWithHttpInfo = function(id, body) {
      var postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putRolesByIDPermissions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putRolesByIDPermissions");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = RolePermissions;
      return this.apiClient.callApi(
        '/roles/{id}/permissions', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Assigns permissions to the given role. This will replace the current permission assignments. For the 'Administrator'  role only adjustments for custom module permissions will be processed but other given permissions will be ignored.
     * @param {String} id The id of the access role for which the permissions will be set.
     * @param {module:model/RolePermissions} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RolePermissions}
     */
    this.putRolesByIDPermissions = function(id, body) {
      return this.putRolesByIDPermissionsWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to assign a user to an access role
     * @param {String} id ID of the access role.
     * @param {String} login Login of the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    this.putRolesByIDUsersByIDWithHttpInfo = function(id, login) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putRolesByIDUsersByID");
      }
      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling putRolesByIDUsersByID");
      }

      var pathParams = {
        'id': id,
        'login': login
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = User;
      return this.apiClient.callApi(
        '/roles/{id}/users/{login}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to assign a user to an access role
     * @param {String} id ID of the access role.
     * @param {String} login Login of the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    this.putRolesByIDUsersByID = function(id, login) {
      return this.putRolesByIDUsersByIDWithHttpInfo(id, login)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
