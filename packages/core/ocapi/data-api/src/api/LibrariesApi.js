/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ContentAsset', 'model/ContentAssetResult', 'model/ContentFolder', 'model/ContentFolderAssignment', 'model/ContentFolderResult', 'model/ContentSubFolderResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ContentAsset'), require('../model/ContentAssetResult'), require('../model/ContentFolder'), require('../model/ContentFolderAssignment'), require('../model/ContentFolderResult'), require('../model/ContentSubFolderResult'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.LibrariesApi = factory(root.DataApi.ApiClient, root.DataApi.ContentAsset, root.DataApi.ContentAssetResult, root.DataApi.ContentFolder, root.DataApi.ContentFolderAssignment, root.DataApi.ContentFolderResult, root.DataApi.ContentSubFolderResult);
  }
}(this, function(ApiClient, ContentAsset, ContentAssetResult, ContentFolder, ContentFolderAssignment, ContentFolderResult, ContentSubFolderResult) {
  'use strict';

  /**
   * Libraries service.
   * @module api/LibrariesApi
   * @version 20.8
   */

  /**
   * Constructs a new LibrariesApi. 
   * @alias module:api/LibrariesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Deletes the content asset with the specified ID from the specified library. If the content asset is not found, the server returns a 404 (NotFoundException) fault. If the content asset is locked by another user, the server returns a 409 (ResourceLockedException) fault. If the connection is not secure, the server returns a 403 (SecureCommunicationRequiredException) fault.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId the ID of the content asset to remove.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteLibrariesByIDContentByIDWithHttpInfo = function(libraryId, contentId) {
      var postBody = null;
      // verify the required parameter 'libraryId' is set
      if (libraryId === undefined || libraryId === null) {
        throw new Error("Missing the required parameter 'libraryId' when calling deleteLibrariesByIDContentByID");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling deleteLibrariesByIDContentByID");
      }

      var pathParams = {
        'library_id': libraryId,
        'content_id': contentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/libraries/{library_id}/content/{content_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the content asset with the specified ID from the specified library. If the content asset is not found, the server returns a 404 (NotFoundException) fault. If the content asset is locked by another user, the server returns a 409 (ResourceLockedException) fault. If the connection is not secure, the server returns a 403 (SecureCommunicationRequiredException) fault.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId the ID of the content asset to remove.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteLibrariesByIDContentByID = function(libraryId, contentId) {
      return this.deleteLibrariesByIDContentByIDWithHttpInfo(libraryId, contentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to unassign a content asset from the specified library folder.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId the ID of the content asset to retrieve.
     * @param {String} folderId ID of a target folder.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteLibrariesByIDFolderAssignmentsByIDByIDWithHttpInfo = function(libraryId, contentId, folderId) {
      var postBody = null;
      // verify the required parameter 'libraryId' is set
      if (libraryId === undefined || libraryId === null) {
        throw new Error("Missing the required parameter 'libraryId' when calling deleteLibrariesByIDFolderAssignmentsByIDByID");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling deleteLibrariesByIDFolderAssignmentsByIDByID");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling deleteLibrariesByIDFolderAssignmentsByIDByID");
      }

      var pathParams = {
        'library_id': libraryId,
        'content_id': contentId,
        'folder_id': folderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/libraries/{library_id}/folder_assignments/{content_id}/{folder_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to unassign a content asset from the specified library folder.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId the ID of the content asset to retrieve.
     * @param {String} folderId ID of a target folder.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteLibrariesByIDFolderAssignmentsByIDByID = function(libraryId, contentId, folderId) {
      return this.deleteLibrariesByIDFolderAssignmentsByIDByIDWithHttpInfo(libraryId, contentId, folderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete folder
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} folderId ID of a target folder.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteLibrariesByIDFoldersByIDWithHttpInfo = function(libraryId, folderId) {
      var postBody = null;
      // verify the required parameter 'libraryId' is set
      if (libraryId === undefined || libraryId === null) {
        throw new Error("Missing the required parameter 'libraryId' when calling deleteLibrariesByIDFoldersByID");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling deleteLibrariesByIDFoldersByID");
      }

      var pathParams = {
        'library_id': libraryId,
        'folder_id': folderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/libraries/{library_id}/folders/{folder_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete folder
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} folderId ID of a target folder.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteLibrariesByIDFoldersByID = function(libraryId, folderId) {
      return this.deleteLibrariesByIDFoldersByIDWithHttpInfo(libraryId, folderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a content asset using the specified ID. If the content asset cannot be found, the server returns a 404 (ContentNotFoundException) fault. If the connection is not secure, the server returns a 403 (SecureCommunicationRequiredException).
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId the ID of the content asset to retrieve.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentAsset} and HTTP response
     */
    this.getLibrariesByIDContentByIDWithHttpInfo = function(libraryId, contentId) {
      var postBody = null;
      // verify the required parameter 'libraryId' is set
      if (libraryId === undefined || libraryId === null) {
        throw new Error("Missing the required parameter 'libraryId' when calling getLibrariesByIDContentByID");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling getLibrariesByIDContentByID");
      }

      var pathParams = {
        'library_id': libraryId,
        'content_id': contentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ContentAsset;
      return this.apiClient.callApi(
        '/libraries/{library_id}/content/{content_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a content asset using the specified ID. If the content asset cannot be found, the server returns a 404 (ContentNotFoundException) fault. If the connection is not secure, the server returns a 403 (SecureCommunicationRequiredException).
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId the ID of the content asset to retrieve.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentAsset}
     */
    this.getLibrariesByIDContentByID = function(libraryId, contentId) {
      return this.getLibrariesByIDContentByIDWithHttpInfo(libraryId, contentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all assigned folders of a content asset.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId The content id of the assignment.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentFolderResult} and HTTP response
     */
    this.getLibrariesByIDContentByIDFoldersWithHttpInfo = function(libraryId, contentId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'libraryId' is set
      if (libraryId === undefined || libraryId === null) {
        throw new Error("Missing the required parameter 'libraryId' when calling getLibrariesByIDContentByIDFolders");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling getLibrariesByIDContentByIDFolders");
      }

      var pathParams = {
        'library_id': libraryId,
        'content_id': contentId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ContentFolderResult;
      return this.apiClient.callApi(
        '/libraries/{library_id}/content/{content_id}/folders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all assigned folders of a content asset.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId The content id of the assignment.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentFolderResult}
     */
    this.getLibrariesByIDContentByIDFolders = function(libraryId, contentId, opts) {
      return this.getLibrariesByIDContentByIDFoldersWithHttpInfo(libraryId, contentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get a single content to folder assignment
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId the ID of the content asset to retrieve.
     * @param {String} folderId ID of a target folder.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentFolderAssignment} and HTTP response
     */
    this.getLibrariesByIDFolderAssignmentsByIDByIDWithHttpInfo = function(libraryId, contentId, folderId) {
      var postBody = null;
      // verify the required parameter 'libraryId' is set
      if (libraryId === undefined || libraryId === null) {
        throw new Error("Missing the required parameter 'libraryId' when calling getLibrariesByIDFolderAssignmentsByIDByID");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling getLibrariesByIDFolderAssignmentsByIDByID");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling getLibrariesByIDFolderAssignmentsByIDByID");
      }

      var pathParams = {
        'library_id': libraryId,
        'content_id': contentId,
        'folder_id': folderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ContentFolderAssignment;
      return this.apiClient.callApi(
        '/libraries/{library_id}/folder_assignments/{content_id}/{folder_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get a single content to folder assignment
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId the ID of the content asset to retrieve.
     * @param {String} folderId ID of a target folder.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentFolderAssignment}
     */
    this.getLibrariesByIDFolderAssignmentsByIDByID = function(libraryId, contentId, folderId) {
      return this.getLibrariesByIDFolderAssignmentsByIDByIDWithHttpInfo(libraryId, contentId, folderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get folder information.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} folderId ID of a target folder.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentFolder} and HTTP response
     */
    this.getLibrariesByIDFoldersByIDWithHttpInfo = function(libraryId, folderId) {
      var postBody = null;
      // verify the required parameter 'libraryId' is set
      if (libraryId === undefined || libraryId === null) {
        throw new Error("Missing the required parameter 'libraryId' when calling getLibrariesByIDFoldersByID");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling getLibrariesByIDFoldersByID");
      }

      var pathParams = {
        'library_id': libraryId,
        'folder_id': folderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ContentFolder;
      return this.apiClient.callApi(
        '/libraries/{library_id}/folders/{folder_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get folder information.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} folderId ID of a target folder.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentFolder}
     */
    this.getLibrariesByIDFoldersByID = function(libraryId, folderId) {
      return this.getLibrariesByIDFoldersByIDWithHttpInfo(libraryId, folderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all assigned content assets of a folder.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} folderId ID of a target folder.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentAssetResult} and HTTP response
     */
    this.getLibrariesByIDFoldersByIDContentWithHttpInfo = function(libraryId, folderId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'libraryId' is set
      if (libraryId === undefined || libraryId === null) {
        throw new Error("Missing the required parameter 'libraryId' when calling getLibrariesByIDFoldersByIDContent");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling getLibrariesByIDFoldersByIDContent");
      }

      var pathParams = {
        'library_id': libraryId,
        'folder_id': folderId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ContentAssetResult;
      return this.apiClient.callApi(
        '/libraries/{library_id}/folders/{folder_id}/content', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all assigned content assets of a folder.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} folderId ID of a target folder.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentAssetResult}
     */
    this.getLibrariesByIDFoldersByIDContent = function(libraryId, folderId, opts) {
      return this.getLibrariesByIDFoldersByIDContentWithHttpInfo(libraryId, folderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get sub folders information.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} folderId ID of a target folder.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentSubFolderResult} and HTTP response
     */
    this.getLibrariesByIDFoldersByIDSubFoldersWithHttpInfo = function(libraryId, folderId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'libraryId' is set
      if (libraryId === undefined || libraryId === null) {
        throw new Error("Missing the required parameter 'libraryId' when calling getLibrariesByIDFoldersByIDSubFolders");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling getLibrariesByIDFoldersByIDSubFolders");
      }

      var pathParams = {
        'library_id': libraryId,
        'folder_id': folderId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ContentSubFolderResult;
      return this.apiClient.callApi(
        '/libraries/{library_id}/folders/{folder_id}/sub_folders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get sub folders information.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} folderId ID of a target folder.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentSubFolderResult}
     */
    this.getLibrariesByIDFoldersByIDSubFolders = function(libraryId, folderId, opts) {
      return this.getLibrariesByIDFoldersByIDSubFoldersWithHttpInfo(libraryId, folderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a content asset. In the request, the If-Match header is required. The value of the header is an 'ETag' representing the last known base-point information for the content asset. If the header is missing, the server returns a 409 (IfMatchRequiredException) fault. If the header value does not match the server's 'ETag', the server returns a 412 (InvalidIfMatchException) fault. The delta information for the library folder containing the content asset is updated atomically: the information is written completely or not at all. If the content asset is locked, the server returns a 409 (ResourceLockedException) fault.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId the ID of the content asset to retrieve.
     * @param {module:model/ContentAsset} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentAsset} and HTTP response
     */
    this.patchLibrariesByIDContentByIDWithHttpInfo = function(libraryId, contentId, body) {
      var postBody = body;
      // verify the required parameter 'libraryId' is set
      if (libraryId === undefined || libraryId === null) {
        throw new Error("Missing the required parameter 'libraryId' when calling patchLibrariesByIDContentByID");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling patchLibrariesByIDContentByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchLibrariesByIDContentByID");
      }

      var pathParams = {
        'library_id': libraryId,
        'content_id': contentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ContentAsset;
      return this.apiClient.callApi(
        '/libraries/{library_id}/content/{content_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a content asset. In the request, the If-Match header is required. The value of the header is an 'ETag' representing the last known base-point information for the content asset. If the header is missing, the server returns a 409 (IfMatchRequiredException) fault. If the header value does not match the server's 'ETag', the server returns a 412 (InvalidIfMatchException) fault. The delta information for the library folder containing the content asset is updated atomically: the information is written completely or not at all. If the content asset is locked, the server returns a 409 (ResourceLockedException) fault.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId the ID of the content asset to retrieve.
     * @param {module:model/ContentAsset} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentAsset}
     */
    this.patchLibrariesByIDContentByID = function(libraryId, contentId, body) {
      return this.patchLibrariesByIDContentByIDWithHttpInfo(libraryId, contentId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to update a single content to folder assignment. Currently only the position and default attribute can be changed.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId the content id of the assignment
     * @param {String} folderId ID of a target folder.
     * @param {module:model/ContentFolderAssignment} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentFolderAssignment} and HTTP response
     */
    this.patchLibrariesByIDFolderAssignmentsByIDByIDWithHttpInfo = function(libraryId, contentId, folderId, body) {
      var postBody = body;
      // verify the required parameter 'libraryId' is set
      if (libraryId === undefined || libraryId === null) {
        throw new Error("Missing the required parameter 'libraryId' when calling patchLibrariesByIDFolderAssignmentsByIDByID");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling patchLibrariesByIDFolderAssignmentsByIDByID");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling patchLibrariesByIDFolderAssignmentsByIDByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchLibrariesByIDFolderAssignmentsByIDByID");
      }

      var pathParams = {
        'library_id': libraryId,
        'content_id': contentId,
        'folder_id': folderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ContentFolderAssignment;
      return this.apiClient.callApi(
        '/libraries/{library_id}/folder_assignments/{content_id}/{folder_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to update a single content to folder assignment. Currently only the position and default attribute can be changed.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId the content id of the assignment
     * @param {String} folderId ID of a target folder.
     * @param {module:model/ContentFolderAssignment} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentFolderAssignment}
     */
    this.patchLibrariesByIDFolderAssignmentsByIDByID = function(libraryId, contentId, folderId, body) {
      return this.patchLibrariesByIDFolderAssignmentsByIDByIDWithHttpInfo(libraryId, contentId, folderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates an existing folder. In the request, the If-Match header is required. The value of the header is an 'ETag' representing the last known base-point information for the library folder. If the header is missing, the server returns a 409 (IfMatchRequiredException) fault. If the header value does not match the server's 'ETag', the server returns a 412 (InvalidIfMatchException) fault. The delta information for the library folder is updated atomically: the information is written completely or not at all.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} folderId ID of a target folder.
     * @param {module:model/ContentFolder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentFolder} and HTTP response
     */
    this.patchLibrariesByIDFoldersByIDWithHttpInfo = function(libraryId, folderId, body) {
      var postBody = body;
      // verify the required parameter 'libraryId' is set
      if (libraryId === undefined || libraryId === null) {
        throw new Error("Missing the required parameter 'libraryId' when calling patchLibrariesByIDFoldersByID");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling patchLibrariesByIDFoldersByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchLibrariesByIDFoldersByID");
      }

      var pathParams = {
        'library_id': libraryId,
        'folder_id': folderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ContentFolder;
      return this.apiClient.callApi(
        '/libraries/{library_id}/folders/{folder_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates an existing folder. In the request, the If-Match header is required. The value of the header is an 'ETag' representing the last known base-point information for the library folder. If the header is missing, the server returns a 409 (IfMatchRequiredException) fault. If the header value does not match the server's 'ETag', the server returns a 412 (InvalidIfMatchException) fault. The delta information for the library folder is updated atomically: the information is written completely or not at all.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} folderId ID of a target folder.
     * @param {module:model/ContentFolder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentFolder}
     */
    this.patchLibrariesByIDFoldersByID = function(libraryId, folderId, body) {
      return this.patchLibrariesByIDFoldersByIDWithHttpInfo(libraryId, folderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new content asset in the specified library, or overwrites an existing content asset. If a content asset with the specified ID already exists, the server completely overwrites the content asset. Please note: Existing folder assignments are not touched. If the existing content asset is locked, the server returns a 409 (ResourceLockedException) fault. If the connection is not secure, the server returns a 403 (SecureCommunicationRequiredException) fault.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId the ID of the content asset to retrieve.
     * @param {module:model/ContentAsset} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentAsset} and HTTP response
     */
    this.putLibrariesByIDContentByIDWithHttpInfo = function(libraryId, contentId, body) {
      var postBody = body;
      // verify the required parameter 'libraryId' is set
      if (libraryId === undefined || libraryId === null) {
        throw new Error("Missing the required parameter 'libraryId' when calling putLibrariesByIDContentByID");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling putLibrariesByIDContentByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putLibrariesByIDContentByID");
      }

      var pathParams = {
        'library_id': libraryId,
        'content_id': contentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ContentAsset;
      return this.apiClient.callApi(
        '/libraries/{library_id}/content/{content_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new content asset in the specified library, or overwrites an existing content asset. If a content asset with the specified ID already exists, the server completely overwrites the content asset. Please note: Existing folder assignments are not touched. If the existing content asset is locked, the server returns a 409 (ResourceLockedException) fault. If the connection is not secure, the server returns a 403 (SecureCommunicationRequiredException) fault.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} contentId the ID of the content asset to retrieve.
     * @param {module:model/ContentAsset} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentAsset}
     */
    this.putLibrariesByIDContentByID = function(libraryId, contentId, body) {
      return this.putLibrariesByIDContentByIDWithHttpInfo(libraryId, contentId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to assign a content asset to a specified folder.
     * @param {String} libraryId the ID of the shared library or the site-id in case of a private library
     * @param {String} contentId the content id
     * @param {String} folderId the folder id
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentFolderAssignment} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentFolderAssignment} and HTTP response
     */
    this.putLibrariesByIDFolderAssignmentsByIDByIDWithHttpInfo = function(libraryId, contentId, folderId, opts) {
      opts = opts || {};
      var postBody = opts['body'];
      // verify the required parameter 'libraryId' is set
      if (libraryId === undefined || libraryId === null) {
        throw new Error("Missing the required parameter 'libraryId' when calling putLibrariesByIDFolderAssignmentsByIDByID");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling putLibrariesByIDFolderAssignmentsByIDByID");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling putLibrariesByIDFolderAssignmentsByIDByID");
      }

      var pathParams = {
        'library_id': libraryId,
        'content_id': contentId,
        'folder_id': folderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ContentFolderAssignment;
      return this.apiClient.callApi(
        '/libraries/{library_id}/folder_assignments/{content_id}/{folder_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to assign a content asset to a specified folder.
     * @param {String} libraryId the ID of the shared library or the site-id in case of a private library
     * @param {String} contentId the content id
     * @param {String} folderId the folder id
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentFolderAssignment} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentFolderAssignment}
     */
    this.putLibrariesByIDFolderAssignmentsByIDByID = function(libraryId, contentId, folderId, opts) {
      return this.putLibrariesByIDFolderAssignmentsByIDByIDWithHttpInfo(libraryId, contentId, folderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to create a new library folder, or to replace an existing folder. This action completely overwrites existing folders. Please note: Sub folders and assignments to content assets are not touched. This action ignores the folder ID in the input document.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} folderId ID of a target folder.
     * @param {module:model/ContentFolder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentFolder} and HTTP response
     */
    this.putLibrariesByIDFoldersByIDWithHttpInfo = function(libraryId, folderId, body) {
      var postBody = body;
      // verify the required parameter 'libraryId' is set
      if (libraryId === undefined || libraryId === null) {
        throw new Error("Missing the required parameter 'libraryId' when calling putLibrariesByIDFoldersByID");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling putLibrariesByIDFoldersByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putLibrariesByIDFoldersByID");
      }

      var pathParams = {
        'library_id': libraryId,
        'folder_id': folderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ContentFolder;
      return this.apiClient.callApi(
        '/libraries/{library_id}/folders/{folder_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to create a new library folder, or to replace an existing folder. This action completely overwrites existing folders. Please note: Sub folders and assignments to content assets are not touched. This action ignores the folder ID in the input document.
     * @param {String} libraryId ID of the shared library or the site-id in case of a private library.
     * @param {String} folderId ID of a target folder.
     * @param {module:model/ContentFolder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentFolder}
     */
    this.putLibrariesByIDFoldersByID = function(libraryId, folderId, body) {
      return this.putLibrariesByIDFoldersByIDWithHttpInfo(libraryId, folderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
