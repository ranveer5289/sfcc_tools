/**
 * Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import PasswordChangeRequest from '../models/PasswordChangeRequest';
import User from '../models/User';
import Users from '../models/Users';

/**
* Users service.
* @module api/UsersApi
* @version 20.8
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Action to delete a single user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteUsersByIDWithHttpInfo(login) {
      let postBody = null;

      let pathParams = {
        'login': login
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{login}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to delete a single user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteUsersByID(login) {
      return this.deleteUsersByIDWithHttpInfo(login)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all users with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Users} and HTTP response
     */
    getUsersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Users;

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get all users with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Users}
     */
    getUsers(opts) {
      return this.getUsersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get a user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/User} and HTTP response
     */
    getUsersByIDWithHttpInfo(login) {
      let postBody = null;

      let pathParams = {
        'login': login
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = User;

      return this.apiClient.callApi(
        '/users/{login}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get a user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/User}
     */
    getUsersByID(login) {
      return this.getUsersByIDWithHttpInfo(login)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get the user password expiration information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/User} and HTTP response
     */
    getUsersThisWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = User;

      return this.apiClient.callApi(
        '/users/this', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get the user password expiration information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/User}
     */
    getUsersThis() {
      return this.getUsersThisWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to update a user.   Note: The locked flag and the user password cannot be updated with this resource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/User} and HTTP response
     */
    patchUsersByIDWithHttpInfo(body, login) {
      let postBody = body;

      let pathParams = {
        'login': login
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = User;

      return this.apiClient.callApi(
        '/users/{login}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to update a user.   Note: The locked flag and the user password cannot be updated with this resource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/User}
     */
    patchUsersByID(body, login) {
      return this.patchUsersByIDWithHttpInfo(body, login)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to change a user password.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/User} and HTTP response
     */
    patchUsersThisPasswordWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = User;

      return this.apiClient.callApi(
        '/users/this/password', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to change a user password.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/User}
     */
    patchUsersThisPassword(body) {
      return this.patchUsersThisPasswordWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to create or overwrite a user.   If a user with the given login already exists, the existing user will be overwritten.  If no such login exists, a new user is created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/User} and HTTP response
     */
    putUsersByIDWithHttpInfo(body, login) {
      let postBody = body;

      let pathParams = {
        'login': login
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = User;

      return this.apiClient.callApi(
        '/users/{login}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to create or overwrite a user.   If a user with the given login already exists, the existing user will be overwritten.  If no such login exists, a new user is created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/User}
     */
    putUsersByID(body, login) {
      return this.putUsersByIDWithHttpInfo(body, login)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
