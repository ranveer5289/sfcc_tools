/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PasswordChangeRequest', 'model/User', 'model/Users'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PasswordChangeRequest'), require('../model/User'), require('../model/Users'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.UsersApi = factory(root.DataApi.ApiClient, root.DataApi.PasswordChangeRequest, root.DataApi.User, root.DataApi.Users);
  }
}(this, function(ApiClient, PasswordChangeRequest, User, Users) {
  'use strict';

  /**
   * Users service.
   * @module api/UsersApi
   * @version 20.4
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Action to delete a single user.
     * @param {String} login login of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteUsersByIDWithHttpInfo = function(login) {
      var postBody = null;
      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling deleteUsersByID");
      }

      var pathParams = {
        'login': login
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/users/{login}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to delete a single user.
     * @param {String} login login of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteUsersByID = function(login) {
      return this.deleteUsersByIDWithHttpInfo(login)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all users with no filtering.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Optional start index for retrieving the items from a given index (default 0).
     * @param {Number} opts.count Optional count for retrieving only a subset of the items (default is 25).
     * @param {String} opts.select The property selector.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Users} and HTTP response
     */
    this.getUsersWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Users;
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all users with no filtering.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Optional start index for retrieving the items from a given index (default 0).
     * @param {Number} opts.count Optional count for retrieving only a subset of the items (default is 25).
     * @param {String} opts.select The property selector.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Users}
     */
    this.getUsers = function(opts) {
      return this.getUsersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get a user.
     * @param {String} login login of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    this.getUsersByIDWithHttpInfo = function(login) {
      var postBody = null;
      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling getUsersByID");
      }

      var pathParams = {
        'login': login
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = User;
      return this.apiClient.callApi(
        '/users/{login}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get a user.
     * @param {String} login login of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    this.getUsersByID = function(login) {
      return this.getUsersByIDWithHttpInfo(login)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get the user password expiration information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    this.getUsersThisWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = User;
      return this.apiClient.callApi(
        '/users/this', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get the user password expiration information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    this.getUsersThis = function() {
      return this.getUsersThisWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to update a user.   Note: The locked flag and the user password cannot be updated with this resource.
     * @param {String} login login of the user
     * @param {module:model/User} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    this.patchUsersByIDWithHttpInfo = function(login, body) {
      var postBody = body;
      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling patchUsersByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchUsersByID");
      }

      var pathParams = {
        'login': login
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = User;
      return this.apiClient.callApi(
        '/users/{login}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to update a user.   Note: The locked flag and the user password cannot be updated with this resource.
     * @param {String} login login of the user
     * @param {module:model/User} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    this.patchUsersByID = function(login, body) {
      return this.patchUsersByIDWithHttpInfo(login, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to change a user password.
     * @param {module:model/PasswordChangeRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    this.patchUsersThisPasswordWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchUsersThisPassword");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = User;
      return this.apiClient.callApi(
        '/users/this/password', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to change a user password.
     * @param {module:model/PasswordChangeRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    this.patchUsersThisPassword = function(body) {
      return this.patchUsersThisPasswordWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to create or overwrite a user.   If a user with the given login already exists, the existing user will be overwritten.  If no such login exists, a new user is created.
     * @param {String} login login of the user
     * @param {module:model/User} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    this.putUsersByIDWithHttpInfo = function(login, body) {
      var postBody = body;
      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling putUsersByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putUsersByID");
      }

      var pathParams = {
        'login': login
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = User;
      return this.apiClient.callApi(
        '/users/{login}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to create or overwrite a user.   If a user with the given login already exists, the existing user will be overwritten.  If no such login exists, a new user is created.
     * @param {String} login login of the user
     * @param {module:model/User} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    this.putUsersByID = function(login, body) {
      return this.putUsersByIDWithHttpInfo(login, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
