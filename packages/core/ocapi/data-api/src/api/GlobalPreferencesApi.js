/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/OrganizationPreferences'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/OrganizationPreferences'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.GlobalPreferencesApi = factory(root.DataApi.ApiClient, root.DataApi.OrganizationPreferences);
  }
}(this, function(ApiClient, OrganizationPreferences) {
  'use strict';

  /**
   * GlobalPreferences service.
   * @module api/GlobalPreferencesApi
   * @version 20.4
   */

  /**
   * Constructs a new GlobalPreferencesApi. 
   * @alias module:api/GlobalPreferencesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * For the specified instance, read the custom preferences in the preference group at the global(organization) level.  Specify 'current' to retrieve the preferences for the instance on which this call is being made. The system will recognize its type.
     * @param {String} instanceType One of {staging,development,sandbox,production,current}.
     * @param {String} groupId The ID of the preference group.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.maskPasswords 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrganizationPreferences} and HTTP response
     */
    this.getGlobalPreferencesPreferenceGroupsByIDByIDWithHttpInfo = function(instanceType, groupId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'instanceType' is set
      if (instanceType === undefined || instanceType === null) {
        throw new Error("Missing the required parameter 'instanceType' when calling getGlobalPreferencesPreferenceGroupsByIDByID");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGlobalPreferencesPreferenceGroupsByIDByID");
      }

      var pathParams = {
        'instance_type': instanceType,
        'group_id': groupId
      };
      var queryParams = {
        'mask_passwords': opts['maskPasswords'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = OrganizationPreferences;
      return this.apiClient.callApi(
        '/global_preferences/preference_groups/{group_id}/{instance_type}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * For the specified instance, read the custom preferences in the preference group at the global(organization) level.  Specify 'current' to retrieve the preferences for the instance on which this call is being made. The system will recognize its type.
     * @param {String} instanceType One of {staging,development,sandbox,production,current}.
     * @param {String} groupId The ID of the preference group.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.maskPasswords 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrganizationPreferences}
     */
    this.getGlobalPreferencesPreferenceGroupsByIDByID = function(instanceType, groupId, opts) {
      return this.getGlobalPreferencesPreferenceGroupsByIDByIDWithHttpInfo(instanceType, groupId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * For the specified instance, update one or more custom preferences in the preference group  at the global(organization) level.
     * @param {String} instanceType One of {staging,development,sandbox,production}.
     * @param {String} groupId The ID of the preference group.
     * @param {module:model/OrganizationPreferences} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.maskPasswords 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrganizationPreferences} and HTTP response
     */
    this.patchGlobalPreferencesPreferenceGroupsByIDByIDWithHttpInfo = function(instanceType, groupId, body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'instanceType' is set
      if (instanceType === undefined || instanceType === null) {
        throw new Error("Missing the required parameter 'instanceType' when calling patchGlobalPreferencesPreferenceGroupsByIDByID");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling patchGlobalPreferencesPreferenceGroupsByIDByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchGlobalPreferencesPreferenceGroupsByIDByID");
      }

      var pathParams = {
        'instance_type': instanceType,
        'group_id': groupId
      };
      var queryParams = {
        'mask_passwords': opts['maskPasswords'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = OrganizationPreferences;
      return this.apiClient.callApi(
        '/global_preferences/preference_groups/{group_id}/{instance_type}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * For the specified instance, update one or more custom preferences in the preference group  at the global(organization) level.
     * @param {String} instanceType One of {staging,development,sandbox,production}.
     * @param {String} groupId The ID of the preference group.
     * @param {module:model/OrganizationPreferences} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.maskPasswords 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrganizationPreferences}
     */
    this.patchGlobalPreferencesPreferenceGroupsByIDByID = function(instanceType, groupId, body, opts) {
      return this.patchGlobalPreferencesPreferenceGroupsByIDByIDWithHttpInfo(instanceType, groupId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
