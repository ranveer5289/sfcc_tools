/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CodeVersion', 'model/CodeVersionResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CodeVersion'), require('../model/CodeVersionResult'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.CodeVersionsApi = factory(root.DataApi.ApiClient, root.DataApi.CodeVersion, root.DataApi.CodeVersionResult);
  }
}(this, function(ApiClient, CodeVersion, CodeVersionResult) {
  'use strict';

  /**
   * CodeVersions service.
   * @module api/CodeVersionsApi
   * @version 20.8
   */

  /**
   * Constructs a new CodeVersionsApi. 
   * @alias module:api/CodeVersionsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete a code version.
     * @param {String} codeVersionId The id of the code version.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCodeVersionsByIDWithHttpInfo = function(codeVersionId) {
      var postBody = null;
      // verify the required parameter 'codeVersionId' is set
      if (codeVersionId === undefined || codeVersionId === null) {
        throw new Error("Missing the required parameter 'codeVersionId' when calling deleteCodeVersionsByID");
      }

      var pathParams = {
        'code_version_id': codeVersionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/code_versions/{code_version_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a code version.
     * @param {String} codeVersionId The id of the code version.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCodeVersionsByID = function(codeVersionId) {
      return this.deleteCodeVersionsByIDWithHttpInfo(codeVersionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read all existing code versions.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CodeVersionResult} and HTTP response
     */
    this.getCodeVersionsWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CodeVersionResult;
      return this.apiClient.callApi(
        '/code_versions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Read all existing code versions.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CodeVersionResult}
     */
    this.getCodeVersions = function() {
      return this.getCodeVersionsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a code version.
     * @param {String} codeVersionId The id of the code version.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CodeVersion} and HTTP response
     */
    this.getCodeVersionsByIDWithHttpInfo = function(codeVersionId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'codeVersionId' is set
      if (codeVersionId === undefined || codeVersionId === null) {
        throw new Error("Missing the required parameter 'codeVersionId' when calling getCodeVersionsByID");
      }

      var pathParams = {
        'code_version_id': codeVersionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CodeVersion;
      return this.apiClient.callApi(
        '/code_versions/{code_version_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Read a code version.
     * @param {String} codeVersionId The id of the code version.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CodeVersion}
     */
    this.getCodeVersionsByID = function(codeVersionId, opts) {
      return this.getCodeVersionsByIDWithHttpInfo(codeVersionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing code version.     Only an inactive code version can be updated.   Only the active flag and the id can be changed. The active flag can therefore only set to \"true\".    To set the active flag to \"false\" will not work.  
     * @param {String} codeVersionId The id of the code version.
     * @param {module:model/CodeVersion} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CodeVersion} and HTTP response
     */
    this.patchCodeVersionsByIDWithHttpInfo = function(codeVersionId, body) {
      var postBody = body;
      // verify the required parameter 'codeVersionId' is set
      if (codeVersionId === undefined || codeVersionId === null) {
        throw new Error("Missing the required parameter 'codeVersionId' when calling patchCodeVersionsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCodeVersionsByID");
      }

      var pathParams = {
        'code_version_id': codeVersionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CodeVersion;
      return this.apiClient.callApi(
        '/code_versions/{code_version_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an existing code version.     Only an inactive code version can be updated.   Only the active flag and the id can be changed. The active flag can therefore only set to \"true\".    To set the active flag to \"false\" will not work.  
     * @param {String} codeVersionId The id of the code version.
     * @param {module:model/CodeVersion} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CodeVersion}
     */
    this.patchCodeVersionsByID = function(codeVersionId, body) {
      return this.patchCodeVersionsByIDWithHttpInfo(codeVersionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new code version.
     * @param {String} codeVersionId The id of the code version.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CodeVersion} and HTTP response
     */
    this.putCodeVersionsByIDWithHttpInfo = function(codeVersionId) {
      var postBody = null;
      // verify the required parameter 'codeVersionId' is set
      if (codeVersionId === undefined || codeVersionId === null) {
        throw new Error("Missing the required parameter 'codeVersionId' when calling putCodeVersionsByID");
      }

      var pathParams = {
        'code_version_id': codeVersionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CodeVersion;
      return this.apiClient.callApi(
        '/code_versions/{code_version_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new code version.
     * @param {String} codeVersionId The id of the code version.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CodeVersion}
     */
    this.putCodeVersionsByID = function(codeVersionId) {
      return this.putCodeVersionsByIDWithHttpInfo(codeVersionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
