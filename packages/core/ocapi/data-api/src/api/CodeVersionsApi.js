/**
 * Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CodeVersion from '../models/CodeVersion';
import CodeVersionResult from '../models/CodeVersionResult';

/**
* CodeVersions service.
* @module api/CodeVersionsApi
* @version 20.8
*/
export default class CodeVersionsApi {

    /**
    * Constructs a new CodeVersionsApi. 
    * @alias module:api/CodeVersionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete a code version.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCodeVersionsByIDWithHttpInfo(codeVersionId) {
      let postBody = null;

      let pathParams = {
        'code_version_id': codeVersionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/code_versions/{code_version_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a code version.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCodeVersionsByID(codeVersionId) {
      return this.deleteCodeVersionsByIDWithHttpInfo(codeVersionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read all existing code versions.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CodeVersionResult} and HTTP response
     */
    getCodeVersionsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CodeVersionResult;

      return this.apiClient.callApi(
        '/code_versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read all existing code versions.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CodeVersionResult}
     */
    getCodeVersions() {
      return this.getCodeVersionsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a code version.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CodeVersion} and HTTP response
     */
    getCodeVersionsByIDWithHttpInfo(codeVersionId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'code_version_id': codeVersionId
      };
      let queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CodeVersion;

      return this.apiClient.callApi(
        '/code_versions/{code_version_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read a code version.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CodeVersion}
     */
    getCodeVersionsByID(codeVersionId, opts) {
      return this.getCodeVersionsByIDWithHttpInfo(codeVersionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing code version.     Only an inactive code version can be updated.   Only the active flag and the id can be changed. The active flag can therefore only set to \&quot;true\&quot;.    To set the active flag to \&quot;false\&quot; will not work.  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CodeVersion} and HTTP response
     */
    patchCodeVersionsByIDWithHttpInfo(body, codeVersionId) {
      let postBody = body;

      let pathParams = {
        'code_version_id': codeVersionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CodeVersion;

      return this.apiClient.callApi(
        '/code_versions/{code_version_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing code version.     Only an inactive code version can be updated.   Only the active flag and the id can be changed. The active flag can therefore only set to \&quot;true\&quot;.    To set the active flag to \&quot;false\&quot; will not work.  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CodeVersion}
     */
    patchCodeVersionsByID(body, codeVersionId) {
      return this.patchCodeVersionsByIDWithHttpInfo(body, codeVersionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new code version.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CodeVersion} and HTTP response
     */
    putCodeVersionsByIDWithHttpInfo(codeVersionId) {
      let postBody = null;

      let pathParams = {
        'code_version_id': codeVersionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CodeVersion;

      return this.apiClient.callApi(
        '/code_versions/{code_version_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new code version.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CodeVersion}
     */
    putCodeVersionsByID(codeVersionId) {
      return this.putCodeVersionsByIDWithHttpInfo(codeVersionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
