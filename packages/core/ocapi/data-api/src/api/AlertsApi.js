/**
 * Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AlertDescriptor from '../models/AlertDescriptor';
import AlertDescriptors from '../models/AlertDescriptors';
import AlertDescriptorsRevalidationRequest from '../models/AlertDescriptorsRevalidationRequest';
import AlertItem from '../models/AlertItem';
import AlertItems from '../models/AlertItems';
import AlertSettings from '../models/AlertSettings';

/**
* Alerts service.
* @module api/AlertsApi
* @version 20.8
*/
export default class AlertsApi {

    /**
    * Constructs a new AlertsApi. 
    * @alias module:api/AlertsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Deletes a single alert If the alert depends on a context object, the last path elemnt denotes the context object id.    If the alert is independent from a context, use - as the last path element
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAlertsItemsByIDByIDByIDByIDWithHttpInfo(applicationId, applicationContextPath, messageId, contextObjectId) {
      let postBody = null;

      let pathParams = {
        'application_id': applicationId,
        'application_context_path': applicationContextPath,
        'message_id': messageId,
        'context_object_id': contextObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/alerts/items/{application_id}/{application_context_path}/{message_id}/{context_object_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes a single alert If the alert depends on a context object, the last path elemnt denotes the context object id.    If the alert is independent from a context, use - as the last path element
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAlertsItemsByIDByIDByIDByID(applicationId, applicationContextPath, messageId, contextObjectId) {
      return this.deleteAlertsItemsByIDByIDByIDByIDWithHttpInfo(applicationId, applicationContextPath, messageId, contextObjectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a collection of all alert descriptors
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AlertDescriptors} and HTTP response
     */
    getAlertsDescriptorsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AlertDescriptors;

      return this.apiClient.callApi(
        '/alerts/descriptors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets a collection of all alert descriptors
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AlertDescriptors}
     */
    getAlertsDescriptors() {
      return this.getAlertsDescriptorsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a collection of all alert descriptors for the given application context.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AlertDescriptors} and HTTP response
     */
    getAlertsDescriptorsByIDWithHttpInfo(applicationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'application_id': applicationId
      };
      let queryParams = {
        'application_context_path': opts['applicationContextPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AlertDescriptors;

      return this.apiClient.callApi(
        '/alerts/descriptors/{application_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets a collection of all alert descriptors for the given application context.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AlertDescriptors}
     */
    getAlertsDescriptorsByID(applicationId, opts) {
      return this.getAlertsDescriptorsByIDWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a single alert descriptor
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AlertDescriptor} and HTTP response
     */
    getAlertsDescriptorsByIDByIDByIDWithHttpInfo(applicationId, applicationContextPath, messageId) {
      let postBody = null;

      let pathParams = {
        'application_id': applicationId,
        'application_context_path': applicationContextPath,
        'message_id': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AlertDescriptor;

      return this.apiClient.callApi(
        '/alerts/descriptors/{application_id}/{application_context_path}/{message_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets a single alert descriptor
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AlertDescriptor}
     */
    getAlertsDescriptorsByIDByIDByID(applicationId, applicationContextPath, messageId) {
      return this.getAlertsDescriptorsByIDByIDByIDWithHttpInfo(applicationId, applicationContextPath, messageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a collection of all alerts
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AlertItems} and HTTP response
     */
    getAlertsItemsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AlertItems;

      return this.apiClient.callApi(
        '/alerts/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets a collection of all alerts
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AlertItems}
     */
    getAlertsItems() {
      return this.getAlertsItemsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a collection of alerts for the given application context
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AlertItems} and HTTP response
     */
    getAlertsItemsByIDWithHttpInfo(applicationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'application_id': applicationId
      };
      let queryParams = {
        'application_context_path': opts['applicationContextPath'],
        'context_object_id': opts['contextObjectId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AlertItems;

      return this.apiClient.callApi(
        '/alerts/items/{application_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets a collection of alerts for the given application context
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AlertItems}
     */
    getAlertsItemsByID(applicationId, opts) {
      return this.getAlertsItemsByIDWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a single alert If the alert depends on a context object, the last path elemnt denotes the context object id.    If the alert is independent from a context, use - as the last path element
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AlertItem} and HTTP response
     */
    getAlertsItemsByIDByIDByIDByIDWithHttpInfo(applicationId, applicationContextPath, messageId, contextObjectId) {
      let postBody = null;

      let pathParams = {
        'application_id': applicationId,
        'application_context_path': applicationContextPath,
        'message_id': messageId,
        'context_object_id': contextObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AlertItem;

      return this.apiClient.callApi(
        '/alerts/items/{application_id}/{application_context_path}/{message_id}/{context_object_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets a single alert If the alert depends on a context object, the last path elemnt denotes the context object id.    If the alert is independent from a context, use - as the last path element
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AlertItem}
     */
    getAlertsItemsByIDByIDByIDByID(applicationId, applicationContextPath, messageId, contextObjectId) {
      return this.getAlertsItemsByIDByIDByIDByIDWithHttpInfo(applicationId, applicationContextPath, messageId, contextObjectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the alert settings for the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AlertSettings} and HTTP response
     */
    getAlertsUsersettingsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AlertSettings;

      return this.apiClient.callApi(
        '/alerts/usersettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets the alert settings for the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AlertSettings}
     */
    getAlertsUsersettings() {
      return this.getAlertsUsersettingsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Triggers rule validation for all described descriptors. When a validation rule for a descriptor is triggered active alerts might be deleted if the conditions are not met anymore.    Additionally, new alerts might be created if conditions of a descriptor are now met. If the alert descriptor is context-specific, a context object ID needs to be provided in the request body.    The request body can be ued to further restrict the set of descriptors that are validated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    patchAlertsDescriptorsByIDByIDByIDRevalidateWithHttpInfo(applicationId, applicationContextPath, messageId, opts) {
      let postBody = opts['body'];

      let pathParams = {
        'application_id': applicationId,
        'application_context_path': applicationContextPath,
        'message_id': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/alerts/descriptors/{application_id}/{application_context_path}/{message_id}/revalidate', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Triggers rule validation for all described descriptors. When a validation rule for a descriptor is triggered active alerts might be deleted if the conditions are not met anymore.    Additionally, new alerts might be created if conditions of a descriptor are now met. If the alert descriptor is context-specific, a context object ID needs to be provided in the request body.    The request body can be ued to further restrict the set of descriptors that are validated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    patchAlertsDescriptorsByIDByIDByIDRevalidate(applicationId, applicationContextPath, messageId, opts) {
      return this.patchAlertsDescriptorsByIDByIDByIDRevalidateWithHttpInfo(applicationId, applicationContextPath, messageId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Changes the alert settings for the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AlertSettings} and HTTP response
     */
    patchAlertsUsersettingsWithHttpInfo(opts) {
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = AlertSettings;

      return this.apiClient.callApi(
        '/alerts/usersettings', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Changes the alert settings for the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AlertSettings}
     */
    patchAlertsUsersettings(opts) {
      return this.patchAlertsUsersettingsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
