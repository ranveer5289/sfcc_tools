/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AlertDescriptor', 'model/AlertDescriptors', 'model/AlertDescriptorsRevalidationRequest', 'model/AlertItem', 'model/AlertItems', 'model/AlertSettings'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AlertDescriptor'), require('../model/AlertDescriptors'), require('../model/AlertDescriptorsRevalidationRequest'), require('../model/AlertItem'), require('../model/AlertItems'), require('../model/AlertSettings'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.AlertsApi = factory(root.DataApi.ApiClient, root.DataApi.AlertDescriptor, root.DataApi.AlertDescriptors, root.DataApi.AlertDescriptorsRevalidationRequest, root.DataApi.AlertItem, root.DataApi.AlertItems, root.DataApi.AlertSettings);
  }
}(this, function(ApiClient, AlertDescriptor, AlertDescriptors, AlertDescriptorsRevalidationRequest, AlertItem, AlertItems, AlertSettings) {
  'use strict';

  /**
   * Alerts service.
   * @module api/AlertsApi
   * @version 20.8
   */

  /**
   * Constructs a new AlertsApi. 
   * @alias module:api/AlertsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Deletes a single alert If the alert depends on a context object, the last path elemnt denotes the context object id.    If the alert is independent from a context, use - as the last path element
     * @param {String} applicationId The application ID.
     * @param {String} applicationContextPath The application context path.
     * @param {String} messageId The message ID.
     * @param {String} contextObjectId The context object ID. Use '-' for alerts that don't have a context object.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteAlertsItemsByIDByIDByIDByIDWithHttpInfo = function(applicationId, applicationContextPath, messageId, contextObjectId) {
      var postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteAlertsItemsByIDByIDByIDByID");
      }
      // verify the required parameter 'applicationContextPath' is set
      if (applicationContextPath === undefined || applicationContextPath === null) {
        throw new Error("Missing the required parameter 'applicationContextPath' when calling deleteAlertsItemsByIDByIDByIDByID");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling deleteAlertsItemsByIDByIDByIDByID");
      }
      // verify the required parameter 'contextObjectId' is set
      if (contextObjectId === undefined || contextObjectId === null) {
        throw new Error("Missing the required parameter 'contextObjectId' when calling deleteAlertsItemsByIDByIDByIDByID");
      }

      var pathParams = {
        'application_id': applicationId,
        'application_context_path': applicationContextPath,
        'message_id': messageId,
        'context_object_id': contextObjectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/alerts/items/{application_id}/{application_context_path}/{message_id}/{context_object_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a single alert If the alert depends on a context object, the last path elemnt denotes the context object id.    If the alert is independent from a context, use - as the last path element
     * @param {String} applicationId The application ID.
     * @param {String} applicationContextPath The application context path.
     * @param {String} messageId The message ID.
     * @param {String} contextObjectId The context object ID. Use '-' for alerts that don't have a context object.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteAlertsItemsByIDByIDByIDByID = function(applicationId, applicationContextPath, messageId, contextObjectId) {
      return this.deleteAlertsItemsByIDByIDByIDByIDWithHttpInfo(applicationId, applicationContextPath, messageId, contextObjectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a collection of all alert descriptors
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AlertDescriptors} and HTTP response
     */
    this.getAlertsDescriptorsWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AlertDescriptors;
      return this.apiClient.callApi(
        '/alerts/descriptors', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a collection of all alert descriptors
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AlertDescriptors}
     */
    this.getAlertsDescriptors = function() {
      return this.getAlertsDescriptorsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a collection of all alert descriptors for the given application context.
     * @param {String} applicationId The application ID.
     * @param {Object} opts Optional parameters
     * @param {String} opts.applicationContextPath 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AlertDescriptors} and HTTP response
     */
    this.getAlertsDescriptorsByIDWithHttpInfo = function(applicationId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getAlertsDescriptorsByID");
      }

      var pathParams = {
        'application_id': applicationId
      };
      var queryParams = {
        'application_context_path': opts['applicationContextPath'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AlertDescriptors;
      return this.apiClient.callApi(
        '/alerts/descriptors/{application_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a collection of all alert descriptors for the given application context.
     * @param {String} applicationId The application ID.
     * @param {Object} opts Optional parameters
     * @param {String} opts.applicationContextPath 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AlertDescriptors}
     */
    this.getAlertsDescriptorsByID = function(applicationId, opts) {
      return this.getAlertsDescriptorsByIDWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a single alert descriptor
     * @param {String} applicationId The application ID.
     * @param {String} applicationContextPath The application context path.
     * @param {String} messageId The message ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AlertDescriptor} and HTTP response
     */
    this.getAlertsDescriptorsByIDByIDByIDWithHttpInfo = function(applicationId, applicationContextPath, messageId) {
      var postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getAlertsDescriptorsByIDByIDByID");
      }
      // verify the required parameter 'applicationContextPath' is set
      if (applicationContextPath === undefined || applicationContextPath === null) {
        throw new Error("Missing the required parameter 'applicationContextPath' when calling getAlertsDescriptorsByIDByIDByID");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling getAlertsDescriptorsByIDByIDByID");
      }

      var pathParams = {
        'application_id': applicationId,
        'application_context_path': applicationContextPath,
        'message_id': messageId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AlertDescriptor;
      return this.apiClient.callApi(
        '/alerts/descriptors/{application_id}/{application_context_path}/{message_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a single alert descriptor
     * @param {String} applicationId The application ID.
     * @param {String} applicationContextPath The application context path.
     * @param {String} messageId The message ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AlertDescriptor}
     */
    this.getAlertsDescriptorsByIDByIDByID = function(applicationId, applicationContextPath, messageId) {
      return this.getAlertsDescriptorsByIDByIDByIDWithHttpInfo(applicationId, applicationContextPath, messageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a collection of all alerts
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AlertItems} and HTTP response
     */
    this.getAlertsItemsWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AlertItems;
      return this.apiClient.callApi(
        '/alerts/items', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a collection of all alerts
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AlertItems}
     */
    this.getAlertsItems = function() {
      return this.getAlertsItemsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a collection of alerts for the given application context
     * @param {String} applicationId The application ID.
     * @param {Object} opts Optional parameters
     * @param {String} opts.applicationContextPath 
     * @param {String} opts.contextObjectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AlertItems} and HTTP response
     */
    this.getAlertsItemsByIDWithHttpInfo = function(applicationId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getAlertsItemsByID");
      }

      var pathParams = {
        'application_id': applicationId
      };
      var queryParams = {
        'application_context_path': opts['applicationContextPath'],
        'context_object_id': opts['contextObjectId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AlertItems;
      return this.apiClient.callApi(
        '/alerts/items/{application_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a collection of alerts for the given application context
     * @param {String} applicationId The application ID.
     * @param {Object} opts Optional parameters
     * @param {String} opts.applicationContextPath 
     * @param {String} opts.contextObjectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AlertItems}
     */
    this.getAlertsItemsByID = function(applicationId, opts) {
      return this.getAlertsItemsByIDWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a single alert If the alert depends on a context object, the last path elemnt denotes the context object id.    If the alert is independent from a context, use - as the last path element
     * @param {String} applicationId The application ID.
     * @param {String} applicationContextPath The application context path.
     * @param {String} messageId The message ID.
     * @param {String} contextObjectId The context object ID. Use '-' for alerts that don't have a context object.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AlertItem} and HTTP response
     */
    this.getAlertsItemsByIDByIDByIDByIDWithHttpInfo = function(applicationId, applicationContextPath, messageId, contextObjectId) {
      var postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getAlertsItemsByIDByIDByIDByID");
      }
      // verify the required parameter 'applicationContextPath' is set
      if (applicationContextPath === undefined || applicationContextPath === null) {
        throw new Error("Missing the required parameter 'applicationContextPath' when calling getAlertsItemsByIDByIDByIDByID");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling getAlertsItemsByIDByIDByIDByID");
      }
      // verify the required parameter 'contextObjectId' is set
      if (contextObjectId === undefined || contextObjectId === null) {
        throw new Error("Missing the required parameter 'contextObjectId' when calling getAlertsItemsByIDByIDByIDByID");
      }

      var pathParams = {
        'application_id': applicationId,
        'application_context_path': applicationContextPath,
        'message_id': messageId,
        'context_object_id': contextObjectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AlertItem;
      return this.apiClient.callApi(
        '/alerts/items/{application_id}/{application_context_path}/{message_id}/{context_object_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a single alert If the alert depends on a context object, the last path elemnt denotes the context object id.    If the alert is independent from a context, use - as the last path element
     * @param {String} applicationId The application ID.
     * @param {String} applicationContextPath The application context path.
     * @param {String} messageId The message ID.
     * @param {String} contextObjectId The context object ID. Use '-' for alerts that don't have a context object.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AlertItem}
     */
    this.getAlertsItemsByIDByIDByIDByID = function(applicationId, applicationContextPath, messageId, contextObjectId) {
      return this.getAlertsItemsByIDByIDByIDByIDWithHttpInfo(applicationId, applicationContextPath, messageId, contextObjectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the alert settings for the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AlertSettings} and HTTP response
     */
    this.getAlertsUsersettingsWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AlertSettings;
      return this.apiClient.callApi(
        '/alerts/usersettings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets the alert settings for the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AlertSettings}
     */
    this.getAlertsUsersettings = function() {
      return this.getAlertsUsersettingsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Triggers rule validation for all described descriptors. When a validation rule for a descriptor is triggered active alerts might be deleted if the conditions are not met anymore.    Additionally, new alerts might be created if conditions of a descriptor are now met. If the alert descriptor is context-specific, a context object ID needs to be provided in the request body.    The request body can be ued to further restrict the set of descriptors that are validated.
     * @param {String} applicationId The application ID.
     * @param {String} applicationContextPath The application context path.
     * @param {String} messageId The message ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlertDescriptorsRevalidationRequest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.patchAlertsDescriptorsByIDByIDByIDRevalidateWithHttpInfo = function(applicationId, applicationContextPath, messageId, opts) {
      opts = opts || {};
      var postBody = opts['body'];
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling patchAlertsDescriptorsByIDByIDByIDRevalidate");
      }
      // verify the required parameter 'applicationContextPath' is set
      if (applicationContextPath === undefined || applicationContextPath === null) {
        throw new Error("Missing the required parameter 'applicationContextPath' when calling patchAlertsDescriptorsByIDByIDByIDRevalidate");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling patchAlertsDescriptorsByIDByIDByIDRevalidate");
      }

      var pathParams = {
        'application_id': applicationId,
        'application_context_path': applicationContextPath,
        'message_id': messageId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/alerts/descriptors/{application_id}/{application_context_path}/{message_id}/revalidate', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Triggers rule validation for all described descriptors. When a validation rule for a descriptor is triggered active alerts might be deleted if the conditions are not met anymore.    Additionally, new alerts might be created if conditions of a descriptor are now met. If the alert descriptor is context-specific, a context object ID needs to be provided in the request body.    The request body can be ued to further restrict the set of descriptors that are validated.
     * @param {String} applicationId The application ID.
     * @param {String} applicationContextPath The application context path.
     * @param {String} messageId The message ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlertDescriptorsRevalidationRequest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.patchAlertsDescriptorsByIDByIDByIDRevalidate = function(applicationId, applicationContextPath, messageId, opts) {
      return this.patchAlertsDescriptorsByIDByIDByIDRevalidateWithHttpInfo(applicationId, applicationContextPath, messageId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Changes the alert settings for the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlertSettings} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AlertSettings} and HTTP response
     */
    this.patchAlertsUsersettingsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['body'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = AlertSettings;
      return this.apiClient.callApi(
        '/alerts/usersettings', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Changes the alert settings for the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlertSettings} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AlertSettings}
     */
    this.patchAlertsUsersettings = function(opts) {
      return this.patchAlertsUsersettingsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
