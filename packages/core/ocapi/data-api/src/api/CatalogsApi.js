/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Catalog', 'model/Catalogs', 'model/Categories', 'model/Category', 'model/CategoryLink', 'model/CategoryLinks', 'model/CategoryProductAssignment', 'model/CategoryProductAssignmentSearchRequest', 'model/CategoryProductAssignmentSearchResult', 'model/CategorySearchResult', 'model/ProductOption', 'model/ProductOptionValue', 'model/ProductOptionValues', 'model/ProductOptions', 'model/SearchRequest', 'model/VariationAttribute', 'model/VariationAttributeValue', 'model/VariationAttributeValues', 'model/VariationAttributes'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Catalog'), require('../model/Catalogs'), require('../model/Categories'), require('../model/Category'), require('../model/CategoryLink'), require('../model/CategoryLinks'), require('../model/CategoryProductAssignment'), require('../model/CategoryProductAssignmentSearchRequest'), require('../model/CategoryProductAssignmentSearchResult'), require('../model/CategorySearchResult'), require('../model/ProductOption'), require('../model/ProductOptionValue'), require('../model/ProductOptionValues'), require('../model/ProductOptions'), require('../model/SearchRequest'), require('../model/VariationAttribute'), require('../model/VariationAttributeValue'), require('../model/VariationAttributeValues'), require('../model/VariationAttributes'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.CatalogsApi = factory(root.DataApi.ApiClient, root.DataApi.Catalog, root.DataApi.Catalogs, root.DataApi.Categories, root.DataApi.Category, root.DataApi.CategoryLink, root.DataApi.CategoryLinks, root.DataApi.CategoryProductAssignment, root.DataApi.CategoryProductAssignmentSearchRequest, root.DataApi.CategoryProductAssignmentSearchResult, root.DataApi.CategorySearchResult, root.DataApi.ProductOption, root.DataApi.ProductOptionValue, root.DataApi.ProductOptionValues, root.DataApi.ProductOptions, root.DataApi.SearchRequest, root.DataApi.VariationAttribute, root.DataApi.VariationAttributeValue, root.DataApi.VariationAttributeValues, root.DataApi.VariationAttributes);
  }
}(this, function(ApiClient, Catalog, Catalogs, Categories, Category, CategoryLink, CategoryLinks, CategoryProductAssignment, CategoryProductAssignmentSearchRequest, CategoryProductAssignmentSearchResult, CategorySearchResult, ProductOption, ProductOptionValue, ProductOptionValues, ProductOptions, SearchRequest, VariationAttribute, VariationAttributeValue, VariationAttributeValues, VariationAttributes) {
  'use strict';

  /**
   * Catalogs service.
   * @module api/CatalogsApi
   * @version 20.8
   */

  /**
   * Constructs a new CatalogsApi. 
   * @alias module:api/CatalogsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Deletes the category by catalog ID and category ID
     * @param {String} catalogId The site context.
     * @param {String} categoryId The category id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCatalogsByIDCategoriesByIDWithHttpInfo = function(catalogId, categoryId) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling deleteCatalogsByIDCategoriesByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteCatalogsByIDCategoriesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the category by catalog ID and category ID
     * @param {String} catalogId The site context.
     * @param {String} categoryId The category id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCatalogsByIDCategoriesByID = function(catalogId, categoryId) {
      return this.deleteCatalogsByIDCategoriesByIDWithHttpInfo(catalogId, categoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the category link by ID
     * @param {String} catalogId The id of the source catalog.
     * @param {String} categoryId The id of the source category.
     * @param {String} targetCatalogId The id of the target catalog.
     * @param {String} targetCategoryId The id of the target category.
     * @param {String} type the link type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo = function(catalogId, categoryId, targetCatalogId, targetCategoryId, type) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling deleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'targetCatalogId' is set
      if (targetCatalogId === undefined || targetCatalogId === null) {
        throw new Error("Missing the required parameter 'targetCatalogId' when calling deleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'targetCategoryId' is set
      if (targetCategoryId === undefined || targetCategoryId === null) {
        throw new Error("Missing the required parameter 'targetCategoryId' when calling deleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'target_catalog_id': targetCatalogId,
        'target_category_id': targetCategoryId,
        'type': type
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/category_links/{target_catalog_id}/{target_category_id}/{type}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the category link by ID
     * @param {String} catalogId The id of the source catalog.
     * @param {String} categoryId The id of the source category.
     * @param {String} targetCatalogId The id of the target catalog.
     * @param {String} targetCategoryId The id of the target category.
     * @param {String} type the link type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID = function(catalogId, categoryId, targetCatalogId, targetCategoryId, type) {
      return this.deleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo(catalogId, categoryId, targetCatalogId, targetCategoryId, type)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a category product assignment;      For example, if we have products A, B, C at positions 1, 2, 7.5 and delete assignment for product B,   this will end up the products A, B, C at positions 1, null, 7.5.
     * @param {String} catalogId The catalog of the assignment.
     * @param {String} categoryId The id of the requested category.
     * @param {String} productId The id of the requested product to un-assign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo = function(catalogId, categoryId, productId) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling deleteCatalogsByIDCategoriesByIDProductsByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteCatalogsByIDCategoriesByIDProductsByID");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteCatalogsByIDCategoriesByIDProductsByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'product_id': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/products/{product_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Removes a category product assignment;      For example, if we have products A, B, C at positions 1, 2, 7.5 and delete assignment for product B,   this will end up the products A, B, C at positions 1, null, 7.5.
     * @param {String} catalogId The catalog of the assignment.
     * @param {String} categoryId The id of the requested category.
     * @param {String} productId The id of the requested product to un-assign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCatalogsByIDCategoriesByIDProductsByID = function(catalogId, categoryId, productId) {
      return this.deleteCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo(catalogId, categoryId, productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a shared product option by ID.
     * @param {String} catalogId The id of the catalog.
     * @param {String} id The id of the shared product option.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCatalogsByIDSharedProductOptionsByIDWithHttpInfo = function(catalogId, id) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling deleteCatalogsByIDSharedProductOptionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCatalogsByIDSharedProductOptionsByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a shared product option by ID.
     * @param {String} catalogId The id of the catalog.
     * @param {String} id The id of the shared product option.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCatalogsByIDSharedProductOptionsByID = function(catalogId, id) {
      return this.deleteCatalogsByIDSharedProductOptionsByIDWithHttpInfo(catalogId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a shared product option value by ID.
     * @param {String} catalogId The id of the catalog.
     * @param {String} optionId The id of the shared product option.
     * @param {String} id The id of the shared product option value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo = function(catalogId, optionId, id) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling deleteCatalogsByIDSharedProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling deleteCatalogsByIDSharedProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCatalogsByIDSharedProductOptionsByIDValuesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'option_id': optionId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{option_id}/values/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a shared product option value by ID.
     * @param {String} catalogId The id of the catalog.
     * @param {String} optionId The id of the shared product option.
     * @param {String} id The id of the shared product option value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCatalogsByIDSharedProductOptionsByIDValuesByID = function(catalogId, optionId, id) {
      return this.deleteCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo(catalogId, optionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the variation attribute by ID
     * @param {String} catalogId The id of the catalog.
     * @param {String} id One variation attribute id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCatalogsByIDSharedVariationAttributesByIDWithHttpInfo = function(catalogId, id) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling deleteCatalogsByIDSharedVariationAttributesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCatalogsByIDSharedVariationAttributesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the variation attribute by ID
     * @param {String} catalogId The id of the catalog.
     * @param {String} id One variation attribute id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCatalogsByIDSharedVariationAttributesByID = function(catalogId, id) {
      return this.deleteCatalogsByIDSharedVariationAttributesByIDWithHttpInfo(catalogId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the variation attribute value of a variation attribute bound to a catalog
     * @param {String} catalogId The id of the catalog.
     * @param {String} attributeId The id of the variation attribute that contains the value.
     * @param {String} id The id of one value to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo = function(catalogId, attributeId, id) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling deleteCatalogsByIDSharedVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling deleteCatalogsByIDSharedVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCatalogsByIDSharedVariationAttributesByIDValuesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'attribute_id': attributeId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{attribute_id}/values/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the variation attribute value of a variation attribute bound to a catalog
     * @param {String} catalogId The id of the catalog.
     * @param {String} attributeId The id of the variation attribute that contains the value.
     * @param {String} id The id of one value to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCatalogsByIDSharedVariationAttributesByIDValuesByID = function(catalogId, attributeId, id) {
      return this.deleteCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo(catalogId, attributeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the catalogs with no filtering.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Optional start index for retrieving the items from a given index (default 0).
     * @param {Number} opts.count Optional count for retrieving only a subset of the items (default is 25).
     * @param {String} opts.select The property selector.
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Catalogs} and HTTP response
     */
    this.getCatalogsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Catalogs;
      return this.apiClient.callApi(
        '/catalogs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the catalogs with no filtering.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Optional start index for retrieving the items from a given index (default 0).
     * @param {Number} opts.count Optional count for retrieving only a subset of the items (default is 25).
     * @param {String} opts.select The property selector.
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Catalogs}
     */
    this.getCatalogs = function(opts) {
      return this.getCatalogsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets catalog information by catalog Id.    Expansion \"stats\" can be used to retrieved some expensive statistic data, such as assigned_product_count and owned_product_count.  Example: /s/-/dw/data/v99_9/catalogs/my-catalog?expand=stats
     * @param {String} catalogId The id of the requested catalog.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Catalog} and HTTP response
     */
    this.getCatalogsByIDWithHttpInfo = function(catalogId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalogsByID");
      }

      var pathParams = {
        'catalog_id': catalogId
      };
      var queryParams = {
        'select': opts['select'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Catalog;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets catalog information by catalog Id.    Expansion \"stats\" can be used to retrieved some expensive statistic data, such as assigned_product_count and owned_product_count.  Example: /s/-/dw/data/v99_9/catalogs/my-catalog?expand=stats
     * @param {String} catalogId The id of the requested catalog.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Catalog}
     */
    this.getCatalogsByID = function(catalogId, opts) {
      return this.getCatalogsByIDWithHttpInfo(catalogId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the categories with no filtering.
     * @param {String} catalogId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Categories} and HTTP response
     */
    this.getCatalogsByIDCategoriesWithHttpInfo = function(catalogId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalogsByIDCategories");
      }

      var pathParams = {
        'catalog_id': catalogId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Categories;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the categories with no filtering.
     * @param {String} catalogId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Categories}
     */
    this.getCatalogsByIDCategories = function(catalogId, opts) {
      return this.getCatalogsByIDCategoriesWithHttpInfo(catalogId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to read an existing category within a catalog. By default, the server  also returns the first level of sub-categories, but you can specify another level by setting the levels  parameter. Please note, using a large value for levels may cause performance   issues in case of a large and deep category tree.
     * @param {String} catalogId the id of the catalog that the category belongs to
     * @param {String} categoryId the id of the category requested
     * @param {Object} opts Optional parameters
     * @param {Number} opts.levels 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Category} and HTTP response
     */
    this.getCatalogsByIDCategoriesByIDWithHttpInfo = function(catalogId, categoryId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalogsByIDCategoriesByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getCatalogsByIDCategoriesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId
      };
      var queryParams = {
        'levels': opts['levels'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Category;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to read an existing category within a catalog. By default, the server  also returns the first level of sub-categories, but you can specify another level by setting the levels  parameter. Please note, using a large value for levels may cause performance   issues in case of a large and deep category tree.
     * @param {String} catalogId the id of the catalog that the category belongs to
     * @param {String} categoryId the id of the category requested
     * @param {Object} opts Optional parameters
     * @param {Number} opts.levels 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Category}
     */
    this.getCatalogsByIDCategoriesByID = function(catalogId, categoryId, opts) {
      return this.getCatalogsByIDCategoriesByIDWithHttpInfo(catalogId, categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get a set of outgoing category links in a given catalog category, sorted by position.
     * @param {String} catalogId The id of the catalog.
     * @param {String} categoryId The id of the source category.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryLinks} and HTTP response
     */
    this.getCatalogsByIDCategoriesByIDCategoryLinksWithHttpInfo = function(catalogId, categoryId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalogsByIDCategoriesByIDCategoryLinks");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getCatalogsByIDCategoriesByIDCategoryLinks");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CategoryLinks;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/category_links', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get a set of outgoing category links in a given catalog category, sorted by position.
     * @param {String} catalogId The id of the catalog.
     * @param {String} categoryId The id of the source category.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryLinks}
     */
    this.getCatalogsByIDCategoriesByIDCategoryLinks = function(catalogId, categoryId, opts) {
      return this.getCatalogsByIDCategoriesByIDCategoryLinksWithHttpInfo(catalogId, categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get category link information.
     * @param {String} catalogId The id of the source catalog.
     * @param {String} categoryId The id of the source category.
     * @param {String} targetCatalogId The id of the target catalog.
     * @param {String} targetCategoryId The id of the target category.
     * @param {String} type the link type
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryLink} and HTTP response
     */
    this.getCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo = function(catalogId, categoryId, targetCatalogId, targetCategoryId, type, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'targetCatalogId' is set
      if (targetCatalogId === undefined || targetCatalogId === null) {
        throw new Error("Missing the required parameter 'targetCatalogId' when calling getCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'targetCategoryId' is set
      if (targetCategoryId === undefined || targetCategoryId === null) {
        throw new Error("Missing the required parameter 'targetCategoryId' when calling getCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'target_catalog_id': targetCatalogId,
        'target_category_id': targetCategoryId,
        'type': type
      };
      var queryParams = {
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CategoryLink;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/category_links/{target_catalog_id}/{target_category_id}/{type}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get category link information.
     * @param {String} catalogId The id of the source catalog.
     * @param {String} categoryId The id of the source category.
     * @param {String} targetCatalogId The id of the target catalog.
     * @param {String} targetCategoryId The id of the target category.
     * @param {String} type the link type
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryLink}
     */
    this.getCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID = function(catalogId, categoryId, targetCatalogId, targetCategoryId, type, opts) {
      return this.getCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo(catalogId, categoryId, targetCatalogId, targetCategoryId, type, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves category product assignment information.    Expands that can be applied for the get request    product_base - String  product_images - String - to fetch image groups specified for the given product  product_all_images - String - to fetch image groups specified for the given product plus images for its variants and variation groups  
     * @param {String} catalogId The catalog of the assignment.
     * @param {String} categoryId The id of the requested category.
     * @param {String} productId The id (SKU) of the requested assigned product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Array.<String>} opts.expand 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryProductAssignment} and HTTP response
     */
    this.getCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo = function(catalogId, categoryId, productId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalogsByIDCategoriesByIDProductsByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getCatalogsByIDCategoriesByIDProductsByID");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getCatalogsByIDCategoriesByIDProductsByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'product_id': productId
      };
      var queryParams = {
        'site_id': opts['siteId'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CategoryProductAssignment;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/products/{product_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves category product assignment information.    Expands that can be applied for the get request    product_base - String  product_images - String - to fetch image groups specified for the given product  product_all_images - String - to fetch image groups specified for the given product plus images for its variants and variation groups  
     * @param {String} catalogId The catalog of the assignment.
     * @param {String} categoryId The id of the requested category.
     * @param {String} productId The id (SKU) of the requested assigned product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {Array.<String>} opts.expand 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryProductAssignment}
     */
    this.getCatalogsByIDCategoriesByIDProductsByID = function(catalogId, categoryId, productId, opts) {
      return this.getCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo(catalogId, categoryId, productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read shared product options in a catalog.
     * @param {String} catalogId The id of the catalog.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {String} opts.currency 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOptions} and HTTP response
     */
    this.getCatalogsByIDSharedProductOptionsWithHttpInfo = function(catalogId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalogsByIDSharedProductOptions");
      }

      var pathParams = {
        'catalog_id': catalogId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOptions;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Read shared product options in a catalog.
     * @param {String} catalogId The id of the catalog.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {String} opts.currency 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOptions}
     */
    this.getCatalogsByIDSharedProductOptions = function(catalogId, opts) {
      return this.getCatalogsByIDSharedProductOptionsWithHttpInfo(catalogId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a shared product option in a catalog.
     * @param {String} catalogId The id of the catalog.
     * @param {String} id The id of the shared product option.
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOption} and HTTP response
     */
    this.getCatalogsByIDSharedProductOptionsByIDWithHttpInfo = function(catalogId, id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalogsByIDSharedProductOptionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCatalogsByIDSharedProductOptionsByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      var queryParams = {
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOption;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Read a shared product option in a catalog.
     * @param {String} catalogId The id of the catalog.
     * @param {String} id The id of the shared product option.
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOption}
     */
    this.getCatalogsByIDSharedProductOptionsByID = function(catalogId, id, opts) {
      return this.getCatalogsByIDSharedProductOptionsByIDWithHttpInfo(catalogId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read shared product option values of a shared product option in a catalog.
     * @param {String} catalogId The id of the catalog.
     * @param {String} optionId The id of the shared product option.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOptionValues} and HTTP response
     */
    this.getCatalogsByIDSharedProductOptionsByIDValuesWithHttpInfo = function(catalogId, optionId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalogsByIDSharedProductOptionsByIDValues");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling getCatalogsByIDSharedProductOptionsByIDValues");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'option_id': optionId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOptionValues;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{option_id}/values', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Read shared product option values of a shared product option in a catalog.
     * @param {String} catalogId The id of the catalog.
     * @param {String} optionId The id of the shared product option.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOptionValues}
     */
    this.getCatalogsByIDSharedProductOptionsByIDValues = function(catalogId, optionId, opts) {
      return this.getCatalogsByIDSharedProductOptionsByIDValuesWithHttpInfo(catalogId, optionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a shared product option value of a shared product option in a catalog.
     * @param {String} catalogId The id of the catalog.
     * @param {String} optionId The id of the shared product option.
     * @param {String} id the id of shared product option value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOptionValue} and HTTP response
     */
    this.getCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo = function(catalogId, optionId, id) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalogsByIDSharedProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling getCatalogsByIDSharedProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCatalogsByIDSharedProductOptionsByIDValuesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'option_id': optionId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOptionValue;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{option_id}/values/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Read a shared product option value of a shared product option in a catalog.
     * @param {String} catalogId The id of the catalog.
     * @param {String} optionId The id of the shared product option.
     * @param {String} id the id of shared product option value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOptionValue}
     */
    this.getCatalogsByIDSharedProductOptionsByIDValuesByID = function(catalogId, optionId, id) {
      return this.getCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo(catalogId, optionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reads variation attributes of a Domain.
     * @param {String} catalogId id of the catalog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttributes} and HTTP response
     */
    this.getCatalogsByIDSharedVariationAttributesWithHttpInfo = function(catalogId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalogsByIDSharedVariationAttributes");
      }

      var pathParams = {
        'catalog_id': catalogId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttributes;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reads variation attributes of a Domain.
     * @param {String} catalogId id of the catalog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttributes}
     */
    this.getCatalogsByIDSharedVariationAttributes = function(catalogId, opts) {
      return this.getCatalogsByIDSharedVariationAttributesWithHttpInfo(catalogId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get shared variation attribute information only for master Catalog.
     * @param {String} catalogId The id of the catalog.
     * @param {String} id The id of the requested variation attribute.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttribute} and HTTP response
     */
    this.getCatalogsByIDSharedVariationAttributesByIDWithHttpInfo = function(catalogId, id) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalogsByIDSharedVariationAttributesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCatalogsByIDSharedVariationAttributesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttribute;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get shared variation attribute information only for master Catalog.
     * @param {String} catalogId The id of the catalog.
     * @param {String} id The id of the requested variation attribute.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttribute}
     */
    this.getCatalogsByIDSharedVariationAttributesByID = function(catalogId, id) {
      return this.getCatalogsByIDSharedVariationAttributesByIDWithHttpInfo(catalogId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reads variation attribute values of a variation attribute of a catalog.
     * @param {String} catalogId id of the owning catalog.
     * @param {String} attributeId The variation attribute ID that contains the values.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttributeValues} and HTTP response
     */
    this.getCatalogsByIDSharedVariationAttributesByIDValuesWithHttpInfo = function(catalogId, attributeId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalogsByIDSharedVariationAttributesByIDValues");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling getCatalogsByIDSharedVariationAttributesByIDValues");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'attribute_id': attributeId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttributeValues;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{attribute_id}/values', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reads variation attribute values of a variation attribute of a catalog.
     * @param {String} catalogId id of the owning catalog.
     * @param {String} attributeId The variation attribute ID that contains the values.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttributeValues}
     */
    this.getCatalogsByIDSharedVariationAttributesByIDValues = function(catalogId, attributeId, opts) {
      return this.getCatalogsByIDSharedVariationAttributesByIDValuesWithHttpInfo(catalogId, attributeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get Shared Variation Attribute value information.
     * @param {String} catalogId The owning catalog ID.
     * @param {String} attributeId The variation attribute custom ID
     * @param {String} id The id of the variation attribute value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttributeValue} and HTTP response
     */
    this.getCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo = function(catalogId, attributeId, id) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalogsByIDSharedVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling getCatalogsByIDSharedVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCatalogsByIDSharedVariationAttributesByIDValuesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'attribute_id': attributeId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttributeValue;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{attribute_id}/values/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get Shared Variation Attribute value information.
     * @param {String} catalogId The owning catalog ID.
     * @param {String} attributeId The variation attribute custom ID
     * @param {String} id The id of the variation attribute value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttributeValue}
     */
    this.getCatalogsByIDSharedVariationAttributesByIDValuesByID = function(catalogId, attributeId, id) {
      return this.getCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo(catalogId, attributeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the catalog with the specified information.
     * @param {String} catalogId The id of the requested catalog.
     * @param {module:model/Catalog} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Catalog} and HTTP response
     */
    this.patchCatalogsByIDWithHttpInfo = function(catalogId, body) {
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling patchCatalogsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCatalogsByID");
      }

      var pathParams = {
        'catalog_id': catalogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Catalog;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the catalog with the specified information.
     * @param {String} catalogId The id of the requested catalog.
     * @param {module:model/Catalog} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Catalog}
     */
    this.patchCatalogsByID = function(catalogId, body) {
      return this.patchCatalogsByIDWithHttpInfo(catalogId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a catalog category using the information provided.
     * @param {String} catalogId The id of the catalog.
     * @param {String} categoryId The id of the category
     * @param {module:model/Category} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Category} and HTTP response
     */
    this.patchCatalogsByIDCategoriesByIDWithHttpInfo = function(catalogId, categoryId, body) {
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling patchCatalogsByIDCategoriesByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling patchCatalogsByIDCategoriesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCatalogsByIDCategoriesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Category;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a catalog category using the information provided.
     * @param {String} catalogId The id of the catalog.
     * @param {String} categoryId The id of the category
     * @param {module:model/Category} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Category}
     */
    this.patchCatalogsByIDCategoriesByID = function(catalogId, categoryId, body) {
      return this.patchCatalogsByIDCategoriesByIDWithHttpInfo(catalogId, categoryId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the category link with the specified information.
     * @param {String} catalogId The id of the source catalog.
     * @param {String} categoryId The id of the source category.
     * @param {String} targetCatalogId The id of the target catalog.
     * @param {String} targetCategoryId The id of the target category.
     * @param {String} type the link type
     * @param {module:model/CategoryLink} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryLink} and HTTP response
     */
    this.patchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo = function(catalogId, categoryId, targetCatalogId, targetCategoryId, type, body) {
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling patchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling patchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'targetCatalogId' is set
      if (targetCatalogId === undefined || targetCatalogId === null) {
        throw new Error("Missing the required parameter 'targetCatalogId' when calling patchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'targetCategoryId' is set
      if (targetCategoryId === undefined || targetCategoryId === null) {
        throw new Error("Missing the required parameter 'targetCategoryId' when calling patchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling patchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'target_catalog_id': targetCatalogId,
        'target_category_id': targetCategoryId,
        'type': type
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CategoryLink;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/category_links/{target_catalog_id}/{target_category_id}/{type}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the category link with the specified information.
     * @param {String} catalogId The id of the source catalog.
     * @param {String} categoryId The id of the source category.
     * @param {String} targetCatalogId The id of the target catalog.
     * @param {String} targetCategoryId The id of the target category.
     * @param {String} type the link type
     * @param {module:model/CategoryLink} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryLink}
     */
    this.patchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID = function(catalogId, categoryId, targetCatalogId, targetCategoryId, type, body) {
      return this.patchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo(catalogId, categoryId, targetCatalogId, targetCategoryId, type, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the category product assignment with the specified information, such as position.    As the assigned position n is a normalized target position, we'll make sure that the product is assigned  to a position so that the order of positions are maintained.    For example, if we have products A, B, C, D at positions 1, 2, 3, 4 and update product A with new position 3,   the end result is B, C, A, D with order of positions 1, 2, 3, 4. If we then update product C to no position,  the end result is B, A, D, C with order of positions 1, 2, 3, null.   If there are n existing positioned assignment, updating product to position >= n will end with new assignment with position such that the order of positions is maintained.
     * @param {String} catalogId The id of the requested catalog to which the product is assigned.
     * @param {String} categoryId The id of the requested category to which the product is assigned.
     * @param {String} productId The id (SKU) of the requested assigned product.
     * @param {module:model/CategoryProductAssignment} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryProductAssignment} and HTTP response
     */
    this.patchCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo = function(catalogId, categoryId, productId, body) {
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling patchCatalogsByIDCategoriesByIDProductsByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling patchCatalogsByIDCategoriesByIDProductsByID");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling patchCatalogsByIDCategoriesByIDProductsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCatalogsByIDCategoriesByIDProductsByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'product_id': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CategoryProductAssignment;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/products/{product_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the category product assignment with the specified information, such as position.    As the assigned position n is a normalized target position, we'll make sure that the product is assigned  to a position so that the order of positions are maintained.    For example, if we have products A, B, C, D at positions 1, 2, 3, 4 and update product A with new position 3,   the end result is B, C, A, D with order of positions 1, 2, 3, 4. If we then update product C to no position,  the end result is B, A, D, C with order of positions 1, 2, 3, null.   If there are n existing positioned assignment, updating product to position >= n will end with new assignment with position such that the order of positions is maintained.
     * @param {String} catalogId The id of the requested catalog to which the product is assigned.
     * @param {String} categoryId The id of the requested category to which the product is assigned.
     * @param {String} productId The id (SKU) of the requested assigned product.
     * @param {module:model/CategoryProductAssignment} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryProductAssignment}
     */
    this.patchCatalogsByIDCategoriesByIDProductsByID = function(catalogId, categoryId, productId, body) {
      return this.patchCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo(catalogId, categoryId, productId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a shared product option with the information provided.
     * @param {String} catalogId The id of the catalog.
     * @param {String} id The id of the shared product option.
     * @param {module:model/ProductOption} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOption} and HTTP response
     */
    this.patchCatalogsByIDSharedProductOptionsByIDWithHttpInfo = function(catalogId, id, body) {
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling patchCatalogsByIDSharedProductOptionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchCatalogsByIDSharedProductOptionsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCatalogsByIDSharedProductOptionsByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOption;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a shared product option with the information provided.
     * @param {String} catalogId The id of the catalog.
     * @param {String} id The id of the shared product option.
     * @param {module:model/ProductOption} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOption}
     */
    this.patchCatalogsByIDSharedProductOptionsByID = function(catalogId, id, body) {
      return this.patchCatalogsByIDSharedProductOptionsByIDWithHttpInfo(catalogId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a shared product option value with the information provided.
     * @param {String} catalogId The id of the catalog.
     * @param {String} optionId The id of the shared product option.
     * @param {String} id The id of the shared product option value.
     * @param {module:model/ProductOptionValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOptionValue} and HTTP response
     */
    this.patchCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo = function(catalogId, optionId, id, body) {
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling patchCatalogsByIDSharedProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling patchCatalogsByIDSharedProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchCatalogsByIDSharedProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCatalogsByIDSharedProductOptionsByIDValuesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'option_id': optionId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOptionValue;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{option_id}/values/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a shared product option value with the information provided.
     * @param {String} catalogId The id of the catalog.
     * @param {String} optionId The id of the shared product option.
     * @param {String} id The id of the shared product option value.
     * @param {module:model/ProductOptionValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOptionValue}
     */
    this.patchCatalogsByIDSharedProductOptionsByIDValuesByID = function(catalogId, optionId, id, body) {
      return this.patchCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo(catalogId, optionId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the variation attribute with the specified information.     name  slicing  
     * @param {String} catalogId The id of the catalog.
     * @param {String} id The id of the requested variation attribute.
     * @param {module:model/VariationAttribute} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttribute} and HTTP response
     */
    this.patchCatalogsByIDSharedVariationAttributesByIDWithHttpInfo = function(catalogId, id, body) {
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling patchCatalogsByIDSharedVariationAttributesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchCatalogsByIDSharedVariationAttributesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCatalogsByIDSharedVariationAttributesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttribute;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the variation attribute with the specified information.     name  slicing  
     * @param {String} catalogId The id of the catalog.
     * @param {String} id The id of the requested variation attribute.
     * @param {module:model/VariationAttribute} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttribute}
     */
    this.patchCatalogsByIDSharedVariationAttributesByID = function(catalogId, id, body) {
      return this.patchCatalogsByIDSharedVariationAttributesByIDWithHttpInfo(catalogId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the variation attribute value of a variation attribute of a catalog.
     * @param {String} catalogId The id of the catalog.
     * @param {String} attributeId The id of the requested variation attribute.
     * @param {String} id The id of the variation value.
     * @param {module:model/VariationAttributeValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttributeValue} and HTTP response
     */
    this.patchCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo = function(catalogId, attributeId, id, body) {
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling patchCatalogsByIDSharedVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling patchCatalogsByIDSharedVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchCatalogsByIDSharedVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCatalogsByIDSharedVariationAttributesByIDValuesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'attribute_id': attributeId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttributeValue;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{attribute_id}/values/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the variation attribute value of a variation attribute of a catalog.
     * @param {String} catalogId The id of the catalog.
     * @param {String} attributeId The id of the requested variation attribute.
     * @param {String} id The id of the variation value.
     * @param {module:model/VariationAttributeValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttributeValue}
     */
    this.patchCatalogsByIDSharedVariationAttributesByIDValuesByID = function(catalogId, attributeId, id, body) {
      return this.patchCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo(catalogId, attributeId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for category product assignments.    The query attribute specifies a complex query that can be used to narrow down the search. This is the list  of searchable attributes:    product_id - String  product_name - String  online_flag - Boolean   searchable - Boolean   valid_from - DateTime   valid_to - DateTime   creation_date - DateTime      Sortable Fields:    product_id - String  product_name - String  position - Double  creation_date - DateTime      Expansions that can be applied for the search request:    product_base - String - This expand will enable retrieval of the following basic Product information:   product_images - String - to fetch preview image and image groups specified for the given product  product_all_images - String - to fetch preview image and image groups specified for the product plus images for its variants and variation groups  product_variations - String to fetch variations related information, version 17.8+  product_availability - String to fetch availability related information, version 17.8+  product_categories - String to fetch category related information, version 17.8+  product_prices - String to fetch prices related information, version 17.8+  product_options - String to fetch options related information, version 17.8+  product_all - String to fetch all expanded information, version 17.8+        brand      ean       link    long_description       manufacturer_name       manufacturer_sku    name       page_description       page_keywords       page_title       searchable     short_description       type       unit       upc     
     * @param {String} catalogId The id of the catalog.
     * @param {String} categoryId The id of the category.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {module:model/CategoryProductAssignmentSearchRequest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryProductAssignmentSearchResult} and HTTP response
     */
    this.postCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchWithHttpInfo = function(catalogId, categoryId, opts) {
      opts = opts || {};
      var postBody = opts['body'];
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling postCatalogsByIDCategoriesByIDCategoryProductAssignmentSearch");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling postCatalogsByIDCategoriesByIDCategoryProductAssignmentSearch");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId
      };
      var queryParams = {
        'site_id': opts['siteId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CategoryProductAssignmentSearchResult;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/category_product_assignment_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for category product assignments.    The query attribute specifies a complex query that can be used to narrow down the search. This is the list  of searchable attributes:    product_id - String  product_name - String  online_flag - Boolean   searchable - Boolean   valid_from - DateTime   valid_to - DateTime   creation_date - DateTime      Sortable Fields:    product_id - String  product_name - String  position - Double  creation_date - DateTime      Expansions that can be applied for the search request:    product_base - String - This expand will enable retrieval of the following basic Product information:   product_images - String - to fetch preview image and image groups specified for the given product  product_all_images - String - to fetch preview image and image groups specified for the product plus images for its variants and variation groups  product_variations - String to fetch variations related information, version 17.8+  product_availability - String to fetch availability related information, version 17.8+  product_categories - String to fetch category related information, version 17.8+  product_prices - String to fetch prices related information, version 17.8+  product_options - String to fetch options related information, version 17.8+  product_all - String to fetch all expanded information, version 17.8+        brand      ean       link    long_description       manufacturer_name       manufacturer_sku    name       page_description       page_keywords       page_title       searchable     short_description       type       unit       upc     
     * @param {String} catalogId The id of the catalog.
     * @param {String} categoryId The id of the category.
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {module:model/CategoryProductAssignmentSearchRequest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryProductAssignmentSearchResult}
     */
    this.postCatalogsByIDCategoriesByIDCategoryProductAssignmentSearch = function(catalogId, categoryId, opts) {
      return this.postCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchWithHttpInfo(catalogId, categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for catalog categories in the scope of catalog  By default, the server also returns the first level of subcategories,   but you can specify another level by setting the levels parameter.    Please note, using a large value for levels may cause performance    issues in case of a large and deep category tree.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  name - String  description - String  creation_date - DateTime  online - Boolean  parent_category_id - String     The output of the query can also be sorted. These are the list of sortable attributes:    id - String  name - String  description - String  creation_date - DateTime  online - Boolean   position - Double   
     * @param {String} catalogId The id of the catalog.
     * @param {module:model/SearchRequest} body 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.levels 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategorySearchResult} and HTTP response
     */
    this.postCatalogsByIDCategorySearchWithHttpInfo = function(catalogId, body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling postCatalogsByIDCategorySearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCatalogsByIDCategorySearch");
      }

      var pathParams = {
        'catalog_id': catalogId
      };
      var queryParams = {
        'levels': opts['levels'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CategorySearchResult;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/category_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for catalog categories in the scope of catalog  By default, the server also returns the first level of subcategories,   but you can specify another level by setting the levels parameter.    Please note, using a large value for levels may cause performance    issues in case of a large and deep category tree.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  name - String  description - String  creation_date - DateTime  online - Boolean  parent_category_id - String     The output of the query can also be sorted. These are the list of sortable attributes:    id - String  name - String  description - String  creation_date - DateTime  online - Boolean   position - Double   
     * @param {String} catalogId The id of the catalog.
     * @param {module:model/SearchRequest} body 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.levels 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategorySearchResult}
     */
    this.postCatalogsByIDCategorySearch = function(catalogId, body, opts) {
      return this.postCatalogsByIDCategorySearchWithHttpInfo(catalogId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a catalog category using the information provided.
     * @param {String} catalogId The id of the catalog.
     * @param {String} categoryId The id of the category to be created
     * @param {module:model/Category} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Category} and HTTP response
     */
    this.putCatalogsByIDCategoriesByIDWithHttpInfo = function(catalogId, categoryId, body) {
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling putCatalogsByIDCategoriesByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling putCatalogsByIDCategoriesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCatalogsByIDCategoriesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Category;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a catalog category using the information provided.
     * @param {String} catalogId The id of the catalog.
     * @param {String} categoryId The id of the category to be created
     * @param {module:model/Category} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Category}
     */
    this.putCatalogsByIDCategoriesByID = function(catalogId, categoryId, body) {
      return this.putCatalogsByIDCategoriesByIDWithHttpInfo(catalogId, categoryId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a category link using the information provided. If a category link with the same unique identifier,  it will be updated with the new position.
     * @param {String} catalogId The id of the source catalog.
     * @param {String} categoryId The id of the source category.
     * @param {String} targetCatalogId The id of the target catalog.
     * @param {String} targetCategoryId The id of the target category.
     * @param {String} type the link type
     * @param {module:model/CategoryLink} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryLink} and HTTP response
     */
    this.putCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo = function(catalogId, categoryId, targetCatalogId, targetCategoryId, type, body) {
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling putCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling putCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'targetCatalogId' is set
      if (targetCatalogId === undefined || targetCatalogId === null) {
        throw new Error("Missing the required parameter 'targetCatalogId' when calling putCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'targetCategoryId' is set
      if (targetCategoryId === undefined || targetCategoryId === null) {
        throw new Error("Missing the required parameter 'targetCategoryId' when calling putCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling putCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'target_catalog_id': targetCatalogId,
        'target_category_id': targetCategoryId,
        'type': type
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CategoryLink;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/category_links/{target_catalog_id}/{target_category_id}/{type}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a category link using the information provided. If a category link with the same unique identifier,  it will be updated with the new position.
     * @param {String} catalogId The id of the source catalog.
     * @param {String} categoryId The id of the source category.
     * @param {String} targetCatalogId The id of the target catalog.
     * @param {String} targetCategoryId The id of the target category.
     * @param {String} type the link type
     * @param {module:model/CategoryLink} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryLink}
     */
    this.putCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID = function(catalogId, categoryId, targetCatalogId, targetCategoryId, type, body) {
      return this.putCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo(catalogId, categoryId, targetCatalogId, targetCategoryId, type, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a category product assignment using the information provided;     As the assigned position n is a normalized target position, we'll make sure that the product is assigned  to a position so that the order of positions are maintained.     For example, product A, B, C at position 1, 2, 3. product D is assigned to  position 2, the end result is A, D, B, C with order of positions 1, 2, 3, 4;    If there are n existing positioned assignment, assigning a new product to position >= n+1 will end  with new assignment with position n+1.
     * @param {String} catalogId The id of the requested catalog to which to assign the product.
     * @param {String} categoryId The id of the requested category to which to assign the product.
     * @param {String} productId The id (SKU) of the requested product to assign.
     * @param {Object} opts Optional parameters
     * @param {module:model/CategoryProductAssignment} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryProductAssignment} and HTTP response
     */
    this.putCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo = function(catalogId, categoryId, productId, opts) {
      opts = opts || {};
      var postBody = opts['body'];
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling putCatalogsByIDCategoriesByIDProductsByID");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling putCatalogsByIDCategoriesByIDProductsByID");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling putCatalogsByIDCategoriesByIDProductsByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'product_id': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CategoryProductAssignment;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/products/{product_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a category product assignment using the information provided;     As the assigned position n is a normalized target position, we'll make sure that the product is assigned  to a position so that the order of positions are maintained.     For example, product A, B, C at position 1, 2, 3. product D is assigned to  position 2, the end result is A, D, B, C with order of positions 1, 2, 3, 4;    If there are n existing positioned assignment, assigning a new product to position >= n+1 will end  with new assignment with position n+1.
     * @param {String} catalogId The id of the requested catalog to which to assign the product.
     * @param {String} categoryId The id of the requested category to which to assign the product.
     * @param {String} productId The id (SKU) of the requested product to assign.
     * @param {Object} opts Optional parameters
     * @param {module:model/CategoryProductAssignment} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryProductAssignment}
     */
    this.putCatalogsByIDCategoriesByIDProductsByID = function(catalogId, categoryId, productId, opts) {
      return this.putCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo(catalogId, categoryId, productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a shared product option using the information provided.
     * @param {String} catalogId The id of the catalog.
     * @param {String} id The id of the shared product option.
     * @param {module:model/ProductOption} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOption} and HTTP response
     */
    this.putCatalogsByIDSharedProductOptionsByIDWithHttpInfo = function(catalogId, id, body) {
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling putCatalogsByIDSharedProductOptionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putCatalogsByIDSharedProductOptionsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCatalogsByIDSharedProductOptionsByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOption;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a shared product option using the information provided.
     * @param {String} catalogId The id of the catalog.
     * @param {String} id The id of the shared product option.
     * @param {module:model/ProductOption} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOption}
     */
    this.putCatalogsByIDSharedProductOptionsByID = function(catalogId, id, body) {
      return this.putCatalogsByIDSharedProductOptionsByIDWithHttpInfo(catalogId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a shared product option value using the information provided.
     * @param {String} catalogId The id of the catalog.
     * @param {String} optionId The id of the shared product option.
     * @param {String} id The id of the shared product option value.
     * @param {module:model/ProductOptionValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductOptionValue} and HTTP response
     */
    this.putCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo = function(catalogId, optionId, id, body) {
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling putCatalogsByIDSharedProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling putCatalogsByIDSharedProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putCatalogsByIDSharedProductOptionsByIDValuesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCatalogsByIDSharedProductOptionsByIDValuesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'option_id': optionId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductOptionValue;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{option_id}/values/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a shared product option value using the information provided.
     * @param {String} catalogId The id of the catalog.
     * @param {String} optionId The id of the shared product option.
     * @param {String} id The id of the shared product option value.
     * @param {module:model/ProductOptionValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductOptionValue}
     */
    this.putCatalogsByIDSharedProductOptionsByIDValuesByID = function(catalogId, optionId, id, body) {
      return this.putCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo(catalogId, optionId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a variation attribute using the information provided.
     * @param {String} catalogId The id of the catalog.
     * @param {String} id The id of the variation attribute to create.
     * @param {module:model/VariationAttribute} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttribute} and HTTP response
     */
    this.putCatalogsByIDSharedVariationAttributesByIDWithHttpInfo = function(catalogId, id, body) {
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling putCatalogsByIDSharedVariationAttributesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putCatalogsByIDSharedVariationAttributesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCatalogsByIDSharedVariationAttributesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttribute;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a variation attribute using the information provided.
     * @param {String} catalogId The id of the catalog.
     * @param {String} id The id of the variation attribute to create.
     * @param {module:model/VariationAttribute} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttribute}
     */
    this.putCatalogsByIDSharedVariationAttributesByID = function(catalogId, id, body) {
      return this.putCatalogsByIDSharedVariationAttributesByIDWithHttpInfo(catalogId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to create a Shared Variation Attribute value.
     * @param {String} catalogId The owning catalog ID.
     * @param {String} attributeId The variation attribute ID
     * @param {String} id The id of the variation attribute value
     * @param {module:model/VariationAttributeValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VariationAttributeValue} and HTTP response
     */
    this.putCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo = function(catalogId, attributeId, id, body) {
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling putCatalogsByIDSharedVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling putCatalogsByIDSharedVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putCatalogsByIDSharedVariationAttributesByIDValuesByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCatalogsByIDSharedVariationAttributesByIDValuesByID");
      }

      var pathParams = {
        'catalog_id': catalogId,
        'attribute_id': attributeId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = VariationAttributeValue;
      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{attribute_id}/values/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to create a Shared Variation Attribute value.
     * @param {String} catalogId The owning catalog ID.
     * @param {String} attributeId The variation attribute ID
     * @param {String} id The id of the variation attribute value
     * @param {module:model/VariationAttributeValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VariationAttributeValue}
     */
    this.putCatalogsByIDSharedVariationAttributesByIDValuesByID = function(catalogId, attributeId, id, body) {
      return this.putCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo(catalogId, attributeId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
