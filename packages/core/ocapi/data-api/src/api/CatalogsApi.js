/**
 * Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Catalog from '../models/Catalog';
import Catalogs from '../models/Catalogs';
import Categories from '../models/Categories';
import Category from '../models/Category';
import CategoryLink from '../models/CategoryLink';
import CategoryLinks from '../models/CategoryLinks';
import CategoryProductAssignment from '../models/CategoryProductAssignment';
import CategoryProductAssignmentSearchRequest from '../models/CategoryProductAssignmentSearchRequest';
import CategoryProductAssignmentSearchResult from '../models/CategoryProductAssignmentSearchResult';
import CategorySearchResult from '../models/CategorySearchResult';
import ProductOption from '../models/ProductOption';
import ProductOptionValue from '../models/ProductOptionValue';
import ProductOptionValues from '../models/ProductOptionValues';
import ProductOptions from '../models/ProductOptions';
import SearchRequest from '../models/SearchRequest';
import VariationAttribute from '../models/VariationAttribute';
import VariationAttributeValue from '../models/VariationAttributeValue';
import VariationAttributeValues from '../models/VariationAttributeValues';
import VariationAttributes from '../models/VariationAttributes';

/**
* Catalogs service.
* @module api/CatalogsApi
* @version 20.8
*/
export default class CatalogsApi {

    /**
    * Constructs a new CatalogsApi. 
    * @alias module:api/CatalogsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Deletes the category by catalog ID and category ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCatalogsByIDCategoriesByIDWithHttpInfo(catalogId, categoryId) {
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the category by catalog ID and category ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCatalogsByIDCategoriesByID(catalogId, categoryId) {
      return this.deleteCatalogsByIDCategoriesByIDWithHttpInfo(catalogId, categoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the category link by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo(catalogId, categoryId, targetCatalogId, targetCategoryId, type) {
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'target_catalog_id': targetCatalogId,
        'target_category_id': targetCategoryId,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/category_links/{target_catalog_id}/{target_category_id}/{type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the category link by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID(catalogId, categoryId, targetCatalogId, targetCategoryId, type) {
      return this.deleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo(catalogId, categoryId, targetCatalogId, targetCategoryId, type)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a category product assignment;      For example, if we have products A, B, C at positions 1, 2, 7.5 and delete assignment for product B,   this will end up the products A, B, C at positions 1, null, 7.5.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo(catalogId, categoryId, productId) {
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/products/{product_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a category product assignment;      For example, if we have products A, B, C at positions 1, 2, 7.5 and delete assignment for product B,   this will end up the products A, B, C at positions 1, null, 7.5.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCatalogsByIDCategoriesByIDProductsByID(catalogId, categoryId, productId) {
      return this.deleteCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo(catalogId, categoryId, productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a shared product option by ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCatalogsByIDSharedProductOptionsByIDWithHttpInfo(catalogId, id) {
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes a shared product option by ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCatalogsByIDSharedProductOptionsByID(catalogId, id) {
      return this.deleteCatalogsByIDSharedProductOptionsByIDWithHttpInfo(catalogId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a shared product option value by ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo(catalogId, optionId, id) {
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'option_id': optionId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{option_id}/values/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes a shared product option value by ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCatalogsByIDSharedProductOptionsByIDValuesByID(catalogId, optionId, id) {
      return this.deleteCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo(catalogId, optionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the variation attribute by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCatalogsByIDSharedVariationAttributesByIDWithHttpInfo(catalogId, id) {
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the variation attribute by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCatalogsByIDSharedVariationAttributesByID(catalogId, id) {
      return this.deleteCatalogsByIDSharedVariationAttributesByIDWithHttpInfo(catalogId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the variation attribute value of a variation attribute bound to a catalog
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo(catalogId, attributeId, id) {
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'attribute_id': attributeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{attribute_id}/values/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the variation attribute value of a variation attribute bound to a catalog
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCatalogsByIDSharedVariationAttributesByIDValuesByID(catalogId, attributeId, id) {
      return this.deleteCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo(catalogId, attributeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the catalogs with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Catalogs} and HTTP response
     */
    getCatalogsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Catalogs;

      return this.apiClient.callApi(
        '/catalogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get all the catalogs with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Catalogs}
     */
    getCatalogs(opts) {
      return this.getCatalogsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets catalog information by catalog Id.    Expansion \&quot;stats\&quot; can be used to retrieved some expensive statistic data, such as assigned_product_count and owned_product_count.  Example: /s/-/dw/data/v99_9/catalogs/my-catalog?expand&#x3D;stats
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Catalog} and HTTP response
     */
    getCatalogsByIDWithHttpInfo(catalogId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId
      };
      let queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv'),
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Catalog;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets catalog information by catalog Id.    Expansion \&quot;stats\&quot; can be used to retrieved some expensive statistic data, such as assigned_product_count and owned_product_count.  Example: /s/-/dw/data/v99_9/catalogs/my-catalog?expand&#x3D;stats
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Catalog}
     */
    getCatalogsByID(catalogId, opts) {
      return this.getCatalogsByIDWithHttpInfo(catalogId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the categories with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Categories} and HTTP response
     */
    getCatalogsByIDCategoriesWithHttpInfo(catalogId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Categories;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get all the categories with no filtering.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Categories}
     */
    getCatalogsByIDCategories(catalogId, opts) {
      return this.getCatalogsByIDCategoriesWithHttpInfo(catalogId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to read an existing category within a catalog. By default, the server  also returns the first level of sub-categories, but you can specify another level by setting the levels  parameter. Please note, using a large value for levels may cause performance   issues in case of a large and deep category tree.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Category} and HTTP response
     */
    getCatalogsByIDCategoriesByIDWithHttpInfo(catalogId, categoryId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId
      };
      let queryParams = {
        'levels': opts['levels'],
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Category;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to read an existing category within a catalog. By default, the server  also returns the first level of sub-categories, but you can specify another level by setting the levels  parameter. Please note, using a large value for levels may cause performance   issues in case of a large and deep category tree.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Category}
     */
    getCatalogsByIDCategoriesByID(catalogId, categoryId, opts) {
      return this.getCatalogsByIDCategoriesByIDWithHttpInfo(catalogId, categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get a set of outgoing category links in a given catalog category, sorted by position.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CategoryLinks} and HTTP response
     */
    getCatalogsByIDCategoriesByIDCategoryLinksWithHttpInfo(catalogId, categoryId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CategoryLinks;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/category_links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get a set of outgoing category links in a given catalog category, sorted by position.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CategoryLinks}
     */
    getCatalogsByIDCategoriesByIDCategoryLinks(catalogId, categoryId, opts) {
      return this.getCatalogsByIDCategoriesByIDCategoryLinksWithHttpInfo(catalogId, categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get category link information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CategoryLink} and HTTP response
     */
    getCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo(catalogId, categoryId, targetCatalogId, targetCategoryId, type, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'target_catalog_id': targetCatalogId,
        'target_category_id': targetCategoryId,
        'type': type
      };
      let queryParams = {
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CategoryLink;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/category_links/{target_catalog_id}/{target_category_id}/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get category link information.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CategoryLink}
     */
    getCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID(catalogId, categoryId, targetCatalogId, targetCategoryId, type, opts) {
      return this.getCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo(catalogId, categoryId, targetCatalogId, targetCategoryId, type, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves category product assignment information.    Expands that can be applied for the get request    product_base - String  product_images - String - to fetch image groups specified for the given product  product_all_images - String - to fetch image groups specified for the given product plus images for its variants and variation groups  
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CategoryProductAssignment} and HTTP response
     */
    getCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo(catalogId, categoryId, productId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'product_id': productId
      };
      let queryParams = {
        'site_id': opts['siteId'],
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv'),
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CategoryProductAssignment;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/products/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves category product assignment information.    Expands that can be applied for the get request    product_base - String  product_images - String - to fetch image groups specified for the given product  product_all_images - String - to fetch image groups specified for the given product plus images for its variants and variation groups  
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CategoryProductAssignment}
     */
    getCatalogsByIDCategoriesByIDProductsByID(catalogId, categoryId, productId, opts) {
      return this.getCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo(catalogId, categoryId, productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read shared product options in a catalog.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOptions} and HTTP response
     */
    getCatalogsByIDSharedProductOptionsWithHttpInfo(catalogId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
        'currency': opts['currency']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOptions;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read shared product options in a catalog.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOptions}
     */
    getCatalogsByIDSharedProductOptions(catalogId, opts) {
      return this.getCatalogsByIDSharedProductOptionsWithHttpInfo(catalogId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a shared product option in a catalog.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOption} and HTTP response
     */
    getCatalogsByIDSharedProductOptionsByIDWithHttpInfo(catalogId, id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      let queryParams = {
        'currency': opts['currency']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOption;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read a shared product option in a catalog.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOption}
     */
    getCatalogsByIDSharedProductOptionsByID(catalogId, id, opts) {
      return this.getCatalogsByIDSharedProductOptionsByIDWithHttpInfo(catalogId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read shared product option values of a shared product option in a catalog.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOptionValues} and HTTP response
     */
    getCatalogsByIDSharedProductOptionsByIDValuesWithHttpInfo(catalogId, optionId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'option_id': optionId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOptionValues;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{option_id}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read shared product option values of a shared product option in a catalog.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOptionValues}
     */
    getCatalogsByIDSharedProductOptionsByIDValues(catalogId, optionId, opts) {
      return this.getCatalogsByIDSharedProductOptionsByIDValuesWithHttpInfo(catalogId, optionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a shared product option value of a shared product option in a catalog.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOptionValue} and HTTP response
     */
    getCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo(catalogId, optionId, id) {
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'option_id': optionId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOptionValue;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{option_id}/values/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read a shared product option value of a shared product option in a catalog.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOptionValue}
     */
    getCatalogsByIDSharedProductOptionsByIDValuesByID(catalogId, optionId, id) {
      return this.getCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo(catalogId, optionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reads variation attributes of a Domain.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttributes} and HTTP response
     */
    getCatalogsByIDSharedVariationAttributesWithHttpInfo(catalogId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttributes;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reads variation attributes of a Domain.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttributes}
     */
    getCatalogsByIDSharedVariationAttributes(catalogId, opts) {
      return this.getCatalogsByIDSharedVariationAttributesWithHttpInfo(catalogId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get shared variation attribute information only for master Catalog.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttribute} and HTTP response
     */
    getCatalogsByIDSharedVariationAttributesByIDWithHttpInfo(catalogId, id) {
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttribute;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get shared variation attribute information only for master Catalog.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttribute}
     */
    getCatalogsByIDSharedVariationAttributesByID(catalogId, id) {
      return this.getCatalogsByIDSharedVariationAttributesByIDWithHttpInfo(catalogId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reads variation attribute values of a variation attribute of a catalog.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttributeValues} and HTTP response
     */
    getCatalogsByIDSharedVariationAttributesByIDValuesWithHttpInfo(catalogId, attributeId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'attribute_id': attributeId
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttributeValues;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{attribute_id}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reads variation attribute values of a variation attribute of a catalog.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttributeValues}
     */
    getCatalogsByIDSharedVariationAttributesByIDValues(catalogId, attributeId, opts) {
      return this.getCatalogsByIDSharedVariationAttributesByIDValuesWithHttpInfo(catalogId, attributeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get Shared Variation Attribute value information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttributeValue} and HTTP response
     */
    getCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo(catalogId, attributeId, id) {
      let postBody = null;

      let pathParams = {
        'catalog_id': catalogId,
        'attribute_id': attributeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttributeValue;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{attribute_id}/values/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to get Shared Variation Attribute value information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttributeValue}
     */
    getCatalogsByIDSharedVariationAttributesByIDValuesByID(catalogId, attributeId, id) {
      return this.getCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo(catalogId, attributeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the catalog with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Catalog} and HTTP response
     */
    patchCatalogsByIDWithHttpInfo(body, catalogId) {
      let postBody = body;

      let pathParams = {
        'catalog_id': catalogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Catalog;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the catalog with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Catalog}
     */
    patchCatalogsByID(body, catalogId) {
      return this.patchCatalogsByIDWithHttpInfo(body, catalogId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a catalog category using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Category} and HTTP response
     */
    patchCatalogsByIDCategoriesByIDWithHttpInfo(body, catalogId, categoryId) {
      let postBody = body;

      let pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Category;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates a catalog category using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Category}
     */
    patchCatalogsByIDCategoriesByID(body, catalogId, categoryId) {
      return this.patchCatalogsByIDCategoriesByIDWithHttpInfo(body, catalogId, categoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the category link with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CategoryLink} and HTTP response
     */
    patchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo(body, catalogId, categoryId, targetCatalogId, targetCategoryId, type) {
      let postBody = body;

      let pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'target_catalog_id': targetCatalogId,
        'target_category_id': targetCategoryId,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CategoryLink;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/category_links/{target_catalog_id}/{target_category_id}/{type}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the category link with the specified information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CategoryLink}
     */
    patchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID(body, catalogId, categoryId, targetCatalogId, targetCategoryId, type) {
      return this.patchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo(body, catalogId, categoryId, targetCatalogId, targetCategoryId, type)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the category product assignment with the specified information, such as position.    As the assigned position n is a normalized target position, we&#x27;ll make sure that the product is assigned  to a position so that the order of positions are maintained.    For example, if we have products A, B, C, D at positions 1, 2, 3, 4 and update product A with new position 3,   the end result is B, C, A, D with order of positions 1, 2, 3, 4. If we then update product C to no position,  the end result is B, A, D, C with order of positions 1, 2, 3, null.   If there are n existing positioned assignment, updating product to position &gt;&#x3D; n will end with new assignment with position such that the order of positions is maintained.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CategoryProductAssignment} and HTTP response
     */
    patchCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo(body, catalogId, categoryId, productId) {
      let postBody = body;

      let pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CategoryProductAssignment;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/products/{product_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the category product assignment with the specified information, such as position.    As the assigned position n is a normalized target position, we&#x27;ll make sure that the product is assigned  to a position so that the order of positions are maintained.    For example, if we have products A, B, C, D at positions 1, 2, 3, 4 and update product A with new position 3,   the end result is B, C, A, D with order of positions 1, 2, 3, 4. If we then update product C to no position,  the end result is B, A, D, C with order of positions 1, 2, 3, null.   If there are n existing positioned assignment, updating product to position &gt;&#x3D; n will end with new assignment with position such that the order of positions is maintained.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CategoryProductAssignment}
     */
    patchCatalogsByIDCategoriesByIDProductsByID(body, catalogId, categoryId, productId) {
      return this.patchCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo(body, catalogId, categoryId, productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a shared product option with the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOption} and HTTP response
     */
    patchCatalogsByIDSharedProductOptionsByIDWithHttpInfo(body, catalogId, id) {
      let postBody = body;

      let pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOption;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates a shared product option with the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOption}
     */
    patchCatalogsByIDSharedProductOptionsByID(body, catalogId, id) {
      return this.patchCatalogsByIDSharedProductOptionsByIDWithHttpInfo(body, catalogId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a shared product option value with the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOptionValue} and HTTP response
     */
    patchCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo(body, catalogId, optionId, id) {
      let postBody = body;

      let pathParams = {
        'catalog_id': catalogId,
        'option_id': optionId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOptionValue;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{option_id}/values/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates a shared product option value with the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOptionValue}
     */
    patchCatalogsByIDSharedProductOptionsByIDValuesByID(body, catalogId, optionId, id) {
      return this.patchCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo(body, catalogId, optionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the variation attribute with the specified information.     name  slicing  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttribute} and HTTP response
     */
    patchCatalogsByIDSharedVariationAttributesByIDWithHttpInfo(body, catalogId, id) {
      let postBody = body;

      let pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttribute;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the variation attribute with the specified information.     name  slicing  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttribute}
     */
    patchCatalogsByIDSharedVariationAttributesByID(body, catalogId, id) {
      return this.patchCatalogsByIDSharedVariationAttributesByIDWithHttpInfo(body, catalogId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the variation attribute value of a variation attribute of a catalog.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttributeValue} and HTTP response
     */
    patchCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo(body, catalogId, attributeId, id) {
      let postBody = body;

      let pathParams = {
        'catalog_id': catalogId,
        'attribute_id': attributeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttributeValue;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{attribute_id}/values/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the variation attribute value of a variation attribute of a catalog.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttributeValue}
     */
    patchCatalogsByIDSharedVariationAttributesByIDValuesByID(body, catalogId, attributeId, id) {
      return this.patchCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo(body, catalogId, attributeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for category product assignments.    The query attribute specifies a complex query that can be used to narrow down the search. This is the list  of searchable attributes:    product_id - String  product_name - String  online_flag - Boolean   searchable - Boolean   valid_from - DateTime   valid_to - DateTime   creation_date - DateTime      Sortable Fields:    product_id - String  product_name - String  position - Double  creation_date - DateTime      Expansions that can be applied for the search request:    product_base - String - This expand will enable retrieval of the following basic Product information:   product_images - String - to fetch preview image and image groups specified for the given product  product_all_images - String - to fetch preview image and image groups specified for the product plus images for its variants and variation groups  product_variations - String to fetch variations related information, version 17.8+  product_availability - String to fetch availability related information, version 17.8+  product_categories - String to fetch category related information, version 17.8+  product_prices - String to fetch prices related information, version 17.8+  product_options - String to fetch options related information, version 17.8+  product_all - String to fetch all expanded information, version 17.8+        brand      ean       link    long_description       manufacturer_name       manufacturer_sku    name       page_description       page_keywords       page_title       searchable     short_description       type       unit       upc     
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CategoryProductAssignmentSearchResult} and HTTP response
     */
    postCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchWithHttpInfo(catalogId, categoryId, opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId
      };
      let queryParams = {
        'site_id': opts['siteId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CategoryProductAssignmentSearchResult;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/category_product_assignment_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for category product assignments.    The query attribute specifies a complex query that can be used to narrow down the search. This is the list  of searchable attributes:    product_id - String  product_name - String  online_flag - Boolean   searchable - Boolean   valid_from - DateTime   valid_to - DateTime   creation_date - DateTime      Sortable Fields:    product_id - String  product_name - String  position - Double  creation_date - DateTime      Expansions that can be applied for the search request:    product_base - String - This expand will enable retrieval of the following basic Product information:   product_images - String - to fetch preview image and image groups specified for the given product  product_all_images - String - to fetch preview image and image groups specified for the product plus images for its variants and variation groups  product_variations - String to fetch variations related information, version 17.8+  product_availability - String to fetch availability related information, version 17.8+  product_categories - String to fetch category related information, version 17.8+  product_prices - String to fetch prices related information, version 17.8+  product_options - String to fetch options related information, version 17.8+  product_all - String to fetch all expanded information, version 17.8+        brand      ean       link    long_description       manufacturer_name       manufacturer_sku    name       page_description       page_keywords       page_title       searchable     short_description       type       unit       upc     
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CategoryProductAssignmentSearchResult}
     */
    postCatalogsByIDCategoriesByIDCategoryProductAssignmentSearch(catalogId, categoryId, opts) {
      return this.postCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchWithHttpInfo(catalogId, categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for catalog categories in the scope of catalog  By default, the server also returns the first level of subcategories,   but you can specify another level by setting the levels parameter.    Please note, using a large value for levels may cause performance    issues in case of a large and deep category tree.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  name - String  description - String  creation_date - DateTime  online - Boolean  parent_category_id - String     The output of the query can also be sorted. These are the list of sortable attributes:    id - String  name - String  description - String  creation_date - DateTime  online - Boolean   position - Double   
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CategorySearchResult} and HTTP response
     */
    postCatalogsByIDCategorySearchWithHttpInfo(body, catalogId, opts) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'catalog_id': catalogId
      };
      let queryParams = {
        'levels': opts['levels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CategorySearchResult;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/category_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for catalog categories in the scope of catalog  By default, the server also returns the first level of subcategories,   but you can specify another level by setting the levels parameter.    Please note, using a large value for levels may cause performance    issues in case of a large and deep category tree.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  name - String  description - String  creation_date - DateTime  online - Boolean  parent_category_id - String     The output of the query can also be sorted. These are the list of sortable attributes:    id - String  name - String  description - String  creation_date - DateTime  online - Boolean   position - Double   
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CategorySearchResult}
     */
    postCatalogsByIDCategorySearch(body, catalogId, opts) {
      return this.postCatalogsByIDCategorySearchWithHttpInfo(body, catalogId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a catalog category using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Category} and HTTP response
     */
    putCatalogsByIDCategoriesByIDWithHttpInfo(body, catalogId, categoryId) {
      let postBody = body;

      let pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = Category;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a catalog category using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Category}
     */
    putCatalogsByIDCategoriesByID(body, catalogId, categoryId) {
      return this.putCatalogsByIDCategoriesByIDWithHttpInfo(body, catalogId, categoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a category link using the information provided. If a category link with the same unique identifier,  it will be updated with the new position.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CategoryLink} and HTTP response
     */
    putCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo(body, catalogId, categoryId, targetCatalogId, targetCategoryId, type) {
      let postBody = body;

      let pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'target_catalog_id': targetCatalogId,
        'target_category_id': targetCategoryId,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CategoryLink;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/category_links/{target_catalog_id}/{target_category_id}/{type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a category link using the information provided. If a category link with the same unique identifier,  it will be updated with the new position.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CategoryLink}
     */
    putCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID(body, catalogId, categoryId, targetCatalogId, targetCategoryId, type) {
      return this.putCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDWithHttpInfo(body, catalogId, categoryId, targetCatalogId, targetCategoryId, type)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a category product assignment using the information provided;     As the assigned position n is a normalized target position, we&#x27;ll make sure that the product is assigned  to a position so that the order of positions are maintained.     For example, product A, B, C at position 1, 2, 3. product D is assigned to  position 2, the end result is A, D, B, C with order of positions 1, 2, 3, 4;    If there are n existing positioned assignment, assigning a new product to position &gt;&#x3D; n+1 will end  with new assignment with position n+1.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CategoryProductAssignment} and HTTP response
     */
    putCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo(catalogId, categoryId, productId, opts) {
      let postBody = opts['body'];

      let pathParams = {
        'catalog_id': catalogId,
        'category_id': categoryId,
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CategoryProductAssignment;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/categories/{category_id}/products/{product_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a category product assignment using the information provided;     As the assigned position n is a normalized target position, we&#x27;ll make sure that the product is assigned  to a position so that the order of positions are maintained.     For example, product A, B, C at position 1, 2, 3. product D is assigned to  position 2, the end result is A, D, B, C with order of positions 1, 2, 3, 4;    If there are n existing positioned assignment, assigning a new product to position &gt;&#x3D; n+1 will end  with new assignment with position n+1.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CategoryProductAssignment}
     */
    putCatalogsByIDCategoriesByIDProductsByID(catalogId, categoryId, productId, opts) {
      return this.putCatalogsByIDCategoriesByIDProductsByIDWithHttpInfo(catalogId, categoryId, productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a shared product option using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOption} and HTTP response
     */
    putCatalogsByIDSharedProductOptionsByIDWithHttpInfo(body, catalogId, id) {
      let postBody = body;

      let pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOption;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a shared product option using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOption}
     */
    putCatalogsByIDSharedProductOptionsByID(body, catalogId, id) {
      return this.putCatalogsByIDSharedProductOptionsByIDWithHttpInfo(body, catalogId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a shared product option value using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductOptionValue} and HTTP response
     */
    putCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo(body, catalogId, optionId, id) {
      let postBody = body;

      let pathParams = {
        'catalog_id': catalogId,
        'option_id': optionId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = ProductOptionValue;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_product_options/{option_id}/values/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a shared product option value using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductOptionValue}
     */
    putCatalogsByIDSharedProductOptionsByIDValuesByID(body, catalogId, optionId, id) {
      return this.putCatalogsByIDSharedProductOptionsByIDValuesByIDWithHttpInfo(body, catalogId, optionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a variation attribute using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttribute} and HTTP response
     */
    putCatalogsByIDSharedVariationAttributesByIDWithHttpInfo(body, catalogId, id) {
      let postBody = body;

      let pathParams = {
        'catalog_id': catalogId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttribute;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a variation attribute using the information provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttribute}
     */
    putCatalogsByIDSharedVariationAttributesByID(body, catalogId, id) {
      return this.putCatalogsByIDSharedVariationAttributesByIDWithHttpInfo(body, catalogId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to create a Shared Variation Attribute value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VariationAttributeValue} and HTTP response
     */
    putCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo(body, catalogId, attributeId, id) {
      let postBody = body;

      let pathParams = {
        'catalog_id': catalogId,
        'attribute_id': attributeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = VariationAttributeValue;

      return this.apiClient.callApi(
        '/catalogs/{catalog_id}/shared_variation_attributes/{attribute_id}/values/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Action to create a Shared Variation Attribute value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VariationAttributeValue}
     */
    putCatalogsByIDSharedVariationAttributesByIDValuesByID(body, catalogId, attributeId, id) {
      return this.putCatalogsByIDSharedVariationAttributesByIDValuesByIDWithHttpInfo(body, catalogId, attributeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
