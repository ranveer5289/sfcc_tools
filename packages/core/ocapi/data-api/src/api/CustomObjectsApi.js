/**
 * Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CustomObject from '../models/CustomObject';

/**
* CustomObjects service.
* @module api/CustomObjectsApi
* @version 20.8
*/
export default class CustomObjectsApi {

    /**
    * Constructs a new CustomObjectsApi. 
    * @alias module:api/CustomObjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Deletes a global Custom Object. If the Custom Object does not exist, this will do nothing. Note that the customization scripts are only called, if the Custom Object does exist.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCustomObjectsByIDByIDWithHttpInfo(objectType, key) {
      let postBody = null;

      let pathParams = {
        'object_type': objectType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/custom_objects/{object_type}/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes a global Custom Object. If the Custom Object does not exist, this will do nothing. Note that the customization scripts are only called, if the Custom Object does exist.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCustomObjectsByIDByID(objectType, key) {
      return this.deleteCustomObjectsByIDByIDWithHttpInfo(objectType, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reads a global Custom Object with a given object type ID and a value for the key attribute of the object which represents its unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomObject} and HTTP response
     */
    getCustomObjectsByIDByIDWithHttpInfo(objectType, key) {
      let postBody = null;

      let pathParams = {
        'object_type': objectType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomObject;

      return this.apiClient.callApi(
        '/custom_objects/{object_type}/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reads a global Custom Object with a given object type ID and a value for the key attribute of the object which represents its unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomObject}
     */
    getCustomObjectsByIDByID(objectType, key) {
      return this.getCustomObjectsByIDByIDWithHttpInfo(objectType, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a global Custom Object with information from request body. Note that only mentioned attributes will be updated and the key attribute is ignored. All other attributes will be left unattended.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomObject} and HTTP response
     */
    patchCustomObjectsByIDByIDWithHttpInfo(body, objectType, key) {
      let postBody = body;

      let pathParams = {
        'object_type': objectType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomObject;

      return this.apiClient.callApi(
        '/custom_objects/{object_type}/{key}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates a global Custom Object with information from request body. Note that only mentioned attributes will be updated and the key attribute is ignored. All other attributes will be left unattended.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomObject}
     */
    patchCustomObjectsByIDByID(body, objectType, key) {
      return this.patchCustomObjectsByIDByIDWithHttpInfo(body, objectType, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a global Custom Object from request body. Note that an existing global Custom Object with the same key will be overwritten by this action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomObject} and HTTP response
     */
    putCustomObjectsByIDByIDWithHttpInfo(objectType, key, opts) {
      let postBody = opts['body'];

      let pathParams = {
        'object_type': objectType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CustomObject;

      return this.apiClient.callApi(
        '/custom_objects/{object_type}/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a global Custom Object from request body. Note that an existing global Custom Object with the same key will be overwritten by this action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomObject}
     */
    putCustomObjectsByIDByID(objectType, key, opts) {
      return this.putCustomObjectsByIDByIDWithHttpInfo(objectType, key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
