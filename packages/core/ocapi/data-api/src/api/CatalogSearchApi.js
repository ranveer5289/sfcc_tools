/**
 * Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CatalogSearchResult from '../models/CatalogSearchResult';
import SearchRequest from '../models/SearchRequest';

/**
* CatalogSearch service.
* @module api/CatalogSearchApi
* @version 20.8
*/
export default class CatalogSearchApi {

    /**
    * Constructs a new CatalogSearchApi. 
    * @alias module:api/CatalogSearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Searches for catalogs.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  name - String  description - String  creation_date - DateTime      There are two additional fields that can be used as search filters. They are not attributes in CatalogWO object,   but can be used as filters to query catalogs based on site assignments.    is_master_catalog - Boolean  is_storefront_catalog - Boolean      On using is_master_catalog in the search query, catalogs without any site assignments are returned.   On using is_storefront_catalog in the search query, catalogs with one or more site assignments are returned.    The output of the query can also be sorted. These are the list of sortable attributes:    id - String  name - String  description - String  creation_date - DateTime  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CatalogSearchResult} and HTTP response
     */
    postCatalogSearchWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_application'];
      let contentTypes = ['application/json', 'text/xml', 'application/xml'];
      let accepts = ['application/json', 'text/xml', 'application/xml'];
      let returnType = CatalogSearchResult;

      return this.apiClient.callApi(
        '/catalog_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Searches for catalogs.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  name - String  description - String  creation_date - DateTime      There are two additional fields that can be used as search filters. They are not attributes in CatalogWO object,   but can be used as filters to query catalogs based on site assignments.    is_master_catalog - Boolean  is_storefront_catalog - Boolean      On using is_master_catalog in the search query, catalogs without any site assignments are returned.   On using is_storefront_catalog in the search query, catalogs with one or more site assignments are returned.    The output of the query can also be sorted. These are the list of sortable attributes:    id - String  name - String  description - String  creation_date - DateTime  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CatalogSearchResult}
     */
    postCatalogSearch(body) {
      return this.postCatalogSearchWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
