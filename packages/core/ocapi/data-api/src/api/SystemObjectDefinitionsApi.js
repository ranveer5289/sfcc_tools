/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ObjectAttributeDefinition', 'model/ObjectAttributeDefinitionSearchResult', 'model/ObjectAttributeDefinitions', 'model/ObjectAttributeGroup', 'model/ObjectAttributeGroupSearchResult', 'model/ObjectAttributeGroups', 'model/ObjectTypeDefinition', 'model/ObjectTypeDefinitions', 'model/SearchRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ObjectAttributeDefinition'), require('../model/ObjectAttributeDefinitionSearchResult'), require('../model/ObjectAttributeDefinitions'), require('../model/ObjectAttributeGroup'), require('../model/ObjectAttributeGroupSearchResult'), require('../model/ObjectAttributeGroups'), require('../model/ObjectTypeDefinition'), require('../model/ObjectTypeDefinitions'), require('../model/SearchRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.SystemObjectDefinitionsApi = factory(root.DataApi.ApiClient, root.DataApi.ObjectAttributeDefinition, root.DataApi.ObjectAttributeDefinitionSearchResult, root.DataApi.ObjectAttributeDefinitions, root.DataApi.ObjectAttributeGroup, root.DataApi.ObjectAttributeGroupSearchResult, root.DataApi.ObjectAttributeGroups, root.DataApi.ObjectTypeDefinition, root.DataApi.ObjectTypeDefinitions, root.DataApi.SearchRequest);
  }
}(this, function(ApiClient, ObjectAttributeDefinition, ObjectAttributeDefinitionSearchResult, ObjectAttributeDefinitions, ObjectAttributeGroup, ObjectAttributeGroupSearchResult, ObjectAttributeGroups, ObjectTypeDefinition, ObjectTypeDefinitions, SearchRequest) {
  'use strict';

  /**
   * SystemObjectDefinitions service.
   * @module api/SystemObjectDefinitionsApi
   * @version 20.8
   */

  /**
   * Constructs a new SystemObjectDefinitionsApi. 
   * @alias module:api/SystemObjectDefinitionsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Deletes the attribute definition by ID
     * @param {String} objectType The metadata object that contains these definitions
     * @param {String} id Attribute definition id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSystemObjectDefinitionsByIDAttributeDefinitionsByIDWithHttpInfo = function(objectType, id) {
      var postBody = null;
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling deleteSystemObjectDefinitionsByIDAttributeDefinitionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSystemObjectDefinitionsByIDAttributeDefinitionsByID");
      }

      var pathParams = {
        'object_type': objectType,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/system_object_definitions/{object_type}/attribute_definitions/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the attribute definition by ID
     * @param {String} objectType The metadata object that contains these definitions
     * @param {String} id Attribute definition id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSystemObjectDefinitionsByIDAttributeDefinitionsByID = function(objectType, id) {
      return this.deleteSystemObjectDefinitionsByIDAttributeDefinitionsByIDWithHttpInfo(objectType, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the attribute group by ID
     * @param {String} objectType the object type id that contains this attribute gorup
     * @param {String} id One attribute group id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSystemObjectDefinitionsByIDAttributeGroupsByIDWithHttpInfo = function(objectType, id) {
      var postBody = null;
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling deleteSystemObjectDefinitionsByIDAttributeGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSystemObjectDefinitionsByIDAttributeGroupsByID");
      }

      var pathParams = {
        'object_type': objectType,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/system_object_definitions/{object_type}/attribute_groups/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the attribute group by ID
     * @param {String} objectType the object type id that contains this attribute gorup
     * @param {String} id One attribute group id to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSystemObjectDefinitionsByIDAttributeGroupsByID = function(objectType, id) {
      return this.deleteSystemObjectDefinitionsByIDAttributeGroupsByIDWithHttpInfo(objectType, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Un-assign an attribute definition from an attribute group.
     * @param {String} objectType The ID of the system object that contains the attribute definition and attribute group.
     * @param {String} groupId The ID of the attribute group.
     * @param {String} defId The ID of the attribute definition.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSystemObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByIDWithHttpInfo = function(objectType, groupId, defId) {
      var postBody = null;
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling deleteSystemObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByID");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteSystemObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByID");
      }
      // verify the required parameter 'defId' is set
      if (defId === undefined || defId === null) {
        throw new Error("Missing the required parameter 'defId' when calling deleteSystemObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByID");
      }

      var pathParams = {
        'object_type': objectType,
        'group_id': groupId,
        'def_id': defId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/system_object_definitions/{object_type}/attribute_groups/{group_id}/attribute_definitions/{def_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Un-assign an attribute definition from an attribute group.
     * @param {String} objectType The ID of the system object that contains the attribute definition and attribute group.
     * @param {String} groupId The ID of the attribute group.
     * @param {String} defId The ID of the attribute definition.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSystemObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByID = function(objectType, groupId, defId) {
      return this.deleteSystemObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByIDWithHttpInfo(objectType, groupId, defId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the system objects with no filtering.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Optional start index for retrieving the items from a given index (default 0).
     * @param {Number} opts.count Optional count for retrieving only a subset of the items (default is 25).
     * @param {String} opts.select The property selector.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectTypeDefinitions} and HTTP response
     */
    this.getSystemObjectDefinitionsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ObjectTypeDefinitions;
      return this.apiClient.callApi(
        '/system_object_definitions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the system objects with no filtering.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Optional start index for retrieving the items from a given index (default 0).
     * @param {Number} opts.count Optional count for retrieving only a subset of the items (default is 25).
     * @param {String} opts.select The property selector.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectTypeDefinitions}
     */
    this.getSystemObjectDefinitions = function(opts) {
      return this.getSystemObjectDefinitionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get system object information.
     * @param {String} objectType The id of the object type for the requested system object.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectTypeDefinition} and HTTP response
     */
    this.getSystemObjectDefinitionsByIDWithHttpInfo = function(objectType) {
      var postBody = null;
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling getSystemObjectDefinitionsByID");
      }

      var pathParams = {
        'object_type': objectType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ObjectTypeDefinition;
      return this.apiClient.callApi(
        '/system_object_definitions/{object_type}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get system object information.
     * @param {String} objectType The id of the object type for the requested system object.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectTypeDefinition}
     */
    this.getSystemObjectDefinitionsByID = function(objectType) {
      return this.getSystemObjectDefinitionsByIDWithHttpInfo(objectType)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the attribute definitions with no filtering.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectAttributeDefinitions} and HTTP response
     */
    this.getSystemObjectDefinitionsByIDAttributeDefinitionsWithHttpInfo = function(objectType, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling getSystemObjectDefinitionsByIDAttributeDefinitions");
      }

      var pathParams = {
        'object_type': objectType
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ObjectAttributeDefinitions;
      return this.apiClient.callApi(
        '/system_object_definitions/{object_type}/attribute_definitions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the attribute definitions with no filtering.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectAttributeDefinitions}
     */
    this.getSystemObjectDefinitionsByIDAttributeDefinitions = function(objectType, opts) {
      return this.getSystemObjectDefinitionsByIDAttributeDefinitionsWithHttpInfo(objectType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get attribute definition information.
     * @param {String} objectType The object type id that contains these definitions
     * @param {String} id The id of the requested attribute definition.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectAttributeDefinition} and HTTP response
     */
    this.getSystemObjectDefinitionsByIDAttributeDefinitionsByIDWithHttpInfo = function(objectType, id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling getSystemObjectDefinitionsByIDAttributeDefinitionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSystemObjectDefinitionsByIDAttributeDefinitionsByID");
      }

      var pathParams = {
        'object_type': objectType,
        'id': id
      };
      var queryParams = {
        'select': opts['select'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ObjectAttributeDefinition;
      return this.apiClient.callApi(
        '/system_object_definitions/{object_type}/attribute_definitions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get attribute definition information.
     * @param {String} objectType The object type id that contains these definitions
     * @param {String} id The id of the requested attribute definition.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectAttributeDefinition}
     */
    this.getSystemObjectDefinitionsByIDAttributeDefinitionsByID = function(objectType, id, opts) {
      return this.getSystemObjectDefinitionsByIDAttributeDefinitionsByIDWithHttpInfo(objectType, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get all the attribute groups with no filtering.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectAttributeGroups} and HTTP response
     */
    this.getSystemObjectDefinitionsByIDAttributeGroupsWithHttpInfo = function(objectType, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling getSystemObjectDefinitionsByIDAttributeGroups");
      }

      var pathParams = {
        'object_type': objectType
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'select': opts['select'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ObjectAttributeGroups;
      return this.apiClient.callApi(
        '/system_object_definitions/{object_type}/attribute_groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get all the attribute groups with no filtering.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectAttributeGroups}
     */
    this.getSystemObjectDefinitionsByIDAttributeGroups = function(objectType, opts) {
      return this.getSystemObjectDefinitionsByIDAttributeGroupsWithHttpInfo(objectType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Action to get attribute group information.
     * @param {String} objectType the object type id that contains this attribute group
     * @param {String} id The id of the requested attribute group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectAttributeGroup} and HTTP response
     */
    this.getSystemObjectDefinitionsByIDAttributeGroupsByIDWithHttpInfo = function(objectType, id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling getSystemObjectDefinitionsByIDAttributeGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSystemObjectDefinitionsByIDAttributeGroupsByID");
      }

      var pathParams = {
        'object_type': objectType,
        'id': id
      };
      var queryParams = {
        'select': opts['select'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ObjectAttributeGroup;
      return this.apiClient.callApi(
        '/system_object_definitions/{object_type}/attribute_groups/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Action to get attribute group information.
     * @param {String} objectType the object type id that contains this attribute group
     * @param {String} id The id of the requested attribute group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.select 
     * @param {Array.<String>} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectAttributeGroup}
     */
    this.getSystemObjectDefinitionsByIDAttributeGroupsByID = function(objectType, id, opts) {
      return this.getSystemObjectDefinitionsByIDAttributeGroupsByIDWithHttpInfo(objectType, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the attribute definition with the specified information. The request must include the If-Match header, which holds  the last known base-point information. The value of this header is an \"ETag\" representing the attribute definition state. If  the request does not contain an If-Match header with the current server customer \"ETag\", a 409 (IfMatchRequiredException)  fault is returned. If the If-Match header does not match the current server attribute definition \"ETag\", a 412 (InvalidIfMatchException)  fault is returned.
     * @param {String} objectType The object type id that contains these definitions
     * @param {String} id The id of the requested attribute definition.
     * @param {module:model/ObjectAttributeDefinition} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifMatch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectAttributeDefinition} and HTTP response
     */
    this.patchSystemObjectDefinitionsByIDAttributeDefinitionsByIDWithHttpInfo = function(objectType, id, body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling patchSystemObjectDefinitionsByIDAttributeDefinitionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchSystemObjectDefinitionsByIDAttributeDefinitionsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSystemObjectDefinitionsByIDAttributeDefinitionsByID");
      }

      var pathParams = {
        'object_type': objectType,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Match': opts['ifMatch']
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ObjectAttributeDefinition;
      return this.apiClient.callApi(
        '/system_object_definitions/{object_type}/attribute_definitions/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the attribute definition with the specified information. The request must include the If-Match header, which holds  the last known base-point information. The value of this header is an \"ETag\" representing the attribute definition state. If  the request does not contain an If-Match header with the current server customer \"ETag\", a 409 (IfMatchRequiredException)  fault is returned. If the If-Match header does not match the current server attribute definition \"ETag\", a 412 (InvalidIfMatchException)  fault is returned.
     * @param {String} objectType The object type id that contains these definitions
     * @param {String} id The id of the requested attribute definition.
     * @param {module:model/ObjectAttributeDefinition} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifMatch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectAttributeDefinition}
     */
    this.patchSystemObjectDefinitionsByIDAttributeDefinitionsByID = function(objectType, id, body, opts) {
      return this.patchSystemObjectDefinitionsByIDAttributeDefinitionsByIDWithHttpInfo(objectType, id, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the attribute group with the specified information. The request must include the If-Match header, which holds  the last known base-point information. The value of this header is an \"ETag\" representing the attribute group state. If  the request does not contain an If-Match header with the current server customer \"ETag\", a 409 (IfMatchRequiredException)  fault is returned. If the If-Match header does not match the current server attribute group \"ETag\", a 412 (InvalidIfMatchException)  fault is returned.
     * @param {String} objectType the object type id that contains this attribute gorup
     * @param {String} id The id of the requested attribute group.
     * @param {module:model/ObjectAttributeGroup} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifMatch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectAttributeGroup} and HTTP response
     */
    this.patchSystemObjectDefinitionsByIDAttributeGroupsByIDWithHttpInfo = function(objectType, id, body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling patchSystemObjectDefinitionsByIDAttributeGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchSystemObjectDefinitionsByIDAttributeGroupsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchSystemObjectDefinitionsByIDAttributeGroupsByID");
      }

      var pathParams = {
        'object_type': objectType,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Match': opts['ifMatch']
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ObjectAttributeGroup;
      return this.apiClient.callApi(
        '/system_object_definitions/{object_type}/attribute_groups/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the attribute group with the specified information. The request must include the If-Match header, which holds  the last known base-point information. The value of this header is an \"ETag\" representing the attribute group state. If  the request does not contain an If-Match header with the current server customer \"ETag\", a 409 (IfMatchRequiredException)  fault is returned. If the If-Match header does not match the current server attribute group \"ETag\", a 412 (InvalidIfMatchException)  fault is returned.
     * @param {String} objectType the object type id that contains this attribute gorup
     * @param {String} id The id of the requested attribute group.
     * @param {module:model/ObjectAttributeGroup} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifMatch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectAttributeGroup}
     */
    this.patchSystemObjectDefinitionsByIDAttributeGroupsByID = function(objectType, id, body, opts) {
      return this.patchSystemObjectDefinitionsByIDAttributeGroupsByIDWithHttpInfo(objectType, id, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches the attribute definitions of the specified system object type.    The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:       id - String     display_name* - Localized String     description* - Localized String     key - boolean     mandatory - boolean     searchable - boolean     system - boolean     visible - boolean    Definition version:       localizable - boolean     site_specific - boolean     value_type - one of {string, int, double, text, html, date, image, boolean, money, quantity, datetime, email, password, set_of_string, set_of_int, set_of_double, enum_of_string, enum_of_int}    Group:       group - String     Only attributes in the same bucket can be joined using a disjunction (OR).  For instance, when joining localizable and description above, only a conjunction is allowed (AND), whereas display_name  and description can be joined using a disjunction because they are in the same bucket.  If an attribute  is used in a disjunction (OR) that violates this rule, an exception will be thrown.   * These attributes are not searchable or sortable for built in system attributes.  They work normally for non  system attributes.   Note that only searchable attributes can be used in sorting.
     * @param {String} objectType The object type id that contains these definitions
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectAttributeDefinitionSearchResult} and HTTP response
     */
    this.postSystemObjectDefinitionsByIDAttributeDefinitionSearchWithHttpInfo = function(objectType, body) {
      var postBody = body;
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling postSystemObjectDefinitionsByIDAttributeDefinitionSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSystemObjectDefinitionsByIDAttributeDefinitionSearch");
      }

      var pathParams = {
        'object_type': objectType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ObjectAttributeDefinitionSearchResult;
      return this.apiClient.callApi(
        '/system_object_definitions/{object_type}/attribute_definition_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches the attribute definitions of the specified system object type.    The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped  into different buckets.  These are the list of searchable attributes with their corresponding buckets:   Main:       id - String     display_name* - Localized String     description* - Localized String     key - boolean     mandatory - boolean     searchable - boolean     system - boolean     visible - boolean    Definition version:       localizable - boolean     site_specific - boolean     value_type - one of {string, int, double, text, html, date, image, boolean, money, quantity, datetime, email, password, set_of_string, set_of_int, set_of_double, enum_of_string, enum_of_int}    Group:       group - String     Only attributes in the same bucket can be joined using a disjunction (OR).  For instance, when joining localizable and description above, only a conjunction is allowed (AND), whereas display_name  and description can be joined using a disjunction because they are in the same bucket.  If an attribute  is used in a disjunction (OR) that violates this rule, an exception will be thrown.   * These attributes are not searchable or sortable for built in system attributes.  They work normally for non  system attributes.   Note that only searchable attributes can be used in sorting.
     * @param {String} objectType The object type id that contains these definitions
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectAttributeDefinitionSearchResult}
     */
    this.postSystemObjectDefinitionsByIDAttributeDefinitionSearch = function(objectType, body) {
      return this.postSystemObjectDefinitionsByIDAttributeDefinitionSearchWithHttpInfo(objectType, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Searches for attribute groups.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  display_name - Localized<String>  description - Localized<String>  position - Double  internal - Boolean     The output of the query can also be sorted. These are the list of sortable attributes:    id - String  display_name - Localized<String>  description - Localized<String>  position - Double  internal - Boolean  
     * @param {String} objectType 
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectAttributeGroupSearchResult} and HTTP response
     */
    this.postSystemObjectDefinitionsByIDAttributeGroupSearchWithHttpInfo = function(objectType, body) {
      var postBody = body;
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling postSystemObjectDefinitionsByIDAttributeGroupSearch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSystemObjectDefinitionsByIDAttributeGroupSearch");
      }

      var pathParams = {
        'object_type': objectType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ObjectAttributeGroupSearchResult;
      return this.apiClient.callApi(
        '/system_object_definitions/{object_type}/attribute_group_search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Searches for attribute groups.    The query attribute specifies a complex query that can be used to narrow down the search. These are the list  of searchable attributes:    id - String  display_name - Localized<String>  description - Localized<String>  position - Double  internal - Boolean     The output of the query can also be sorted. These are the list of sortable attributes:    id - String  display_name - Localized<String>  description - Localized<String>  position - Double  internal - Boolean  
     * @param {String} objectType 
     * @param {module:model/SearchRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectAttributeGroupSearchResult}
     */
    this.postSystemObjectDefinitionsByIDAttributeGroupSearch = function(objectType, body) {
      return this.postSystemObjectDefinitionsByIDAttributeGroupSearchWithHttpInfo(objectType, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a attribute definition using the information provided.
     * @param {String} objectType The metadata object that contains these definitions
     * @param {String} id The id of the attribute definition to create.
     * @param {module:model/ObjectAttributeDefinition} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xDwValidateExisting 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectAttributeDefinition} and HTTP response
     */
    this.putSystemObjectDefinitionsByIDAttributeDefinitionsByIDWithHttpInfo = function(objectType, id, body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling putSystemObjectDefinitionsByIDAttributeDefinitionsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putSystemObjectDefinitionsByIDAttributeDefinitionsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSystemObjectDefinitionsByIDAttributeDefinitionsByID");
      }

      var pathParams = {
        'object_type': objectType,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-dw-validate-existing': opts['xDwValidateExisting']
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ObjectAttributeDefinition;
      return this.apiClient.callApi(
        '/system_object_definitions/{object_type}/attribute_definitions/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a attribute definition using the information provided.
     * @param {String} objectType The metadata object that contains these definitions
     * @param {String} id The id of the attribute definition to create.
     * @param {module:model/ObjectAttributeDefinition} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xDwValidateExisting 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectAttributeDefinition}
     */
    this.putSystemObjectDefinitionsByIDAttributeDefinitionsByID = function(objectType, id, body, opts) {
      return this.putSystemObjectDefinitionsByIDAttributeDefinitionsByIDWithHttpInfo(objectType, id, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a attribute group using the information provided. If a attribute group with the same unique identifier, it will be deleted and a new one will be created unless the header x-dw-validate-existing=true is passed in with the request.
     * @param {String} objectType the object type id that contains this attribute gorup
     * @param {String} id The id of the attribute group to create.
     * @param {module:model/ObjectAttributeGroup} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xDwValidateExisting 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectAttributeGroup} and HTTP response
     */
    this.putSystemObjectDefinitionsByIDAttributeGroupsByIDWithHttpInfo = function(objectType, id, body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling putSystemObjectDefinitionsByIDAttributeGroupsByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putSystemObjectDefinitionsByIDAttributeGroupsByID");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSystemObjectDefinitionsByIDAttributeGroupsByID");
      }

      var pathParams = {
        'object_type': objectType,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-dw-validate-existing': opts['xDwValidateExisting']
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ObjectAttributeGroup;
      return this.apiClient.callApi(
        '/system_object_definitions/{object_type}/attribute_groups/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a attribute group using the information provided. If a attribute group with the same unique identifier, it will be deleted and a new one will be created unless the header x-dw-validate-existing=true is passed in with the request.
     * @param {String} objectType the object type id that contains this attribute gorup
     * @param {String} id The id of the attribute group to create.
     * @param {module:model/ObjectAttributeGroup} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xDwValidateExisting 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectAttributeGroup}
     */
    this.putSystemObjectDefinitionsByIDAttributeGroupsByID = function(objectType, id, body, opts) {
      return this.putSystemObjectDefinitionsByIDAttributeGroupsByIDWithHttpInfo(objectType, id, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Assign an attribute definition to an attribute group.
     * @param {String} objectType The ID of the system object that contains the attribute definition and attribute group.
     * @param {String} groupId The ID of the attribute group.
     * @param {String} defId The ID of the attribute definition.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.putSystemObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByIDWithHttpInfo = function(objectType, groupId, defId) {
      var postBody = null;
      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling putSystemObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByID");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling putSystemObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByID");
      }
      // verify the required parameter 'defId' is set
      if (defId === undefined || defId === null) {
        throw new Error("Missing the required parameter 'defId' when calling putSystemObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByID");
      }

      var pathParams = {
        'object_type': objectType,
        'group_id': groupId,
        'def_id': defId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/system_object_definitions/{object_type}/attribute_groups/{group_id}/attribute_definitions/{def_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Assign an attribute definition to an attribute group.
     * @param {String} objectType The ID of the system object that contains the attribute definition and attribute group.
     * @param {String} groupId The ID of the attribute group.
     * @param {String} defId The ID of the attribute definition.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.putSystemObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByID = function(objectType, groupId, defId) {
      return this.putSystemObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByIDWithHttpInfo(objectType, groupId, defId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
