/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Campaign', 'model/Schedule', 'model/SlotConfiguration'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Campaign'), require('./Schedule'), require('./SlotConfiguration'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.SlotConfigurationCampaignAssignment = factory(root.DataApi.ApiClient, root.DataApi.Campaign, root.DataApi.Schedule, root.DataApi.SlotConfiguration);
  }
}(this, function(ApiClient, Campaign, Schedule, SlotConfiguration) {
  'use strict';



  /**
   * The SlotConfigurationCampaignAssignment model module.
   * @module model/SlotConfigurationCampaignAssignment
   * @version 20.8
   */

  /**
   * Constructs a new <code>SlotConfigurationCampaignAssignment</code>.
   * Document representing a slot_configuration_campaign_assignment
   * @alias module:model/SlotConfigurationCampaignAssignment
   * @class
   * @param context {module:model/SlotConfigurationCampaignAssignment.ContextEnum} The slot context.
   * @param slotConfigurationId {String} The ID of the slot configuration.
   * @param slotId {String} The ID of the slot.
   */
  var exports = function(context, slotConfigurationId, slotId) {
    var _this = this;

    _this['context'] = context;
    _this['slot_configuration_id'] = slotConfigurationId;
    _this['slot_id'] = slotId;
  };

  /**
   * Constructs a <code>SlotConfigurationCampaignAssignment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SlotConfigurationCampaignAssignment} obj Optional instance to populate.
   * @return {module:model/SlotConfigurationCampaignAssignment} The populated <code>SlotConfigurationCampaignAssignment</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('campaign')) {
        obj['campaign'] = Campaign.constructFromObject(data['campaign']);
      }
      if (data.hasOwnProperty('campaign_id')) {
        obj['campaign_id'] = ApiClient.convertToType(data['campaign_id'], 'String');
      }
      if (data.hasOwnProperty('context')) {
        obj['context'] = ApiClient.convertToType(data['context'], 'String');
      }
      if (data.hasOwnProperty('customer_groups')) {
        obj['customer_groups'] = ApiClient.convertToType(data['customer_groups'], ['String']);
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('enabled')) {
        obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
      }
      if (data.hasOwnProperty('link')) {
        obj['link'] = ApiClient.convertToType(data['link'], 'String');
      }
      if (data.hasOwnProperty('rank')) {
        obj['rank'] = ApiClient.convertToType(data['rank'], 'Number');
      }
      if (data.hasOwnProperty('schedule')) {
        obj['schedule'] = Schedule.constructFromObject(data['schedule']);
      }
      if (data.hasOwnProperty('slot_configuration')) {
        obj['slot_configuration'] = SlotConfiguration.constructFromObject(data['slot_configuration']);
      }
      if (data.hasOwnProperty('slot_configuration_id')) {
        obj['slot_configuration_id'] = ApiClient.convertToType(data['slot_configuration_id'], 'String');
      }
      if (data.hasOwnProperty('slot_configuration_uuid')) {
        obj['slot_configuration_uuid'] = ApiClient.convertToType(data['slot_configuration_uuid'], 'String');
      }
      if (data.hasOwnProperty('slot_context_id')) {
        obj['slot_context_id'] = ApiClient.convertToType(data['slot_context_id'], 'String');
      }
      if (data.hasOwnProperty('slot_id')) {
        obj['slot_id'] = ApiClient.convertToType(data['slot_id'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/Campaign} campaign
   */
  exports.prototype['campaign'] = undefined;
  /**
   * The id of the campaign that has the slot configuration assigned to it.
   * @member {String} campaign_id
   */
  exports.prototype['campaign_id'] = undefined;
  /**
   * The slot context.
   * @member {module:model/SlotConfigurationCampaignAssignment.ContextEnum} context
   */
  exports.prototype['context'] = undefined;
  /**
   * The list of customer groups.
   * @member {Array.<String>} customer_groups
   */
  exports.prototype['customer_groups'] = undefined;
  /**
   * The description of the slot configuration.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * True if the assignment resource is enabled
   * @member {Boolean} enabled
   */
  exports.prototype['enabled'] = undefined;
  /**
   * The URL to the slot configuration-campaign assignment.
   * @member {String} link
   */
  exports.prototype['link'] = undefined;
  /**
   * The rank of the slot confiuration-campaign assignment.  This is different than the rank of the slot configuration.
   * @member {Number} rank
   */
  exports.prototype['rank'] = undefined;
  /**
   * @member {module:model/Schedule} schedule
   */
  exports.prototype['schedule'] = undefined;
  /**
   * @member {module:model/SlotConfiguration} slot_configuration
   */
  exports.prototype['slot_configuration'] = undefined;
  /**
   * The ID of the slot configuration.
   * @member {String} slot_configuration_id
   */
  exports.prototype['slot_configuration_id'] = undefined;
  /**
   * The UUID of the slot configuration.
   * @member {String} slot_configuration_uuid
   */
  exports.prototype['slot_configuration_uuid'] = undefined;
  /**
   * The ID of the slot's context, for example, the category ID for a slot with category context.
   * @member {String} slot_context_id
   */
  exports.prototype['slot_context_id'] = undefined;
  /**
   * The ID of the slot.
   * @member {String} slot_id
   */
  exports.prototype['slot_id'] = undefined;


  /**
   * Allowed values for the <code>context</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ContextEnum = {
    /**
     * value: "global"
     * @const
     */
    "global": "global",
    /**
     * value: "category"
     * @const
     */
    "category": "category",
    /**
     * value: "folder"
     * @const
     */
    "folder": "folder"  };


  return exports;
}));


