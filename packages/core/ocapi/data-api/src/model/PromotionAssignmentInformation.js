/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PromotionAbtestGroupAssignment', 'model/PromotionCampaignAssignment', 'model/Schedule'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./PromotionAbtestGroupAssignment'), require('./PromotionCampaignAssignment'), require('./Schedule'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.PromotionAssignmentInformation = factory(root.DataApi.ApiClient, root.DataApi.PromotionAbtestGroupAssignment, root.DataApi.PromotionCampaignAssignment, root.DataApi.Schedule);
  }
}(this, function(ApiClient, PromotionAbtestGroupAssignment, PromotionCampaignAssignment, Schedule) {
  'use strict';



  /**
   * The PromotionAssignmentInformation model module.
   * @module model/PromotionAssignmentInformation
   * @version 20.8
   */

  /**
   * Constructs a new <code>PromotionAssignmentInformation</code>.
   * @alias module:model/PromotionAssignmentInformation
   * @class
   */
  var exports = function() {
    var _this = this;

  };

  /**
   * Constructs a <code>PromotionAssignmentInformation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PromotionAssignmentInformation} obj Optional instance to populate.
   * @return {module:model/PromotionAssignmentInformation} The populated <code>PromotionAssignmentInformation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('abtest_id')) {
        obj['abtest_id'] = ApiClient.convertToType(data['abtest_id'], 'String');
      }
      if (data.hasOwnProperty('abtest_segment_id')) {
        obj['abtest_segment_id'] = ApiClient.convertToType(data['abtest_segment_id'], 'String');
      }
      if (data.hasOwnProperty('active')) {
        obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
      }
      if (data.hasOwnProperty('active_abtest_assignments')) {
        obj['active_abtest_assignments'] = ApiClient.convertToType(data['active_abtest_assignments'], [PromotionAbtestGroupAssignment]);
      }
      if (data.hasOwnProperty('active_campaign_assignments')) {
        obj['active_campaign_assignments'] = ApiClient.convertToType(data['active_campaign_assignments'], [PromotionCampaignAssignment]);
      }
      if (data.hasOwnProperty('campaign_id')) {
        obj['campaign_id'] = ApiClient.convertToType(data['campaign_id'], 'String');
      }
      if (data.hasOwnProperty('enabled')) {
        obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
      }
      if (data.hasOwnProperty('end_date')) {
        obj['end_date'] = ApiClient.convertToType(data['end_date'], 'Date');
      }
      if (data.hasOwnProperty('schedule')) {
        obj['schedule'] = Schedule.constructFromObject(data['schedule']);
      }
      if (data.hasOwnProperty('schedule_type')) {
        obj['schedule_type'] = ApiClient.convertToType(data['schedule_type'], 'String');
      }
      if (data.hasOwnProperty('start_date')) {
        obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
      }
      if (data.hasOwnProperty('upcoming_abtest_assignments')) {
        obj['upcoming_abtest_assignments'] = ApiClient.convertToType(data['upcoming_abtest_assignments'], [PromotionAbtestGroupAssignment]);
      }
      if (data.hasOwnProperty('upcoming_campaign_assignments')) {
        obj['upcoming_campaign_assignments'] = ApiClient.convertToType(data['upcoming_campaign_assignments'], [PromotionCampaignAssignment]);
      }
    }
    return obj;
  }

  /**
   * If there is only one assignment, and that assignment is an A/B test segment, the id of the A/B test the segment  belongs to. Otherwise, empty.
   * @member {String} abtest_id
   */
  exports.prototype['abtest_id'] = undefined;
  /**
   * If there is only one assignment, and that assignment is an A/B test segment, the id of the A/B test segment.  Otherwise, empty.
   * @member {String} abtest_segment_id
   */
  exports.prototype['abtest_segment_id'] = undefined;
  /**
   * true if the individual assignment or the multiple assignments are currently active.
   * @member {Boolean} active
   */
  exports.prototype['active'] = undefined;
  /**
   * A list of currently active A/B tests this is assigned to.
   * @member {Array.<module:model/PromotionAbtestGroupAssignment>} active_abtest_assignments
   */
  exports.prototype['active_abtest_assignments'] = undefined;
  /**
   * A list of currently active campaigns this is assigned to.
   * @member {Array.<module:model/PromotionCampaignAssignment>} active_campaign_assignments
   */
  exports.prototype['active_campaign_assignments'] = undefined;
  /**
   * If there is only one assignment, and that assignment is a campaign, the id of the campaign. Otherwise, empty.
   * @member {String} campaign_id
   */
  exports.prototype['campaign_id'] = undefined;
  /**
   * @member {Boolean} enabled
   */
  exports.prototype['enabled'] = undefined;
  /**
   * The end date of the container of the assignment (a Campaign or ABTest). If schedule_type is  schedule_type : \"multiple\" or schedule_type : \"none\", then then result will be null. Also, a null  date will also return null.
   * @member {Date} end_date
   */
  exports.prototype['end_date'] = undefined;
  /**
   * @member {module:model/Schedule} schedule
   */
  exports.prototype['schedule'] = undefined;
  /**
   * If there is only one active assignment, or no active assignments and one upcoming assignment, this is that type  of assignment (schedule_type : \"campaign\" or schedule_type : \"abtest\"). If there are no  assignments, it will be schedule_type : \"none\", otherwise, schedule_type : \"multiple\".
   * @member {module:model/PromotionAssignmentInformation.ScheduleTypeEnum} schedule_type
   */
  exports.prototype['schedule_type'] = undefined;
  /**
   * The start date of the container of the assignment (a Campaign or ABTest). If schedule_type is  schedule_type : \"multiple\" or schedule_type : \"none\", then then result will be null. Also, a null  date will also return null.
   * @member {Date} start_date
   */
  exports.prototype['start_date'] = undefined;
  /**
   * A list of upcoming A/B tests this is assigned to.
   * @member {Array.<module:model/PromotionAbtestGroupAssignment>} upcoming_abtest_assignments
   */
  exports.prototype['upcoming_abtest_assignments'] = undefined;
  /**
   * A list of upcoming campaigns this is assigned to.
   * @member {Array.<module:model/PromotionCampaignAssignment>} upcoming_campaign_assignments
   */
  exports.prototype['upcoming_campaign_assignments'] = undefined;


  /**
   * Allowed values for the <code>schedule_type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ScheduleTypeEnum = {
    /**
     * value: "none"
     * @const
     */
    "none": "none",
    /**
     * value: "campaign"
     * @const
     */
    "campaign": "campaign",
    /**
     * value: "abtest"
     * @const
     */
    "abtest": "abtest",
    /**
     * value: "multiple"
     * @const
     */
    "multiple": "multiple"  };


  return exports;
}));


