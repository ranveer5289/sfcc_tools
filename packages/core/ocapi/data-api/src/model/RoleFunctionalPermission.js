/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.RoleFunctionalPermission = factory(root.DataApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The RoleFunctionalPermission model module.
   * @module model/RoleFunctionalPermission
   * @version 20.8
   */

  /**
   * Constructs a new <code>RoleFunctionalPermission</code>.
   * Document representing a functional permission.
   * @alias module:model/RoleFunctionalPermission
   * @class
   * @param name {String} The name of the functional permission.
   * @param type {String} The permission type (\"functional\").
   */
  var exports = function(name, type) {
    var _this = this;

    _this['name'] = name;
    _this['type'] = type;
  };

  /**
   * Constructs a <code>RoleFunctionalPermission</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RoleFunctionalPermission} obj Optional instance to populate.
   * @return {module:model/RoleFunctionalPermission} The populated <code>RoleFunctionalPermission</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('value')) {
        obj['value'] = ApiClient.convertToType(data['value'], 'String');
      }
      if (data.hasOwnProperty('values')) {
        obj['values'] = ApiClient.convertToType(data['values'], {'String': 'String'});
      }
    }
    return obj;
  }

  /**
   * The name of the functional permission.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The permission type (\"functional\").
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The non domain specific value for the functional permission, e.g. ACCESS or READONLY.
   * @member {String} value
   */
  exports.prototype['value'] = undefined;
  /**
   * The map of value per domain for the functional permission, e.g. ACCESS or READONLY per domain name.
   * @member {Object.<String, String>} values
   */
  exports.prototype['values'] = undefined;



  return exports;
}));


