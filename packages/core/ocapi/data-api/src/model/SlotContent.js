/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MarkupText'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MarkupText'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.SlotContent = factory(root.DataApi.ApiClient, root.DataApi.MarkupText);
  }
}(this, function(ApiClient, MarkupText) {
  'use strict';



  /**
   * The SlotContent model module.
   * @module model/SlotContent
   * @version 20.8
   */

  /**
   * Constructs a new <code>SlotContent</code>.
   * Document representing the content type for a slot.
   * @alias module:model/SlotContent
   * @class
   * @param type {module:model/SlotContent.TypeEnum} The type of content in the slot.
   */
  var exports = function(type) {
    var _this = this;

    _this['type'] = type;
  };

  /**
   * Constructs a <code>SlotContent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SlotContent} obj Optional instance to populate.
   * @return {module:model/SlotContent} The populated <code>SlotContent</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('body')) {
        obj['body'] = ApiClient.convertToType(data['body'], {'String': MarkupText});
      }
      if (data.hasOwnProperty('category_ids')) {
        obj['category_ids'] = ApiClient.convertToType(data['category_ids'], ['String']);
      }
      if (data.hasOwnProperty('content_asset_ids')) {
        obj['content_asset_ids'] = ApiClient.convertToType(data['content_asset_ids'], ['String']);
      }
      if (data.hasOwnProperty('product_ids')) {
        obj['product_ids'] = ApiClient.convertToType(data['product_ids'], ['String']);
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
    }
    return obj;
  }

  /**
   * The HTML body (valid only for type 'html').
   * @member {Object.<String, module:model/MarkupText>} body
   */
  exports.prototype['body'] = undefined;
  /**
   * The category ids (valid only for type 'categories').
   * @member {Array.<String>} category_ids
   */
  exports.prototype['category_ids'] = undefined;
  /**
   * The content asset ids (valid only for type 'content_assets').
   * @member {Array.<String>} content_asset_ids
   */
  exports.prototype['content_asset_ids'] = undefined;
  /**
   * The product ids (valid only for type 'products').
   * @member {Array.<String>} product_ids
   */
  exports.prototype['product_ids'] = undefined;
  /**
   * The type of content in the slot.
   * @member {module:model/SlotContent.TypeEnum} type
   */
  exports.prototype['type'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "products"
     * @const
     */
    "products": "products",
    /**
     * value: "categories"
     * @const
     */
    "categories": "categories",
    /**
     * value: "content_assets"
     * @const
     */
    "content_assets": "content_assets",
    /**
     * value: "html"
     * @const
     */
    "html": "html",
    /**
     * value: "recommended_products"
     * @const
     */
    "recommended_products": "recommended_products"  };


  return exports;
}));


