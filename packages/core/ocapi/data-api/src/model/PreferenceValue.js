/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ObjectAttributeDefinition'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ObjectAttributeDefinition'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.PreferenceValue = factory(root.DataApi.ApiClient, root.DataApi.ObjectAttributeDefinition);
  }
}(this, function(ApiClient, ObjectAttributeDefinition) {
  'use strict';



  /**
   * The PreferenceValue model module.
   * @module model/PreferenceValue
   * @version 20.8
   */

  /**
   * Constructs a new <code>PreferenceValue</code>.
   * Represents a single preference value
   * @alias module:model/PreferenceValue
   * @class
   */
  var exports = function() {
    var _this = this;

  };

  /**
   * Constructs a <code>PreferenceValue</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PreferenceValue} obj Optional instance to populate.
   * @return {module:model/PreferenceValue} The populated <code>PreferenceValue</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('attribute_definition')) {
        obj['attribute_definition'] = ObjectAttributeDefinition.constructFromObject(data['attribute_definition']);
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], {'String': 'String'});
      }
      if (data.hasOwnProperty('display_name')) {
        obj['display_name'] = ApiClient.convertToType(data['display_name'], {'String': 'String'});
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('site_values')) {
        obj['site_values'] = ApiClient.convertToType(data['site_values'], {'String': Object});
      }
      if (data.hasOwnProperty('value_type')) {
        obj['value_type'] = ApiClient.convertToType(data['value_type'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/ObjectAttributeDefinition} attribute_definition
   */
  exports.prototype['attribute_definition'] = undefined;
  /**
   * Description of the attribute
   * @member {Object.<String, String>} description
   */
  exports.prototype['description'] = undefined;
  /**
   * Display name for the attribute
   * @member {Object.<String, String>} display_name
   */
  exports.prototype['display_name'] = undefined;
  /**
   * The id of the attribute
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The value of this attribute
   * @member {Object.<String, Object>} site_values
   */
  exports.prototype['site_values'] = undefined;
  /**
   * The type of this attribute.
   * @member {module:model/PreferenceValue.ValueTypeEnum} value_type
   */
  exports.prototype['value_type'] = undefined;


  /**
   * Allowed values for the <code>value_type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ValueTypeEnum = {
    /**
     * value: "string"
     * @const
     */
    "string": "string",
    /**
     * value: "int"
     * @const
     */
    "int": "int",
    /**
     * value: "double"
     * @const
     */
    "double": "double",
    /**
     * value: "text"
     * @const
     */
    "text": "text",
    /**
     * value: "html"
     * @const
     */
    "html": "html",
    /**
     * value: "date"
     * @const
     */
    "date": "date",
    /**
     * value: "image"
     * @const
     */
    "image": "image",
    /**
     * value: "boolean"
     * @const
     */
    "boolean": "boolean",
    /**
     * value: "money"
     * @const
     */
    "money": "money",
    /**
     * value: "quantity"
     * @const
     */
    "quantity": "quantity",
    /**
     * value: "datetime"
     * @const
     */
    "datetime": "datetime",
    /**
     * value: "email"
     * @const
     */
    "email": "email",
    /**
     * value: "password"
     * @const
     */
    "password": "password",
    /**
     * value: "set_of_string"
     * @const
     */
    "set_of_string": "set_of_string",
    /**
     * value: "set_of_int"
     * @const
     */
    "set_of_int": "set_of_int",
    /**
     * value: "set_of_double"
     * @const
     */
    "set_of_double": "set_of_double",
    /**
     * value: "enum_of_string"
     * @const
     */
    "enum_of_string": "enum_of_string",
    /**
     * value: "enum_of_int"
     * @const
     */
    "enum_of_int": "enum_of_int",
    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"  };


  return exports;
}));


