/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MenuAction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MenuAction'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.MenuItem = factory(root.DataApi.ApiClient, root.DataApi.MenuAction);
  }
}(this, function(ApiClient, MenuAction) {
  'use strict';



  /**
   * The MenuItem model module.
   * @module model/MenuItem
   * @version 20.8
   */

  /**
   * Constructs a new <code>MenuItem</code>.
   * Document representing a menu item.
   * @alias module:model/MenuItem
   * @class
   */
  var exports = function() {
    var _this = this;

  };

  /**
   * Constructs a <code>MenuItem</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MenuItem} obj Optional instance to populate.
   * @return {module:model/MenuItem} The populated <code>MenuItem</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('display_name')) {
        obj['display_name'] = ApiClient.convertToType(data['display_name'], {'String': 'String'});
      }
      if (data.hasOwnProperty('menu_actions')) {
        obj['menu_actions'] = ApiClient.convertToType(data['menu_actions'], [MenuAction]);
      }
      if (data.hasOwnProperty('module_type')) {
        obj['module_type'] = ApiClient.convertToType(data['module_type'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
    }
    return obj;
  }

  /**
   * The display name of the menu item.
   * @member {Object.<String, String>} display_name
   */
  exports.prototype['display_name'] = undefined;
  /**
   * The collection of available menu actions.
   * @member {Array.<module:model/MenuAction>} menu_actions
   */
  exports.prototype['menu_actions'] = undefined;
  /**
   * The module type of the menu item (BM or CC).
   * @member {String} module_type
   */
  exports.prototype['module_type'] = undefined;
  /**
   * The name of the menu item.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The permission type.
   * @member {String} type
   */
  exports.prototype['type'] = undefined;



  return exports;
}));


