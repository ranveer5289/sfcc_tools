/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AbTestGroup', 'model/AbTestSegment', 'model/AbTestTrigger'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AbTestGroup'), require('./AbTestSegment'), require('./AbTestTrigger'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.AbTest = factory(root.DataApi.ApiClient, root.DataApi.AbTestGroup, root.DataApi.AbTestSegment, root.DataApi.AbTestTrigger);
  }
}(this, function(ApiClient, AbTestGroup, AbTestSegment, AbTestTrigger) {
  'use strict';



  /**
   * The AbTest model module.
   * @module model/AbTest
   * @version 20.8
   */

  /**
   * Constructs a new <code>AbTest</code>.
   * The id of the A/B Test
   * @alias module:model/AbTest
   * @class
   */
  var exports = function() {
    var _this = this;

  };

  /**
   * Constructs a <code>AbTest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AbTest} obj Optional instance to populate.
   * @return {module:model/AbTest} The populated <code>AbTest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('customer_groups')) {
        obj['customer_groups'] = ApiClient.convertToType(data['customer_groups'], ['String']);
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('email_addresses')) {
        obj['email_addresses'] = ApiClient.convertToType(data['email_addresses'], ['String']);
      }
      if (data.hasOwnProperty('enabled')) {
        obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
      }
      if (data.hasOwnProperty('end_date')) {
        obj['end_date'] = ApiClient.convertToType(data['end_date'], 'Date');
      }
      if (data.hasOwnProperty('expiration_type')) {
        obj['expiration_type'] = ApiClient.convertToType(data['expiration_type'], 'String');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('key_metric_id')) {
        obj['key_metric_id'] = ApiClient.convertToType(data['key_metric_id'], 'String');
      }
      if (data.hasOwnProperty('link')) {
        obj['link'] = ApiClient.convertToType(data['link'], 'String');
      }
      if (data.hasOwnProperty('paused')) {
        obj['paused'] = ApiClient.convertToType(data['paused'], 'Boolean');
      }
      if (data.hasOwnProperty('segment_count')) {
        obj['segment_count'] = ApiClient.convertToType(data['segment_count'], 'Number');
      }
      if (data.hasOwnProperty('start_date')) {
        obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
      if (data.hasOwnProperty('tags')) {
        obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
      }
      if (data.hasOwnProperty('test_groups')) {
        obj['test_groups'] = ApiClient.convertToType(data['test_groups'], [AbTestGroup]);
      }
      if (data.hasOwnProperty('test_segments')) {
        obj['test_segments'] = ApiClient.convertToType(data['test_segments'], [AbTestSegment]);
      }
      if (data.hasOwnProperty('trigger')) {
        obj['trigger'] = AbTestTrigger.constructFromObject(data['trigger']);
      }
    }
    return obj;
  }

  /**
   * The list of customer group ids assigned to the A/B Test. Defaults to 'Everyone' if not specified on create
   * @member {Array.<String>} customer_groups
   */
  exports.prototype['customer_groups'] = undefined;
  /**
   * The optional description of the A/B Test
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * The optional list of email addresses to send A/B Test results
   * @member {Array.<String>} email_addresses
   */
  exports.prototype['email_addresses'] = undefined;
  /**
   * The flag representing the enabled state of the A/B Test. Defaults to false if not specified on create
   * @member {Boolean} enabled
   */
  exports.prototype['enabled'] = undefined;
  /**
   * The date that the A/B Test ends. Defaults to two weeks from creation date if both start and end dates are not specified on create
   * @member {Date} end_date
   */
  exports.prototype['end_date'] = undefined;
  /**
   * The participant expiration type of the A/B Test. Defaults to 'never' if not specified on create
   * @member {module:model/AbTest.ExpirationTypeEnum} expiration_type
   */
  exports.prototype['expiration_type'] = undefined;
  /**
   * The id of the A/B Test
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The key metric that is most important to the A/B Test, among the metrics collected. Defaults to 'Revenue' if not specified from test participant activity
   * @member {String} key_metric_id
   */
  exports.prototype['key_metric_id'] = undefined;
  /**
   * The URL to get the A/B test. This is a computed attribute and cannot be modified
   * @member {String} link
   */
  exports.prototype['link'] = undefined;
  /**
   * The flag representing the paused state of the A/B Test. Defaults to false if not specified on create
   * @member {Boolean} paused
   */
  exports.prototype['paused'] = undefined;
  /**
   * Segment count of A/B test. This is a computed attribute and cannot be modified
   * @member {Number} segment_count
   */
  exports.prototype['segment_count'] = undefined;
  /**
   * The date that the A/B Test begins. Defaults to a week from creation date if both start and end dates are not specified on create
   * @member {Date} start_date
   */
  exports.prototype['start_date'] = undefined;
  /**
   * Status of A/B test. This is a computed attribute and cannot be modified
   * @member {module:model/AbTest.StatusEnum} status
   */
  exports.prototype['status'] = undefined;
  /**
   * The optional list of tags to group similar A/B Tests so that they can be searched easily.
   * @member {Array.<String>} tags
   */
  exports.prototype['tags'] = undefined;
  /**
   * Test Groups created for an A/B Test. This is a read only attribute for now.
   * @member {Array.<module:model/AbTestGroup>} test_groups
   */
  exports.prototype['test_groups'] = undefined;
  /**
   * Test Segments created for an A/B Test. This is a read only attribute for now
   * @member {Array.<module:model/AbTestSegment>} test_segments
   */
  exports.prototype['test_segments'] = undefined;
  /**
   * @member {module:model/AbTestTrigger} trigger
   */
  exports.prototype['trigger'] = undefined;


  /**
   * Allowed values for the <code>expiration_type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ExpirationTypeEnum = {
    /**
     * value: "session"
     * @const
     */
    "session": "session",
    /**
     * value: "never"
     * @const
     */
    "never": "never"  };

  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "ended"
     * @const
     */
    "ended": "ended",
    /**
     * value: "planned"
     * @const
     */
    "planned": "planned",
    /**
     * value: "running"
     * @const
     */
    "running": "running"  };


  return exports;
}));


