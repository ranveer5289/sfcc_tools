/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.TermFilter = factory(root.DataApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The TermFilter model module.
   * @module model/TermFilter
   * @version 20.8
   */

  /**
   * Constructs a new <code>TermFilter</code>.
   * Document representing a term filter.  
   * @alias module:model/TermFilter
   * @class
   * @param field {String} The filter field.
   * @param operator {module:model/TermFilter.OperatorEnum} The operator to compare the field's values with the given ones.
   */
  var exports = function(field, operator) {
    var _this = this;

    _this['field'] = field;
    _this['operator'] = operator;
  };

  /**
   * Constructs a <code>TermFilter</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TermFilter} obj Optional instance to populate.
   * @return {module:model/TermFilter} The populated <code>TermFilter</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('field')) {
        obj['field'] = ApiClient.convertToType(data['field'], 'String');
      }
      if (data.hasOwnProperty('operator')) {
        obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
      }
      if (data.hasOwnProperty('values')) {
        obj['values'] = ApiClient.convertToType(data['values'], [Object]);
      }
    }
    return obj;
  }

  /**
   * The filter field.
   * @member {String} field
   */
  exports.prototype['field'] = undefined;
  /**
   * The operator to compare the field's values with the given ones.
   * @member {module:model/TermFilter.OperatorEnum} operator
   */
  exports.prototype['operator'] = undefined;
  /**
   * The filter values.
   * @member {Array.<Object>} values
   */
  exports.prototype['values'] = undefined;


  /**
   * Allowed values for the <code>operator</code> property.
   * @enum {String}
   * @readonly
   */
  exports.OperatorEnum = {
    /**
     * value: "is"
     * @const
     */
    "is": "is",
    /**
     * value: "one_of"
     * @const
     */
    "one_of": "one_of",
    /**
     * value: "is_null"
     * @const
     */
    "is_null": "is_null",
    /**
     * value: "is_not_null"
     * @const
     */
    "is_not_null": "is_not_null",
    /**
     * value: "less"
     * @const
     */
    "less": "less",
    /**
     * value: "greater"
     * @const
     */
    "greater": "greater",
    /**
     * value: "not_in"
     * @const
     */
    "not_in": "not_in",
    /**
     * value: "neq"
     * @const
     */
    "neq": "neq"  };


  return exports;
}));


