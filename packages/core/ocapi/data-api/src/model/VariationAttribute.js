/**
 * Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/VariationAttributeValue'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./VariationAttributeValue'));
  } else {
    // Browser globals (root is window)
    if (!root.DataApi) {
      root.DataApi = {};
    }
    root.DataApi.VariationAttribute = factory(root.DataApi.ApiClient, root.DataApi.VariationAttributeValue);
  }
}(this, function(ApiClient, VariationAttributeValue) {
  'use strict';



  /**
   * The VariationAttribute model module.
   * @module model/VariationAttribute
   * @version 20.8
   */

  /**
   * Constructs a new <code>VariationAttribute</code>.
   * Document representing a variation attribute.
   * @alias module:model/VariationAttribute
   * @class
   * @param attributeDefinitionId {String} The id of the requested attribute definition.
   */
  var exports = function(attributeDefinitionId) {
    var _this = this;

    _this['attribute_definition_id'] = attributeDefinitionId;
  };

  /**
   * Constructs a <code>VariationAttribute</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VariationAttribute} obj Optional instance to populate.
   * @return {module:model/VariationAttribute} The populated <code>VariationAttribute</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('attribute_definition_id')) {
        obj['attribute_definition_id'] = ApiClient.convertToType(data['attribute_definition_id'], 'String');
      }
      if (data.hasOwnProperty('attribute_definition_name')) {
        obj['attribute_definition_name'] = ApiClient.convertToType(data['attribute_definition_name'], {'String': 'String'});
      }
      if (data.hasOwnProperty('default_value')) {
        obj['default_value'] = ApiClient.convertToType(data['default_value'], 'String');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('link')) {
        obj['link'] = ApiClient.convertToType(data['link'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], {'String': 'String'});
      }
      if (data.hasOwnProperty('shared')) {
        obj['shared'] = ApiClient.convertToType(data['shared'], 'Boolean');
      }
      if (data.hasOwnProperty('slicing')) {
        obj['slicing'] = ApiClient.convertToType(data['slicing'], 'Boolean');
      }
      if (data.hasOwnProperty('values')) {
        obj['values'] = ApiClient.convertToType(data['values'], [VariationAttributeValue]);
      }
      if (data.hasOwnProperty('variation_attribute_type')) {
        obj['variation_attribute_type'] = ApiClient.convertToType(data['variation_attribute_type'], 'String');
      }
    }
    return obj;
  }

  /**
   * The id of the requested attribute definition.
   * @member {String} attribute_definition_id
   */
  exports.prototype['attribute_definition_id'] = undefined;
  /**
   * The localized display name of the variation attribute definition.
   * @member {Object.<String, String>} attribute_definition_name
   */
  exports.prototype['attribute_definition_name'] = undefined;
  /**
   * default variation attribute value
   * @member {String} default_value
   */
  exports.prototype['default_value'] = undefined;
  /**
   * The id of the variation attribute.
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * URL that is used to get this instance
   * @member {String} link
   */
  exports.prototype['link'] = undefined;
  /**
   * The localized display name of the variation attribute.
   * @member {Object.<String, String>} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Returns the value of attribute 'shared' if attribute is local or shared
   * @member {Boolean} shared
   */
  exports.prototype['shared'] = undefined;
  /**
   * Returns the value of attribute 'slicing'.
   * @member {Boolean} slicing
   */
  exports.prototype['slicing'] = undefined;
  /**
   * The sorted array of variation values. This array can be empty.
   * @member {Array.<module:model/VariationAttributeValue>} values
   */
  exports.prototype['values'] = undefined;
  /**
   * variation attribute type
   * @member {module:model/VariationAttribute.VariationAttributeTypeEnum} variation_attribute_type
   */
  exports.prototype['variation_attribute_type'] = undefined;


  /**
   * Allowed values for the <code>variation_attribute_type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.VariationAttributeTypeEnum = {
    /**
     * value: "string"
     * @const
     */
    "string": "string",
    /**
     * value: "int"
     * @const
     */
    "int": "int",
    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"  };


  return exports;
}));


